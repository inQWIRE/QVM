// Dafny 3.6.0.40511
// Command Line Options: /compile:0 /noNLarith /noVerify /print:/home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy.bpl /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy

type Ty;

type TyTag;

type TyTagFamily;

type char;

type ref;

type Box;

type ClassName;

type HandleType;

type DatatypeType;

type DtCtorId;

type LayerType;

type Field _;

type NameFamily;

type TickType;

type Seq _;

type Map _ _;

type IMap _ _;

const $$Language$Dafny: bool;

axiom $$Language$Dafny;

type Bv0 = int;

const unique TBool: Ty;

axiom Tag(TBool) == TagBool;

const unique TChar: Ty;

axiom Tag(TChar) == TagChar;

const unique TInt: Ty;

axiom Tag(TInt) == TagInt;

const unique TReal: Ty;

axiom Tag(TReal) == TagReal;

const unique TORDINAL: Ty;

axiom Tag(TORDINAL) == TagORDINAL;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

function TBitvector(int) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

function TSeq(Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

function TIMap(Ty, Ty) : Ty;

function Inv0_TBitvector(Ty) : int;

function Inv0_TSet(Ty) : Ty;

function Inv0_TISet(Ty) : Ty;

function Inv0_TSeq(Ty) : Ty;

function Inv0_TMultiSet(Ty) : Ty;

function Inv0_TMap(Ty) : Ty;

function Inv1_TMap(Ty) : Ty;

function Inv0_TIMap(Ty) : Ty;

function Inv1_TIMap(Ty) : Ty;

function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

function TagFamily(Ty) : TyTagFamily;

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

function {:identity} Lit<T>(x: T) : T;

axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

function {:identity} LitInt(x: int) : int;

axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

function {:identity} LitReal(x: real) : real;

axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);

axiom (forall n: int :: 
  { char#FromInt(n) } 
  0 <= n && n < 65536 ==> char#ToInt(char#FromInt(n)) == n);

function char#FromInt(int) : char;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch
     && 0 <= char#ToInt(ch)
     && char#ToInt(ch) < 65536);

function char#ToInt(char) : int;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

function char#Minus(char, char) : char;

const null: ref;

const $ArbitraryBoxValue: Box;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

function $Box<T>(T) : Box;

function $Unbox<T>(Box) : T;

function $IsBox<T>(T, Ty) : bool;

function $IsAllocBox<T>(T, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Set Box, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set Box) == bx && $Is($Unbox(bx): Set Box, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet Box) == bx && $Is($Unbox(bx): ISet Box, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet Box) == bx
       && $Is($Unbox(bx): MultiSet Box, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq Box) == bx && $Is($Unbox(bx): Seq Box, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map Box Box) == bx && $Is($Unbox(bx): Map Box Box, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap Box Box) == bx
       && $Is($Unbox(bx): IMap Box Box, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set Box, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: ISet Box, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet Box, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: { v[bx] } 0 < v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet Box, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq Box, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Map#Domain(v)[bx] } 
      Map#Domain(v)[bx] ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

function $Is<T>(T, Ty) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: { v[bx] } 0 < v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Map#Domain(v)[bx] } 
      Map#Domain(v)[bx]
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

function $AlwaysAllocated(Ty) : bool;

function $OlderTag(Heap) : bool;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

function Tclass._System.object?() : Ty;

function Tclass._System.Tuple2(Ty, Ty) : Ty;

function dtype(ref) : Ty;

function TypeTuple(a: ClassName, b: ClassName) : ClassName;

function TypeTupleCar(ClassName) : ClassName;

function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

function SetRef_to_SetBox(s: [ref]bool) : Set Box;

axiom (forall s: [ref]bool, bx: Box :: 
  { SetRef_to_SetBox(s)[bx] } 
  SetRef_to_SetBox(s)[bx] == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

function DatatypeCtorId(DatatypeType) : DtCtorId;

function DtRank(DatatypeType) : int;

function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

function ORD#IsNat(ORDINAL) : bool;

function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

const $LZ: LayerType;

function $LS(LayerType) : LayerType;

function AsFuelBottom(LayerType) : LayerType;

function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

axiom FDim(alloc) == 0;

function FDim<T>(Field T) : int;

function IndexField(int) : Field Box;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

function IndexField_Inverse<T>(Field T) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

function MultiIndexField(Field Box, int) : Field Box;

axiom (forall f: Field Box, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

function MultiIndexField_Inverse0<T>(Field T) : Field T;

function MultiIndexField_Inverse1<T>(Field T) : int;

axiom (forall f: Field Box, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

function DeclType<T>(Field T) : ClassName;

axiom DeclName(alloc) == allocName;

function DeclName<T>(Field T) : NameFamily;

function FieldOfDecl<alpha>(ClassName, NameFamily) : Field alpha;

axiom (forall<T> cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field T } 
  DeclType(FieldOfDecl(cl, nm): Field T) == cl
     && DeclName(FieldOfDecl(cl, nm): Field T) == nm);

axiom $IsGhostField(alloc);

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall<alpha> o: ref, f: Field alpha :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

function $IsGhostField<T>(Field T) : bool;

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field bool;

const unique allocName: NameFamily;

axiom (forall o: ref :: 0 <= _System.array.Length(o));

function _System.array.Length(a: ref) : int;

function Int(x: real) : int;

axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));

function Real(x: int) : real;

axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref]<alpha>[Field alpha]alpha;

function {:inline} read<alpha>(H: Heap, r: ref, f: Field alpha) : alpha
{
  H[r][f]
}

function {:inline} update<alpha>(H: Heap, r: ref, f: Field alpha, v: alpha) : Heap
{
  H[r := H[r][f := v]]
}

function $IsGoodHeap(Heap) : bool;

function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap;

axiom $IsGoodHeap($OneHeap);

function $HeapSucc(Heap, Heap) : bool;

axiom (forall<alpha> h: Heap, r: ref, f: Field alpha, x: alpha :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: { read(k, o, alloc) } read(h, o, alloc) ==> read(k, o, alloc)));

function $HeapSuccGhost(Heap, Heap) : bool;

var $Tick: TickType;

procedure $YieldHavoc(this: ref, rds: Set Box, nw: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
    { read($Heap, $o, $f) } 
    $o != null && read(old($Heap), $o, alloc)
       ==> 
      $o == this || rds[$Box($o)] || nw[$Box($o)]
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set Box, modi: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
    { read($Heap, $o, $f) } 
    $o != null && read(old($Heap), $o, alloc)
       ==> 
      rds[$Box($o)] && !modi[$Box($o)] && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set Box, nw: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
    { read($Heap, $o, $f) } 
    $o != null && read(old($Heap), $o, alloc)
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || modi[$Box($o)]
         || nw[$Box($o)]);
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field (Set Box))
   returns (s: Set Box);
  ensures (forall bx: Box :: 
    { s[bx] } 
    s[bx]
       <==> read(newHeap, this, NW)[bx]
         || (
          $Unbox(bx) != null
           && !read(prevHeap, $Unbox(bx): ref, alloc)
           && read(newHeap, $Unbox(bx): ref, alloc)));



type Set T = [T]bool;

function Set#Card<T>(Set T) : int;

axiom (forall<T> s: Set T :: { Set#Card(s) } 0 <= Set#Card(s));

function Set#Empty<T>() : Set T;

axiom (forall<T> o: T :: { Set#Empty()[o] } !Set#Empty()[o]);

axiom (forall<T> s: Set T :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0 ==> (exists x: T :: s[x])));

function Set#Singleton<T>(T) : Set T;

axiom (forall<T> r: T :: { Set#Singleton(r) } Set#Singleton(r)[r]);

axiom (forall<T> r: T, o: T :: 
  { Set#Singleton(r)[o] } 
  Set#Singleton(r)[o] <==> r == o);

axiom (forall<T> r: T :: 
  { Set#Card(Set#Singleton(r)) } 
  Set#Card(Set#Singleton(r)) == 1);

function Set#UnionOne<T>(Set T, T) : Set T;

axiom (forall<T> a: Set T, x: T, o: T :: 
  { Set#UnionOne(a, x)[o] } 
  Set#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall<T> a: Set T, x: T :: { Set#UnionOne(a, x) } Set#UnionOne(a, x)[x]);

axiom (forall<T> a: Set T, x: T, y: T :: 
  { Set#UnionOne(a, x), a[y] } 
  a[y] ==> Set#UnionOne(a, x)[y]);

axiom (forall<T> a: Set T, x: T :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall<T> a: Set T, x: T :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

function Set#Union<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Union(a, b)[o] } 
  Set#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Union(a, b), a[y] } 
  a[y] ==> Set#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Union(a, b), b[y] } 
  b[y] ==> Set#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

function Set#Intersection<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Intersection(a, b)[o] } 
  Set#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

function Set#Difference<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Difference(a, b)[o] } 
  Set#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Difference(a, b), b[y] } 
  b[y] ==> !Set#Difference(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

function Set#Subset<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] ==> b[o]));

function Set#Equal<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall<T> a: Set T, b: Set T :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

function Set#Disjoint<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b) <==> (forall o: T :: { a[o] } { b[o] } !a[o] || !b[o]));

type ISet T = [T]bool;

function ISet#Empty<T>() : Set T;

axiom (forall<T> o: T :: { ISet#Empty()[o] } !ISet#Empty()[o]);

function ISet#UnionOne<T>(ISet T, T) : ISet T;

axiom (forall<T> a: ISet T, x: T, o: T :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall<T> a: ISet T, x: T :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall<T> a: ISet T, x: T, y: T :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

function ISet#Union<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall<T> a: ISet T, b: ISet T, y: T :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

function ISet#Intersection<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

function ISet#Difference<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall<T> a: ISet T, b: ISet T, y: T :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

function ISet#Subset<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] ==> b[o]));

function ISet#Equal<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) ==> a == b);

function ISet#Disjoint<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: T :: { a[o] } { b[o] } !a[o] || !b[o]));

function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet T = [T]int;

function $IsGoodMultiSet<T>(ms: MultiSet T) : bool;

axiom (forall<T> ms: MultiSet T :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: T :: { ms[bx] } 0 <= ms[bx] && ms[bx] <= MultiSet#Card(ms)));

function MultiSet#Card<T>(MultiSet T) : int;

axiom (forall<T> s: MultiSet T :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall<T> s: MultiSet T, x: T, n: int :: 
  { MultiSet#Card(s[x := n]) } 
  0 <= n ==> MultiSet#Card(s[x := n]) == MultiSet#Card(s) - s[x] + n);

function MultiSet#Empty<T>() : MultiSet T;

axiom (forall<T> o: T :: { MultiSet#Empty()[o] } MultiSet#Empty()[o] == 0);

axiom (forall<T> s: MultiSet T :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0 ==> (exists x: T :: 0 < s[x])));

function MultiSet#Singleton<T>(T) : MultiSet T;

axiom (forall<T> r: T, o: T :: 
  { MultiSet#Singleton(r)[o] } 
  (MultiSet#Singleton(r)[o] == 1 <==> r == o)
     && (MultiSet#Singleton(r)[o] == 0 <==> r != o));

axiom (forall<T> r: T :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

function MultiSet#UnionOne<T>(MultiSet T, T) : MultiSet T;

axiom (forall<T> a: MultiSet T, x: T, o: T :: 
  { MultiSet#UnionOne(a, x)[o] } 
  0 < MultiSet#UnionOne(a, x)[o] <==> o == x || 0 < a[o]);

axiom (forall<T> a: MultiSet T, x: T :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#UnionOne(a, x)[x] == a[x] + 1);

axiom (forall<T> a: MultiSet T, x: T, y: T :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  0 < a[y] ==> 0 < MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: T, y: T :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  x != y ==> a[y] == MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: T :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

function MultiSet#Union<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Union(a, b)[o] } 
  MultiSet#Union(a, b)[o] == a[o] + b[o]);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

function MultiSet#Intersection<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Intersection(a, b)[o] } 
  MultiSet#Intersection(a, b)[o] == Math#min(a[o], b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

function MultiSet#Difference<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Difference(a, b)[o] } 
  MultiSet#Difference(a, b)[o] == Math#clip(a[o] - b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T, y: T :: 
  { MultiSet#Difference(a, b), b[y], a[y] } 
  a[y] <= b[y] ==> MultiSet#Difference(a, b)[y] == 0);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

function MultiSet#Subset<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <= b[o]));

function MultiSet#Equal<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] == b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

function MultiSet#Disjoint<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: T :: { a[o] } { b[o] } a[o] == 0 || b[o] == 0));

function MultiSet#FromSet<T>(Set T) : MultiSet T;

axiom (forall<T> s: Set T, a: T :: 
  { MultiSet#FromSet(s)[a] } 
  (MultiSet#FromSet(s)[a] == 0 <==> !s[a])
     && (MultiSet#FromSet(s)[a] == 1 <==> s[a]));

axiom (forall<T> s: Set T :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

axiom (forall<T>  :: 
  MultiSet#FromSeq(Seq#Empty(): Seq T) == MultiSet#Empty(): MultiSet T);

function MultiSet#FromSeq<T>(Seq T) : MultiSet T;

axiom (forall<T> s: Seq T :: 
  { MultiSet#FromSeq(s) } 
  $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall<T> s: Seq T :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall<T> s: Seq T, v: T :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall<T> a: Seq T, b: Seq T :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall<T> s: Seq T, i: int, v: T, x: T :: 
  { MultiSet#FromSeq(Seq#Update(s, i, v))[x] } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#FromSeq(Seq#Update(s, i, v))[x]
       == MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
        MultiSet#Singleton(v))[x]);

axiom (forall<T> s: Seq T, x: T :: 
  { MultiSet#FromSeq(s)[x] } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#FromSeq(s)[x]);

function Seq#Length<T>(Seq T) : int;

axiom (forall<T> s: Seq T :: { Seq#Length(s) } 0 <= Seq#Length(s));

function Seq#Empty<T>() : Seq T;

axiom (forall<T>  :: { Seq#Empty(): Seq T } Seq#Length(Seq#Empty(): Seq T) == 0);

axiom (forall<T> s: Seq T :: 
  { Seq#Length(s) } 
  Seq#Length(s) == 0 ==> s == Seq#Empty());

function Seq#Singleton<T>(T) : Seq T;

axiom (forall<T> t: T :: 
  { Seq#Length(Seq#Singleton(t)) } 
  Seq#Length(Seq#Singleton(t)) == 1);

function Seq#Build<T>(s: Seq T, val: T) : Seq T;

function Seq#Build_inv0<T>(s: Seq T) : Seq T;

function Seq#Build_inv1<T>(s: Seq T) : T;

axiom (forall<T> s: Seq T, val: T :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall<T> s: Seq T, v: T :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall<T> s: Seq T, i: int, v: T :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s: Seq Box, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq Box;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq Box) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq Box) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, TSeq(ty), heap, init, $Box(i)));

function Seq#Append<T>(Seq T, Seq T) : Seq T;

axiom (forall<T> s0: Seq T, s1: Seq T :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

function Seq#Index<T>(Seq T, int) : T;

axiom (forall<T> t: T :: 
  { Seq#Index(Seq#Singleton(t), 0) } 
  Seq#Index(Seq#Singleton(t), 0) == t);

axiom (forall<T> s0: Seq T, s1: Seq T, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

function Seq#Update<T>(Seq T, int, T) : Seq T;

axiom (forall<T> s: Seq T, i: int, v: T :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

function Seq#Contains<T>(Seq T, T) : bool;

axiom (forall<T> s: Seq T, x: T :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall<T> x: T :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall<T> s0: Seq T, s1: Seq T, x: T :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall<T> s: Seq T, v: T, x: T :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall<T> s: Seq T, n: int, x: T :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall<T> s: Seq T, n: int, x: T :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

function Seq#Equal<T>(Seq T, Seq T) : bool;

axiom (forall<T> s0: Seq T, s1: Seq T :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall<T> a: Seq T, b: Seq T :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

function Seq#SameUntil<T>(Seq T, Seq T, int) : bool;

axiom (forall<T> s0: Seq T, s1: Seq T, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

function Seq#Take<T>(s: Seq T, howMany: int) : Seq T;

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall<T> s: Seq T, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

function Seq#Drop<T>(s: Seq T, howMany: int) : Seq T;

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall<T> s: Seq T, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall<T> s: Seq T, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall<T> s: Seq T, t: Seq T, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

function Seq#FromArray(h: Heap, a: ref) : Seq Box;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq Box, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field Box)));

axiom (forall<T> s: Seq T, v: T, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

function Seq#Rank<T>(Seq T) : int;

axiom (forall s: Seq Box, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Drop(s, n) } 
  n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall<T> s: Seq T, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

function Map#Domain<U,V>(Map U V) : Set U;

function Map#Elements<U,V>(Map U V) : [U]V;

function Map#Card<U,V>(Map U V) : int;

axiom (forall<U,V> m: Map U V :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall<U,V> m: Map U V :: 
  { Map#Card(m) } 
  Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall<U,V> m: Map U V :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: U :: Map#Domain(m)[k]));

axiom (forall<U,V> m: Map U V :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: V :: Map#Values(m)[v]));

axiom (forall<U,V> m: Map U V :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: Map#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall<U,V> m: Map U V :: 
  { Set#Card(Map#Domain(m)) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall<U,V> m: Map U V :: 
  { Set#Card(Map#Values(m)) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall<U,V> m: Map U V :: 
  { Set#Card(Map#Items(m)) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

function Map#Values<U,V>(Map U V) : Set V;

axiom (forall<U,V> m: Map U V, v: V :: 
  { Map#Values(m)[v] } 
  Map#Values(m)[v]
     == (exists u: U :: 
      { Map#Domain(m)[u] } { Map#Elements(m)[u] } 
      Map#Domain(m)[u] && v == Map#Elements(m)[u]));

function Map#Items<U,V>(Map U V) : Set Box;

function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

function _System.Tuple2._0(DatatypeType) : Box;

function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map Box Box, item: Box :: 
  { Map#Items(m)[item] } 
  Map#Items(m)[item]
     <==> Map#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

function Map#Empty<U,V>() : Map U V;

axiom (forall<U,V> u: U :: 
  { Map#Domain(Map#Empty(): Map U V)[u] } 
  !Map#Domain(Map#Empty(): Map U V)[u]);

function Map#Glue<U,V>([U]bool, [U]V, Ty) : Map U V;

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

function Map#Build<U,V>(Map U V, U, V) : Map U V;

axiom (forall<U,V> m: Map U V, u: U, u': U, v: V :: 
  { Map#Domain(Map#Build(m, u, v))[u'] } { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Map#Domain(Map#Build(m, u, v))[u'] && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Map#Domain(Map#Build(m, u, v))[u'] == Map#Domain(m)[u']
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall<U,V> m: Map U V, u: U, v: V :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Map#Domain(m)[u] ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall<U,V> m: Map U V, u: U, v: V :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Map#Domain(m)[u] ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

function Map#Merge<U,V>(Map U V, Map U V) : Map U V;

axiom (forall<U,V> m: Map U V, n: Map U V :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall<U,V> m: Map U V, n: Map U V, u: U :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Map#Domain(Map#Merge(m, n))[u]
     ==> (!Map#Domain(n)[u] ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Map#Domain(n)[u] ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

function Map#Subtract<U,V>(Map U V, Set U) : Map U V;

axiom (forall<U,V> m: Map U V, s: Set U :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall<U,V> m: Map U V, s: Set U, u: U :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Map#Domain(Map#Subtract(m, s))[u]
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

function Map#Equal<U,V>(Map U V, Map U V) : bool;

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: U :: Map#Domain(m)[u] == Map#Domain(m')[u])
       && (forall u: U :: Map#Domain(m)[u] ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m') ==> m == m');

function Map#Disjoint<U,V>(Map U V, Map U V) : bool;

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: U :: 
      { Map#Domain(m)[o] } { Map#Domain(m')[o] } 
      !Map#Domain(m)[o] || !Map#Domain(m')[o]));

function IMap#Domain<U,V>(IMap U V) : Set U;

function IMap#Elements<U,V>(IMap U V) : [U]V;

axiom (forall<U,V> m: IMap U V :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: U :: IMap#Domain(m)[k]));

axiom (forall<U,V> m: IMap U V :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: V :: IMap#Values(m)[v]));

axiom (forall<U,V> m: IMap U V :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall<U,V> m: IMap U V :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall<U,V> m: IMap U V :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall<U,V> m: IMap U V :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

function IMap#Values<U,V>(IMap U V) : Set V;

axiom (forall<U,V> m: IMap U V, v: V :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: U :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

function IMap#Items<U,V>(IMap U V) : Set Box;

axiom (forall m: IMap Box Box, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

function IMap#Empty<U,V>() : IMap U V;

axiom (forall<U,V> u: U :: 
  { IMap#Domain(IMap#Empty(): IMap U V)[u] } 
  !IMap#Domain(IMap#Empty(): IMap U V)[u]);

function IMap#Glue<U,V>([U]bool, [U]V, Ty) : IMap U V;

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

function IMap#Build<U,V>(IMap U V, U, V) : IMap U V;

axiom (forall<U,V> m: IMap U V, u: U, u': U, v: V :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

function IMap#Equal<U,V>(IMap U V, IMap U V) : bool;

axiom (forall<U,V> m: IMap U V, m': IMap U V :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: U :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: U :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall<U,V> m: IMap U V, m': IMap U V :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

function IMap#Merge<U,V>(IMap U V, IMap U V) : IMap U V;

axiom (forall<U,V> m: IMap U V, n: IMap U V :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == Set#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall<U,V> m: IMap U V, n: IMap U V, u: U :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

function IMap#Subtract<U,V>(IMap U V, Set U) : IMap U V;

axiom (forall<U,V> m: IMap U V, s: Set U :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s)) == Set#Difference(IMap#Domain(m), s));

axiom (forall<U,V> m: IMap U V, s: Set U, u: U :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

function INTERNAL_add_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);

function INTERNAL_sub_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);

function INTERNAL_mul_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);

function INTERNAL_div_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);

function INTERNAL_mod_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);

function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));

function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));

function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));

function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));

function Mul(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);

function Div(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);

function Mod(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);

function Add(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);

function Sub(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);

function Tclass._System.nat() : Ty;

const unique Tagclass._System.nat: TyTag;

// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// _System.nat: subset type $Is
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> INTERNAL_le_boogie(0, x#0));

// _System.nat: subset type $IsAlloc
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// object: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// object: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || read($h, $o, alloc));

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty;

const unique Tagclass._System.object: TyTag;

// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// _System.object: non-null type $Is
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// _System.object: non-null type $IsAlloc
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && read($h, $o, alloc)
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// array: Class $Is
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// array: Class $IsAlloc
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || read($h, $o, alloc));

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), read($h, $o, alloc), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && read($h, $o, alloc)
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// _System.array: non-null type $Is
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// _System.array: non-null type $IsAlloc
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set Box) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box, 
    bx: Box :: 
  { Reads1(t0, t1, heap, Handle1(h, r, rd), bx0)[bx] } 
  Reads1(t0, t1, heap, Handle1(h, r, rd), bx0)[bx] == rd[heap, bx0][bx]);

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h0, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h1, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h0, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h1, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h0, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h1, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set Box)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set Box)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set Box)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Reads1(t0, t1, h, f, bx0)[$Box(r)] } 
            r != null && Reads1(t0, t1, h, f, bx0)[$Box(r)] ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// _System._#PartialFunc1: subset type $Is
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set Box)));

// _System._#PartialFunc1: subset type $IsAlloc
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// _System._#TotalFunc1: subset type $Is
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// _System._#TotalFunc1: subset type $IsAlloc
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set Box) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set Box;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box, bx: Box :: 
  { Reads0(t0, heap, Handle0(h, r, rd))[bx] } 
  Reads0(t0, heap, Handle0(h, r, rd))[bx] == rd[heap][bx]);

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h0, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h1, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h0, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h1, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h0, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h1, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set Box)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set Box)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set Box)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Reads0(t0, h, f)[$Box(r)] } 
          r != null && Reads0(t0, h, f)[$Box(r)] ==> read(h, r, alloc))));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// _System._#PartialFunc0: subset type $Is
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set Box));

// _System._#PartialFunc0: subset type $IsAlloc
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// _System._#TotalFunc0: subset type $Is
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// _System._#TotalFunc0: subset type $IsAlloc
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set Box) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1)[bx] } 
  Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1)[bx]
     == rd[heap, bx0, bx1][bx]);

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h0, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h1, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h0, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h1, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h0, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h1, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set Box)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set Box)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set Box)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Reads2(t0, t1, t2, h, f, bx0, bx1)[$Box(r)] } 
            r != null && Reads2(t0, t1, t2, h, f, bx0, bx1)[$Box(r)] ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// _System._#PartialFunc2: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set Box)));

// _System._#PartialFunc2: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// _System._#TotalFunc2: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// _System._#TotalFunc2: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);

const unique ##_System._tuple#2._#Make2: DtCtorId;

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  true
     ==> (_System.Tuple2#Equal(a, b)
       <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
         && _System.Tuple2._1(a) == _System.Tuple2._1(b)));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

function Tclass._System.___hFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc4: TyTag;

// Tclass._System.___hFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hFunc4
     && TagFamily(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#Func4);

function Tclass._System.___hFunc4_0(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_0(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hFunc4_1(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_1(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hFunc4_2(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_2(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hFunc4_3(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_3(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hFunc4_4(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_4(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

function Handle4([Heap,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box]Set Box)
   : HandleType;

function Apply4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Box;

function Requires4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : bool;

function Reads4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)
     == h[heap, bx0, bx1, bx2, bx3]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  r[heap, bx0, bx1, bx2, bx3]
     ==> Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx: Box :: 
  { Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)[bx] } 
  Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)[bx]
     == rd[heap, bx0, bx1, bx2, bx3][bx]);

function {:inline} Requires4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

function {:inline} Reads4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// empty-reads property for Reads4 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     ==> (Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), 
        Set#Empty(): Set Box)
       <==> Set#Equal(Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set Box)));

// empty-reads property for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), 
        Set#Empty(): Set Box)
     ==> Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)), $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, t4) } { $IsBox(bx, u4) } 
        $IsBox(bx, t4) ==> $IsBox(bx, u4))
     ==> $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
        { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
          { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
           ==> (forall r: ref :: 
            { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)[$Box(r)] } 
            r != null && Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)[$Box(r)]
               ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsAllocBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4, h)));

function Tclass._System.___hPartialFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc4: TyTag;

// Tclass._System.___hPartialFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hPartialFunc4
     && TagFamily(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#PartialFunc4);

function Tclass._System.___hPartialFunc4_0(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_0(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc4_1(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_1(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc4_2(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_2(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc4_3(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_3(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc4_4(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_4(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// _System._#PartialFunc4: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Set#Equal(Reads4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0), 
            Set#Empty(): Set Box)));

// _System._#PartialFunc4: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hTotalFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc4: TyTag;

// Tclass._System.___hTotalFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hTotalFunc4
     && TagFamily(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#TotalFunc4);

function Tclass._System.___hTotalFunc4_0(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_0(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc4_1(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_1(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc4_2(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_2(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc4_3(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_3(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc4_4(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_4(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// _System._#TotalFunc4: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Requires4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0)));

// _System._#TotalFunc4: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc3: TyTag;

// Tclass._System.___hFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hFunc3
     && TagFamily(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#Func3);

function Tclass._System.___hFunc3_0(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_0(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hFunc3_1(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_1(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hFunc3_2(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_2(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hFunc3_3(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_3(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)));

function Handle3([Heap,Box,Box,Box]Box, [Heap,Box,Box,Box]bool, [Heap,Box,Box,Box]Set Box)
   : HandleType;

function Apply3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Box;

function Requires3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : bool;

function Reads3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)
     == h[heap, bx0, bx1, bx2]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  r[heap, bx0, bx1, bx2]
     ==> Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx: Box :: 
  { Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)[bx] } 
  Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)[bx]
     == rd[heap, bx0, bx1, bx2][bx]);

function {:inline} Requires3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

function {:inline} Reads3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// empty-reads property for Reads3 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     ==> (Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set Box)
       <==> Set#Equal(Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2), Set#Empty(): Set Box)));

// empty-reads property for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set Box)
     ==> Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, u0: Ty, u1: Ty, u2: Ty, u3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)), $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, t3) } { $IsBox(bx, u3) } 
        $IsBox(bx, t3) ==> $IsBox(bx, u3))
     ==> $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box :: 
        { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
          { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
           ==> (forall r: ref :: 
            { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)[$Box(r)] } 
            r != null && Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)[$Box(r)]
               ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsAllocBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3, h)));

function Tclass._System.___hPartialFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc3: TyTag;

// Tclass._System.___hPartialFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hPartialFunc3
     && TagFamily(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#PartialFunc3);

function Tclass._System.___hPartialFunc3_0(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_0(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc3_1(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_1(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc3_2(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_2(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc3_3(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_3(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)));

// _System._#PartialFunc3: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Set#Equal(Reads3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0), 
            Set#Empty(): Set Box)));

// _System._#PartialFunc3: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hTotalFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc3: TyTag;

// Tclass._System.___hTotalFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hTotalFunc3
     && TagFamily(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#TotalFunc3);

function Tclass._System.___hTotalFunc3_0(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_0(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc3_1(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_1(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc3_2(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_2(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc3_3(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_3(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)));

// _System._#TotalFunc3: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Requires3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0)));

// _System._#TotalFunc3: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h));

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType;

// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;

const unique ##_System._tuple#0._#Make0: DtCtorId;

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty;

const unique Tagclass._System.Tuple0: TyTag;

// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#_System._tuple#0._#Make0(), Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h)
     ==> $IsAlloc(#_System._tuple#0._#Make0(), Tclass._System.Tuple0(), $h));

// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  true ==> (_System.Tuple0#Equal(a, b) <==> true));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

const BaseFuel_MulInternals._default.MulPos: LayerType;

const StartFuel_MulInternals._default.MulPos: LayerType;

const StartFuelAssert_MulInternals._default.MulPos: LayerType;

const BaseFuel_ModInternals._default.ModRecursive: LayerType;

const StartFuel_ModInternals._default.ModRecursive: LayerType;

const StartFuelAssert_ModInternals._default.ModRecursive: LayerType;

const BaseFuel_DivInternals._default.DivPos: LayerType;

const StartFuel_DivInternals._default.DivPos: LayerType;

const StartFuelAssert_DivInternals._default.DivPos: LayerType;

const BaseFuel_DivInternals._default.DivRecursive: LayerType;

const StartFuel_DivInternals._default.DivRecursive: LayerType;

const StartFuelAssert_DivInternals._default.DivRecursive: LayerType;

const BaseFuel_Power._default.Pow: LayerType;

const StartFuel_Power._default.Pow: LayerType;

const StartFuelAssert_Power._default.Pow: LayerType;

const BaseFuel_Power2._default.Pow2: LayerType;

const StartFuel_Power2._default.Pow2: LayerType;

const StartFuelAssert_Power2._default.Pow2: LayerType;

const BaseFuel_B2N._default.b2nAux: LayerType;

const StartFuel_B2N._default.b2nAux: LayerType;

const StartFuelAssert_B2N._default.b2nAux: LayerType;

// Constructor function declaration
function #_module.Mode.Nor(ref) : DatatypeType;

// Constructor identifier
axiom (forall a#12#0#0: ref :: 
  { #_module.Mode.Nor(a#12#0#0) } 
  DatatypeCtorId(#_module.Mode.Nor(a#12#0#0)) == ##_module.Mode.Nor);

const unique ##_module.Mode.Nor: DtCtorId;

function _module.Mode.Nor_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Mode.Nor_q(d) } 
  _module.Mode.Nor_q(d) <==> DatatypeCtorId(d) == ##_module.Mode.Nor);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Mode.Nor_q(d) } 
  _module.Mode.Nor_q(d)
     ==> (exists a#13#0#0: ref :: d == #_module.Mode.Nor(a#13#0#0)));

function Tclass._module.Mode() : Ty;

const unique Tagclass._module.Mode: TyTag;

// Tclass._module.Mode Tag
axiom Tag(Tclass._module.Mode()) == Tagclass._module.Mode
   && TagFamily(Tclass._module.Mode()) == tytagFamily$Mode;

// Box/unbox axiom for Tclass._module.Mode
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Mode()) } 
  $IsBox(bx, Tclass._module.Mode())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Mode()));

// Constructor $Is
axiom (forall a#14#0#0: ref :: 
  { $Is(#_module.Mode.Nor(a#14#0#0), Tclass._module.Mode()) } 
  $Is(#_module.Mode.Nor(a#14#0#0), Tclass._module.Mode())
     <==> $Is(a#14#0#0, Tclass._System.array(Tclass._System.nat())));

// Constructor $IsAlloc
axiom (forall a#14#0#0: ref, $h: Heap :: 
  { $IsAlloc(#_module.Mode.Nor(a#14#0#0), Tclass._module.Mode(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_module.Mode.Nor(a#14#0#0), Tclass._module.Mode(), $h)
       <==> $IsAlloc(a#14#0#0, Tclass._System.array(Tclass._System.nat()), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Mode.b(d), Tclass._System.array(Tclass._System.nat()), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Mode.Nor_q(d)
       && $IsAlloc(d, Tclass._module.Mode(), $h)
     ==> $IsAlloc(_module.Mode.b(d), Tclass._System.array(Tclass._System.nat()), $h));

// Constructor literal
axiom (forall a#15#0#0: ref :: 
  { #_module.Mode.Nor(Lit(a#15#0#0)) } 
  #_module.Mode.Nor(Lit(a#15#0#0)) == Lit(#_module.Mode.Nor(a#15#0#0)));

function _module.Mode.b(DatatypeType) : ref;

// Constructor injectivity
axiom (forall a#16#0#0: ref :: 
  { #_module.Mode.Nor(a#16#0#0) } 
  _module.Mode.b(#_module.Mode.Nor(a#16#0#0)) == a#16#0#0);

// Constructor function declaration
function #_module.Mode.Had(ref) : DatatypeType;

// Constructor identifier
axiom (forall a#17#0#0: ref :: 
  { #_module.Mode.Had(a#17#0#0) } 
  DatatypeCtorId(#_module.Mode.Had(a#17#0#0)) == ##_module.Mode.Had);

const unique ##_module.Mode.Had: DtCtorId;

function _module.Mode.Had_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Mode.Had_q(d) } 
  _module.Mode.Had_q(d) <==> DatatypeCtorId(d) == ##_module.Mode.Had);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Mode.Had_q(d) } 
  _module.Mode.Had_q(d)
     ==> (exists a#18#0#0: ref :: d == #_module.Mode.Had(a#18#0#0)));

// Constructor $Is
axiom (forall a#19#0#0: ref :: 
  { $Is(#_module.Mode.Had(a#19#0#0), Tclass._module.Mode()) } 
  $Is(#_module.Mode.Had(a#19#0#0), Tclass._module.Mode())
     <==> $Is(a#19#0#0, Tclass._System.array(TInt)));

// Constructor $IsAlloc
axiom (forall a#19#0#0: ref, $h: Heap :: 
  { $IsAlloc(#_module.Mode.Had(a#19#0#0), Tclass._module.Mode(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_module.Mode.Had(a#19#0#0), Tclass._module.Mode(), $h)
       <==> $IsAlloc(a#19#0#0, Tclass._System.array(TInt), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Mode.h(d), Tclass._System.array(TInt), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Mode.Had_q(d)
       && $IsAlloc(d, Tclass._module.Mode(), $h)
     ==> $IsAlloc(_module.Mode.h(d), Tclass._System.array(TInt), $h));

// Constructor literal
axiom (forall a#20#0#0: ref :: 
  { #_module.Mode.Had(Lit(a#20#0#0)) } 
  #_module.Mode.Had(Lit(a#20#0#0)) == Lit(#_module.Mode.Had(a#20#0#0)));

function _module.Mode.h(DatatypeType) : ref;

// Constructor injectivity
axiom (forall a#21#0#0: ref :: 
  { #_module.Mode.Had(a#21#0#0) } 
  _module.Mode.h(#_module.Mode.Had(a#21#0#0)) == a#21#0#0);

// Constructor function declaration
function #_module.Mode.CH(int, ref) : DatatypeType;

// Constructor identifier
axiom (forall a#22#0#0: int, a#22#1#0: ref :: 
  { #_module.Mode.CH(a#22#0#0, a#22#1#0) } 
  DatatypeCtorId(#_module.Mode.CH(a#22#0#0, a#22#1#0)) == ##_module.Mode.CH);

const unique ##_module.Mode.CH: DtCtorId;

function _module.Mode.CH_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Mode.CH_q(d) } 
  _module.Mode.CH_q(d) <==> DatatypeCtorId(d) == ##_module.Mode.CH);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Mode.CH_q(d) } 
  _module.Mode.CH_q(d)
     ==> (exists a#23#0#0: int, a#23#1#0: ref :: 
      d == #_module.Mode.CH(a#23#0#0, a#23#1#0)));

// Constructor $Is
axiom (forall a#24#0#0: int, a#24#1#0: ref :: 
  { $Is(#_module.Mode.CH(a#24#0#0, a#24#1#0), Tclass._module.Mode()) } 
  $Is(#_module.Mode.CH(a#24#0#0, a#24#1#0), Tclass._module.Mode())
     <==> $Is(a#24#0#0, Tclass._System.nat())
       && $Is(a#24#1#0, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt))));

// Constructor $IsAlloc
axiom (forall a#24#0#0: int, a#24#1#0: ref, $h: Heap :: 
  { $IsAlloc(#_module.Mode.CH(a#24#0#0, a#24#1#0), Tclass._module.Mode(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_module.Mode.CH(a#24#0#0, a#24#1#0), Tclass._module.Mode(), $h)
       <==> $IsAlloc(a#24#0#0, Tclass._System.nat(), $h)
         && $IsAlloc(a#24#1#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Mode.dof(d), Tclass._System.nat(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Mode.CH_q(d)
       && $IsAlloc(d, Tclass._module.Mode(), $h)
     ==> $IsAlloc(_module.Mode.dof(d), Tclass._System.nat(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Mode.c(d), 
      Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
      $h) } 
  $IsGoodHeap($h)
       && 
      _module.Mode.CH_q(d)
       && $IsAlloc(d, Tclass._module.Mode(), $h)
     ==> $IsAlloc(_module.Mode.c(d), 
      Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
      $h));

// Constructor literal
axiom (forall a#25#0#0: int, a#25#1#0: ref :: 
  { #_module.Mode.CH(LitInt(a#25#0#0), Lit(a#25#1#0)) } 
  #_module.Mode.CH(LitInt(a#25#0#0), Lit(a#25#1#0))
     == Lit(#_module.Mode.CH(a#25#0#0, a#25#1#0)));

function _module.Mode.dof(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#26#0#0: int, a#26#1#0: ref :: 
  { #_module.Mode.CH(a#26#0#0, a#26#1#0) } 
  _module.Mode.dof(#_module.Mode.CH(a#26#0#0, a#26#1#0)) == a#26#0#0);

function _module.Mode.c(DatatypeType) : ref;

// Constructor injectivity
axiom (forall a#27#0#0: int, a#27#1#0: ref :: 
  { #_module.Mode.CH(a#27#0#0, a#27#1#0) } 
  _module.Mode.c(#_module.Mode.CH(a#27#0#0, a#27#1#0)) == a#27#1#0);

// Depth-one case-split function
function $IsA#_module.Mode(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Mode(d) } 
  $IsA#_module.Mode(d)
     ==> _module.Mode.Nor_q(d) || _module.Mode.Had_q(d) || _module.Mode.CH_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.Mode.CH_q(d), $Is(d, Tclass._module.Mode()) } 
    { _module.Mode.Had_q(d), $Is(d, Tclass._module.Mode()) } 
    { _module.Mode.Nor_q(d), $Is(d, Tclass._module.Mode()) } 
  $Is(d, Tclass._module.Mode())
     ==> _module.Mode.Nor_q(d) || _module.Mode.Had_q(d) || _module.Mode.CH_q(d));

// Datatype extensional equality declaration
function _module.Mode#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Mode.Nor
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Mode#Equal(a, b), _module.Mode.Nor_q(a) } 
    { _module.Mode#Equal(a, b), _module.Mode.Nor_q(b) } 
  _module.Mode.Nor_q(a) && _module.Mode.Nor_q(b)
     ==> (_module.Mode#Equal(a, b) <==> _module.Mode.b(a) == _module.Mode.b(b)));

// Datatype extensional equality definition: #_module.Mode.Had
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Mode#Equal(a, b), _module.Mode.Had_q(a) } 
    { _module.Mode#Equal(a, b), _module.Mode.Had_q(b) } 
  _module.Mode.Had_q(a) && _module.Mode.Had_q(b)
     ==> (_module.Mode#Equal(a, b) <==> _module.Mode.h(a) == _module.Mode.h(b)));

// Datatype extensional equality definition: #_module.Mode.CH
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Mode#Equal(a, b), _module.Mode.CH_q(a) } 
    { _module.Mode#Equal(a, b), _module.Mode.CH_q(b) } 
  _module.Mode.CH_q(a) && _module.Mode.CH_q(b)
     ==> (_module.Mode#Equal(a, b)
       <==> _module.Mode.dof(a) == _module.Mode.dof(b)
         && _module.Mode.c(a) == _module.Mode.c(b)));

// Datatype extensionality axiom: _module.Mode
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Mode#Equal(a, b) } 
  _module.Mode#Equal(a, b) <==> a == b);

const unique class._module.Mode: ClassName;

const unique class._module.Qubits?: ClassName;

function Tclass._module.Qubits?() : Ty;

const unique Tagclass._module.Qubits?: TyTag;

// Tclass._module.Qubits? Tag
axiom Tag(Tclass._module.Qubits?()) == Tagclass._module.Qubits?
   && TagFamily(Tclass._module.Qubits?()) == tytagFamily$Qubits;

// Box/unbox axiom for Tclass._module.Qubits?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Qubits?()) } 
  $IsBox(bx, Tclass._module.Qubits?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Qubits?()));

// Qubits: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Qubits?()) } 
  $Is($o, Tclass._module.Qubits?())
     <==> $o == null || dtype($o) == Tclass._module.Qubits?());

// Qubits: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Qubits?(), $h) } 
  $IsAlloc($o, Tclass._module.Qubits?(), $h)
     <==> $o == null || read($h, $o, alloc));

axiom FDim(_module.Qubits.m) == 0
   && FieldOfDecl(class._module.Qubits?, field$m) == _module.Qubits.m
   && !$IsGhostField(_module.Qubits.m);

const _module.Qubits.m: Field DatatypeType;

// Qubits.m: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Qubits.m) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Qubits?()
     ==> $Is(read($h, $o, _module.Qubits.m), Tclass._module.Mode()));

// Qubits.m: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Qubits.m) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Qubits?()
       && read($h, $o, alloc)
     ==> $IsAlloc(read($h, $o, _module.Qubits.m), Tclass._module.Mode(), $h));

axiom FDim(_module.Qubits.card) == 0
   && FieldOfDecl(class._module.Qubits?, field$card) == _module.Qubits.card
   && !$IsGhostField(_module.Qubits.card);

const _module.Qubits.card: Field int;

// Qubits.card: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Qubits.card) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Qubits?()
     ==> $Is(read($h, $o, _module.Qubits.card), Tclass._System.nat()));

// Qubits.card: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Qubits.card) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Qubits?()
       && read($h, $o, alloc)
     ==> $IsAlloc(read($h, $o, _module.Qubits.card), Tclass._System.nat(), $h));

function Tclass._module.Qubits() : Ty;

const unique Tagclass._module.Qubits: TyTag;

// Tclass._module.Qubits Tag
axiom Tag(Tclass._module.Qubits()) == Tagclass._module.Qubits
   && TagFamily(Tclass._module.Qubits()) == tytagFamily$Qubits;

// Box/unbox axiom for Tclass._module.Qubits
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Qubits()) } 
  $IsBox(bx, Tclass._module.Qubits())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Qubits()));

procedure CheckWellformed$$_module.Qubits.EmptyCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.EmptyCH(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: EmptyCH, CheckWellformed$$_module.Qubits.EmptyCH
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
    assume $HeapSucc(old($Heap), $Heap);
    assume read($Heap, this, _module.Qubits.card) == LitInt(0);
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.dof(read($Heap, this, _module.Qubits.m)) == LitInt(1);
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
    assert 0 <= LitInt(0)
       && LitInt(0)
         < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
    assume _System.Tuple2#Equal($Unbox(read($Heap, 
          _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
          IndexField(LitInt(0)))): DatatypeType, 
      #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
}



procedure Call$$_module.Qubits.EmptyCH()
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card) == LitInt(0);
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#1 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#1) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#1 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#1) == read($Heap, this, _module.Qubits.card))
           else (var c#1 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#1 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#1, tmp#0)
                 && INTERNAL_le_boogie(dof#1, _System.array.Length(c#1))
                 && INTERNAL_le_boogie(dof#1, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free ensures true;
  ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures _module.Mode.dof(read($Heap, this, _module.Qubits.m)) == LitInt(1);
  free ensures $IsA#_System.Tuple2($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType);
  ensures _System.Tuple2#Equal($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType, 
    #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
  // constructor allocates the object
  ensures !read(old($Heap), this, alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.EmptyCH()
   returns (this: ref where this != null && $Is(this, Tclass._module.Qubits()), 
    $_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card) == LitInt(0);
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#2 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#2) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#2 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#2) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, tmp#1))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, _System.array.Length(c#2)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  free ensures true;
  ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures _module.Mode.dof(read($Heap, this, _module.Qubits.m)) == LitInt(1);
  free ensures $IsA#_System.Tuple2($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType);
  ensures _System.Tuple2#Equal($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType, 
    #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.EmptyCH() returns (this: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var this.m: DatatypeType;
  var this.card: int;
  var empty#0: ref
     where $Is(empty#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
       && $IsAlloc(empty#0, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
        $Heap);
  var $lambdaHeap#0: Heap;
  var _v0#0: int;
  var $_Frame#l0: <beta>[ref,Field beta]bool;
  var lambdaResult#0: DatatypeType;
  var $nw: ref;

    // AddMethodImpl: EmptyCH, Impl$$_module.Qubits.EmptyCH
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(72,3)
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(73,15)
    assume true;
    assert 0 <= LitInt(1);
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#0;
        assume $IsGoodHeap($lambdaHeap#0);
        assume $Heap == $lambdaHeap#0 || $HeapSucc($Heap, $lambdaHeap#0);
        havoc _v0#0;
        if (INTERNAL_le_boogie(0, _v0#0))
        {
            $_Frame#l0 := (lambda<alpha> $o: ref, $f: Field alpha :: 
              $o != null && read($lambdaHeap#0, $o, alloc) ==> false);
            assert $Is(LitInt(0), Tclass._System.nat());
            assume lambdaResult#0
               == Lit(#_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt));
        }

        assume false;
    }

    // End Comprehension WF check
    havoc $nw;
    assume $nw != null
       && dtype($nw)
         == Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt));
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw) == LitInt(1);
    assert {:subsumption 0} (forall arrayinit#0#i0#0: int :: 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < LitInt(1)
         ==> Requires1(Tclass._System.nat(), 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt), 
          $Heap, 
          Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                Handle1((lambda $l#0#heap#0: Heap, $l#0#_v0#0: Box :: 
                    $Box(Lit(#_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1)))))), 
                  (lambda $l#0#heap#0: Heap, $l#0#_v0#0: Box :: 
                    $IsBox($l#0#_v0#0, Tclass._System.nat())), 
                  (lambda $l#0#heap#0: Heap, $l#0#_v0#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
              $LS($LZ))), 
          $Box(arrayinit#0#i0#0)));
    assume (forall arrayinit#0#i0#0: int :: 
      { read($Heap, $nw, IndexField(arrayinit#0#i0#0)) } 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < LitInt(1)
         ==> $Unbox(read($Heap, $nw, IndexField(arrayinit#0#i0#0))): DatatypeType
           == $Unbox(Apply1(Tclass._System.nat(), 
              Tclass._System.Tuple2(Tclass._System.nat(), TInt), 
              $Heap, 
              Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                    Handle1((lambda $l#0#heap#0: Heap, $l#0#_v0#0: Box :: 
                        $Box(Lit(#_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1)))))), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v0#0: Box :: 
                        $IsBox($l#0#_v0#0, Tclass._System.nat())), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v0#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0#i0#0))): DatatypeType);
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    empty#0 := $nw;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(74,10)
    assume true;
    assume true;
    assert $Is(LitInt(0), Tclass._System.nat());
    this.card := LitInt(0);
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(75,7)
    assume true;
    assert $Is(LitInt(1), Tclass._System.nat());
    assume true;
    this.m := #_module.Mode.CH(LitInt(1), empty#0);
    // ----- new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(72,3)
    assume !read($Heap, this, alloc);
    assume read($Heap, this, _module.Qubits.m) == this.m;
    assume read($Heap, this, _module.Qubits.card) == this.card;
    $Heap := update($Heap, this, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(72,3)
}



procedure CheckWellformed$$_module.Qubits.Prepare0(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    n#0: int where INTERNAL_le_boogie(0, n#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.Prepare0(this: ref, n#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var i#0: int;

    // AddMethodImpl: Prepare0, CheckWellformed$$_module.Qubits.Prepare0
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_gt_boogie(n#0, 0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
    assume $HeapSucc(old($Heap), $Heap);
    assume read($Heap, this, _module.Qubits.card) == n#0;
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    assume _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))) == n#0;
    havoc i#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#0);
        assume INTERNAL_lt_boogie(i#0, n#0);
        assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#0
           && i#0 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
        assume $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
           == LitInt(0);
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#0) && INTERNAL_lt_boogie(i#0, n#0)
           ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
             == LitInt(0);
    }

    assume (forall i#1: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
      INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
           == LitInt(0));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null
       && !read(old($Heap), _module.Mode.b(read($Heap, this, _module.Qubits.m)), alloc);
}



procedure Call$$_module.Qubits.Prepare0(n#0: int where INTERNAL_le_boogie(0, n#0))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires INTERNAL_gt_boogie(n#0, 0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card) == n#0;
  ensures _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))) == n#0;
  free ensures true;
  ensures (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(0));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#1 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#1) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#1 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#1) == read($Heap, this, _module.Qubits.card))
           else (var c#1 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#1 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#1, tmp#0)
                 && INTERNAL_le_boogie(dof#1, _System.array.Length(c#1))
                 && INTERNAL_le_boogie(dof#1, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free ensures true;
  ensures _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.b(read($Heap, this, _module.Qubits.m)), alloc);
  // constructor allocates the object
  ensures !read(old($Heap), this, alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.Prepare0(n#0: int where INTERNAL_le_boogie(0, n#0))
   returns (this: ref where this != null && $Is(this, Tclass._module.Qubits()), 
    $_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_gt_boogie(n#0, 0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card) == n#0;
  ensures _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))) == n#0;
  free ensures true;
  ensures (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(0));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#2 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#2) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#2 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#2) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, tmp#1))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, _System.array.Length(c#2)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  free ensures true;
  ensures _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.b(read($Heap, this, _module.Qubits.m)), alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.Prepare0(n#0: int) returns (this: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var this.m: DatatypeType;
  var this.card: int;
  var qs#0: ref
     where $Is(qs#0, Tclass._System.array(Tclass._System.nat()))
       && $IsAlloc(qs#0, Tclass._System.array(Tclass._System.nat()), $Heap);
  var $lambdaHeap#0: Heap;
  var _v1#0: int;
  var $_Frame#l0: <beta>[ref,Field beta]bool;
  var lambdaResult#0: int;
  var $nw: ref;

    // AddMethodImpl: Prepare0, Impl$$_module.Qubits.Prepare0
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(86,3)
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(87,10)
    assume true;
    assume true;
    this.card := n#0;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(88,12)
    assume true;
    assert 0 <= n#0;
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#0;
        assume $IsGoodHeap($lambdaHeap#0);
        assume $Heap == $lambdaHeap#0 || $HeapSucc($Heap, $lambdaHeap#0);
        havoc _v1#0;
        if (INTERNAL_le_boogie(0, _v1#0))
        {
            $_Frame#l0 := (lambda<alpha> $o: ref, $f: Field alpha :: 
              $o != null && read($lambdaHeap#0, $o, alloc) ==> false);
            assume lambdaResult#0 == LitInt(0);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#0, TInt);
        }

        assume false;
    }

    // End Comprehension WF check
    havoc $nw;
    assume $nw != null && dtype($nw) == Tclass._System.array?(Tclass._System.nat());
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw) == n#0;
    assert {:subsumption 0} (forall arrayinit#0#i0#0: int :: 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < n#0
         ==> Requires1(Tclass._System.nat(), 
          TInt, 
          $Heap, 
          Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                Handle1((lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: $Box(LitInt(0))), 
                  (lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: 
                    $IsBox($l#0#_v1#0, Tclass._System.nat())), 
                  (lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
              $LS($LZ))), 
          $Box(arrayinit#0#i0#0)));
    assert {:subsumption 0} (forall arrayinit#0#i0#0: int :: 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < n#0
         ==> $Is($Unbox(Apply1(Tclass._System.nat(), 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                    Handle1((lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: $Box(LitInt(0))), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: 
                        $IsBox($l#0#_v1#0, Tclass._System.nat())), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0#i0#0))): int, 
          Tclass._System.nat()));
    assume (forall arrayinit#0#i0#0: int :: 
      { read($Heap, $nw, IndexField(arrayinit#0#i0#0)) } 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < n#0
         ==> $Unbox(read($Heap, $nw, IndexField(arrayinit#0#i0#0))): int
           == $Unbox(Apply1(Tclass._System.nat(), 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                    Handle1((lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: $Box(LitInt(0))), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: 
                        $IsBox($l#0#_v1#0, Tclass._System.nat())), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v1#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0#i0#0))): int);
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    qs#0 := $nw;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(89,7)
    assume true;
    assume true;
    this.m := #_module.Mode.Nor(qs#0);
    // ----- new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(86,3)
    assume !read($Heap, this, alloc);
    assume read($Heap, this, _module.Qubits.m) == this.m;
    assume read($Heap, this, _module.Qubits.card) == this.card;
    $Heap := update($Heap, this, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(86,3)
}



procedure CheckWellformed$$_module.Qubits.Prepare1(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    n#0: int where INTERNAL_le_boogie(0, n#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.Prepare1(this: ref, n#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var i#0: int;

    // AddMethodImpl: Prepare1, CheckWellformed$$_module.Qubits.Prepare1
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_gt_boogie(n#0, 0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
    assume $HeapSucc(old($Heap), $Heap);
    assume read($Heap, this, _module.Qubits.card) == n#0;
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    assume _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))) == n#0;
    havoc i#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#0);
        assume INTERNAL_lt_boogie(i#0, n#0);
        assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#0
           && i#0 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
        assume $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
           == LitInt(1);
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#0) && INTERNAL_lt_boogie(i#0, n#0)
           ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
             == LitInt(1);
    }

    assume (forall i#1: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
      INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
           == LitInt(1));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null
       && !read(old($Heap), _module.Mode.b(read($Heap, this, _module.Qubits.m)), alloc);
}



procedure Call$$_module.Qubits.Prepare1(n#0: int where INTERNAL_le_boogie(0, n#0))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires INTERNAL_gt_boogie(n#0, 0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card) == n#0;
  ensures _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))) == n#0;
  free ensures true;
  ensures (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(1));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#1 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#1) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#1 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#1) == read($Heap, this, _module.Qubits.card))
           else (var c#1 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#1 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#1, tmp#0)
                 && INTERNAL_le_boogie(dof#1, _System.array.Length(c#1))
                 && INTERNAL_le_boogie(dof#1, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free ensures true;
  ensures _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.b(read($Heap, this, _module.Qubits.m)), alloc);
  // constructor allocates the object
  ensures !read(old($Heap), this, alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.Prepare1(n#0: int where INTERNAL_le_boogie(0, n#0))
   returns (this: ref where this != null && $Is(this, Tclass._module.Qubits()), 
    $_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_gt_boogie(n#0, 0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card) == n#0;
  ensures _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))) == n#0;
  free ensures true;
  ensures (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(1));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#2 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#2) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#2 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#2) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, tmp#1))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, _System.array.Length(c#2)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  free ensures true;
  ensures _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.b(read($Heap, this, _module.Qubits.m)), alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.Prepare1(n#0: int) returns (this: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var this.m: DatatypeType;
  var this.card: int;
  var qs#0: ref
     where $Is(qs#0, Tclass._System.array(Tclass._System.nat()))
       && $IsAlloc(qs#0, Tclass._System.array(Tclass._System.nat()), $Heap);
  var $lambdaHeap#0: Heap;
  var _v2#0: int;
  var $_Frame#l0: <beta>[ref,Field beta]bool;
  var lambdaResult#0: int;
  var $nw: ref;

    // AddMethodImpl: Prepare1, Impl$$_module.Qubits.Prepare1
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(99,3)
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(100,10)
    assume true;
    assume true;
    this.card := n#0;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(101,12)
    assume true;
    assert 0 <= n#0;
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#0;
        assume $IsGoodHeap($lambdaHeap#0);
        assume $Heap == $lambdaHeap#0 || $HeapSucc($Heap, $lambdaHeap#0);
        havoc _v2#0;
        if (INTERNAL_le_boogie(0, _v2#0))
        {
            $_Frame#l0 := (lambda<alpha> $o: ref, $f: Field alpha :: 
              $o != null && read($lambdaHeap#0, $o, alloc) ==> false);
            assume lambdaResult#0 == LitInt(1);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#0, TInt);
        }

        assume false;
    }

    // End Comprehension WF check
    havoc $nw;
    assume $nw != null && dtype($nw) == Tclass._System.array?(Tclass._System.nat());
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw) == n#0;
    assert {:subsumption 0} (forall arrayinit#0#i0#0: int :: 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < n#0
         ==> Requires1(Tclass._System.nat(), 
          TInt, 
          $Heap, 
          Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                Handle1((lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: $Box(LitInt(1))), 
                  (lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: 
                    $IsBox($l#0#_v2#0, Tclass._System.nat())), 
                  (lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
              $LS($LZ))), 
          $Box(arrayinit#0#i0#0)));
    assert {:subsumption 0} (forall arrayinit#0#i0#0: int :: 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < n#0
         ==> $Is($Unbox(Apply1(Tclass._System.nat(), 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                    Handle1((lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: $Box(LitInt(1))), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: 
                        $IsBox($l#0#_v2#0, Tclass._System.nat())), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0#i0#0))): int, 
          Tclass._System.nat()));
    assume (forall arrayinit#0#i0#0: int :: 
      { read($Heap, $nw, IndexField(arrayinit#0#i0#0)) } 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < n#0
         ==> $Unbox(read($Heap, $nw, IndexField(arrayinit#0#i0#0))): int
           == $Unbox(Apply1(Tclass._System.nat(), 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                    Handle1((lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: $Box(LitInt(1))), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: 
                        $IsBox($l#0#_v2#0, Tclass._System.nat())), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v2#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0#i0#0))): int);
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    qs#0 := $nw;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(102,7)
    assume true;
    assume true;
    this.m := #_module.Mode.Nor(qs#0);
    // ----- new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(99,3)
    assume !read($Heap, this, alloc);
    assume read($Heap, this, _module.Qubits.m) == this.m;
    assume read($Heap, this, _module.Qubits.card) == this.card;
    $Heap := update($Heap, this, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(99,3)
}



procedure CheckWellformed$$_module.Qubits.SplitPlus(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    n#0: int where INTERNAL_le_boogie(0, n#0))
   returns (q#0: ref
       where $Is(q#0, Tclass._module.Qubits())
         && $IsAlloc(q#0, Tclass._module.Qubits(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.SplitPlus(this: ref, n#0: int) returns (q#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var k#0: int;
  var k#2: int;

    // AddMethodImpl: SplitPlus, CheckWellformed$$_module.Qubits.SplitPlus
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assume _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
    if (INTERNAL_lt_boogie(0, n#0))
    {
    }

    assume INTERNAL_lt_boogie(0, n#0)
       && INTERNAL_le_boogie(n#0, read($Heap, this, _module.Qubits.card));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    havoc q#0;
    assert q#0 != null;
    assume _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
    assert q#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(q#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, q#0);
    assume _module.Qubits.Wf($Heap, q#0);
    assert q#0 != null;
    assume read($Heap, q#0, _module.Qubits.card) == n#0;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assume _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
    assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
    assume read($Heap, this, _module.Qubits.card)
       == INTERNAL_sub_boogie(read(old($Heap), this, _module.Qubits.card), n#0);
    assume q#0 != null && !read(old($Heap), q#0, alloc);
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assume INTERNAL_lt_boogie(k#0, n#0);
        assert q#0 != null;
        assert _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
        assert _module.Mode.h(read($Heap, q#0, _module.Qubits.m)) != null;
        assert 0 <= k#0
           && k#0 < _System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m)));
        assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.Had_q(read(old($Heap), this, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert _module.Mode.h(read(old($Heap), this, _module.Qubits.m)) != null;
        assert $IsAlloc(_module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
          Tclass._System.array?(TInt), 
          old($Heap));
        assert 0 <= k#0
           && k#0
             < _System.array.Length(_module.Mode.h(read(old($Heap), this, _module.Qubits.m)));
        assume $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#0))): int
           == $Unbox(read(old($Heap), 
              _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(k#0))): int;
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, n#0)
           ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#0))): int
             == $Unbox(read(old($Heap), 
                _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
                IndexField(k#0))): int;
    }

    assume (forall k#1: int :: 
      { $Unbox(read(old($Heap), 
            _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(k#1))): int } 
        { $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#1))): int } 
      INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, n#0)
         ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#1))): int
           == $Unbox(read(old($Heap), 
              _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(k#1))): int);
    havoc k#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#2);
        assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
        assume INTERNAL_lt_boogie(k#2, _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m))));
        assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= k#2
           && k#2 < _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
        assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.Had_q(read(old($Heap), this, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert _module.Mode.h(read(old($Heap), this, _module.Qubits.m)) != null;
        assert $IsAlloc(_module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
          Tclass._System.array?(TInt), 
          old($Heap));
        assert 0 <= INTERNAL_add_boogie(k#2, n#0)
           && INTERNAL_add_boogie(k#2, n#0)
             < _System.array.Length(_module.Mode.h(read(old($Heap), this, _module.Qubits.m)));
        assume $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#2))): int
           == $Unbox(read(old($Heap), 
              _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(INTERNAL_add_boogie(k#2, n#0)))): int;
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#2)
             && INTERNAL_lt_boogie(k#2, _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m))))
           ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#2))): int
             == $Unbox(read(old($Heap), 
                _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
                IndexField(INTERNAL_add_boogie(k#2, n#0)))): int;
    }

    assume (forall k#3: int :: 
      { INTERNAL_add_boogie(k#3, n#0) } 
        { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#3))): int } 
      INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m))))
         ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#3))): int
           == $Unbox(read(old($Heap), 
              _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(INTERNAL_add_boogie(k#3, n#0)))): int);
}



procedure Call$$_module.Qubits.SplitPlus(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    n#0: int where INTERNAL_le_boogie(0, n#0))
   returns (q#0: ref
       where $Is(q#0, Tclass._module.Qubits())
         && $IsAlloc(q#0, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  requires _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
  requires INTERNAL_lt_boogie(0, n#0);
  requires INTERNAL_le_boogie(n#0, read($Heap, this, _module.Qubits.card));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, q#0);
  ensures _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, q#0)
     && 
    _module.Qubits.Wf($Heap, q#0)
     && (var tmp#1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
         then (var b#3 := _module.Mode.b(read($Heap, q#0, _module.Qubits.m)); 
          _System.array.Length(b#3) == read($Heap, q#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           then (var h#3 := _module.Mode.h(read($Heap, q#0, _module.Qubits.m)); 
            _System.array.Length(h#3) == read($Heap, q#0, _module.Qubits.card))
           else (var c#3 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
            (var dof#3 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#3, tmp#1)
                 && INTERNAL_le_boogie(dof#3, _System.array.Length(c#3))
                 && INTERNAL_le_boogie(dof#3, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card))))))));
  ensures read($Heap, q#0, _module.Qubits.card) == n#0;
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, this, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  ensures _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card)
     == INTERNAL_sub_boogie(read(old($Heap), this, _module.Qubits.card), n#0);
  ensures q#0 != null && !read(old($Heap), q#0, alloc);
  free ensures true;
  ensures (forall k#1: int :: 
    { $Unbox(read(old($Heap), 
          _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
          IndexField(k#1))): int } 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#1))): int } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#1))): int
         == $Unbox(read(old($Heap), 
            _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(k#1))): int);
  free ensures true;
  ensures (forall k#3: int :: 
    { INTERNAL_add_boogie(k#3, n#0) } 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#3))): int } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m))))
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#3))): int
         == $Unbox(read(old($Heap), 
            _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(INTERNAL_add_boogie(k#3, n#0)))): int);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.SplitPlus(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    n#0: int where INTERNAL_le_boogie(0, n#0))
   returns (defass#q#0: bool, 
    q#0: ref
       where defass#q#0
         ==> $Is(q#0, Tclass._module.Qubits())
           && $IsAlloc(q#0, Tclass._module.Qubits(), $Heap), 
    $_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  // user-defined preconditions
  free requires _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#3 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#7 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#7) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#7 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#7) == read($Heap, this, _module.Qubits.card))
           else (var c#7 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#7 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#7, tmp#3)
                 && INTERNAL_le_boogie(dof#7, _System.array.Length(c#7))
                 && INTERNAL_le_boogie(dof#7, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  requires _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
  requires INTERNAL_lt_boogie(0, n#0);
  requires INTERNAL_le_boogie(n#0, read($Heap, this, _module.Qubits.card));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, q#0);
  ensures _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
  ensures _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var b#8 := _module.Mode.b(read($Heap, q#0, _module.Qubits.m)); 
            _System.array.Length(b#8) == read($Heap, q#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var h#8 := _module.Mode.h(read($Heap, q#0, _module.Qubits.m)); 
            _System.array.Length(h#8) == read($Heap, q#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var c#8 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
            (var dof#8 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#8, tmp#4))));
  ensures _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var c#8 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
            (var dof#8 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#8, _System.array.Length(c#8)))));
  ensures _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var c#8 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
            (var dof#8 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#8, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card))))));
  ensures read($Heap, q#0, _module.Qubits.card) == n#0;
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#10 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#10) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#10 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#10) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, tmp#5))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, _System.array.Length(c#10)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  ensures _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card)
     == INTERNAL_sub_boogie(read(old($Heap), this, _module.Qubits.card), n#0);
  ensures q#0 != null && !read(old($Heap), q#0, alloc);
  free ensures true;
  ensures (forall k#1: int :: 
    { $Unbox(read(old($Heap), 
          _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
          IndexField(k#1))): int } 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#1))): int } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#1))): int
         == $Unbox(read(old($Heap), 
            _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(k#1))): int);
  free ensures true;
  ensures (forall k#3: int :: 
    { INTERNAL_add_boogie(k#3, n#0) } 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#3))): int } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m))))
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#3))): int
         == $Unbox(read(old($Heap), 
            _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(INTERNAL_add_boogie(k#3, n#0)))): int);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.SplitPlus(this: ref, n#0: int) returns (defass#q#0: bool, q#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var tmpq#0: ref
     where $Is(tmpq#0, Tclass._System.array(TInt))
       && $IsAlloc(tmpq#0, Tclass._System.array(TInt), $Heap);
  var $nw: ref;
  var n##0: int;
  var i#0: int;
  var i#0#lo: int;
  var i#0#hi: int;
  var $PreLoopHeap$loop#0: Heap;
  var preLoop$loop#0$defass#q#0: bool;
  var $w$loop#0: bool;
  var k#4: int;
  var $rhs#0_0: int;
  var $rhs#0: DatatypeType;
  var $rhs#1: int;
  var tmp#7: ref
     where $Is(tmp#7, Tclass._System.array(TInt))
       && $IsAlloc(tmp#7, Tclass._System.array(TInt), $Heap);
  var k#6: int;
  var i#1: int;
  var i#1#lo: int;
  var i#1#hi: int;
  var $PreLoopHeap$loop#1: Heap;
  var preLoop$loop#1$defass#q#0: bool;
  var $w$loop#1: bool;
  var k#8: int;
  var k#10: int;
  var $rhs#1_0: int;
  var $rhs#2: DatatypeType;
  var $rhs#3: int;

    // AddMethodImpl: SplitPlus, Impl$$_module.Qubits.SplitPlus
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(119,14)
    assume true;
    assert 0 <= n#0;
    havoc $nw;
    assume $nw != null && dtype($nw) == Tclass._System.array?(TInt);
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    tmpq#0 := $nw;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(120,7)
    assume true;
    // ----- init call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(120,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    n##0 := n#0;
    // ProcessCallStmt: Make the call
    call $nw := Call$$_module.Qubits.Prepare0(n##0);
    // TrCallStmt: After ProcessCallStmt
    q#0 := $nw;
    defass#q#0 := true;
    // ----- for-loop statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(121,5)
    i#0#lo := LitInt(0);
    i#0#hi := n#0;
    assert i#0#lo <= i#0#hi;
    i#0 := i#0#lo;
    $PreLoopHeap$loop#0 := $Heap;
    preLoop$loop#0$defass#q#0 := defass#q#0;
    havoc $w$loop#0;
    while (true)
      free invariant i#0#lo <= i#0 && i#0 <= i#0#hi;
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> read($Heap, this, _module.Qubits.card)
           == read(old($Heap), this, _module.Qubits.card);
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> read($Heap, q#0, _module.Qubits.card) == n#0;
      invariant $w$loop#0 ==> INTERNAL_le_boogie(n#0, read($Heap, this, _module.Qubits.card));
      invariant $w$loop#0
         ==> read($Heap, this, _module.Qubits.card)
           == _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> _module.Mode.h(read($Heap, this, _module.Qubits.m))
           == _module.Mode.h(read(old($Heap), this, _module.Qubits.m));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> (forall k#5: int :: 
          { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#5))): int } 
            { $Unbox(read($Heap, tmpq#0, IndexField(k#5))): int } 
          INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, i#0)
             ==> $Unbox(read($Heap, tmpq#0, IndexField(k#5))): int
               == $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#5))): int);
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && read(old($Heap), $o, alloc)
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o] || $o == this);
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
        { read($Heap, $o, $f) } 
        $o != null && read($PreLoopHeap$loop#0, $o, alloc)
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant preLoop$loop#0$defass#q#0 ==> defass#q#0;
      free invariant true;
    {
        if (!$w$loop#0)
        {
            assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
            assume true;
            assume read($Heap, this, _module.Qubits.card)
               == read(old($Heap), this, _module.Qubits.card);
            assume true;
            assume _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
            assert defass#q#0;
            assert {:subsumption 0} q#0 != null;
            if (read($Heap, q#0, _module.Qubits.card) == n#0)
            {
            }

            if (read($Heap, q#0, _module.Qubits.card) == n#0
               && INTERNAL_le_boogie(n#0, read($Heap, this, _module.Qubits.card)))
            {
                assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
                assert {:subsumption 0} _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
            }

            assume true;
            assume read($Heap, q#0, _module.Qubits.card) == n#0
               && INTERNAL_le_boogie(n#0, read($Heap, this, _module.Qubits.card))
               && read($Heap, this, _module.Qubits.card)
                 == _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
            assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
            assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
            assert _module.Mode.Had_q(read(old($Heap), this, _module.Qubits.m));
            assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
            assume true;
            assume _module.Mode.h(read($Heap, this, _module.Qubits.m))
               == _module.Mode.h(read(old($Heap), this, _module.Qubits.m));
            // Begin Comprehension WF check
            havoc k#4;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#4))
                {
                }

                if (INTERNAL_le_boogie(0, k#4) && INTERNAL_lt_boogie(k#4, i#0))
                {
                    assert tmpq#0 != null;
                    assert {:subsumption 0} 0 <= k#4 && k#4 < _System.array.Length(tmpq#0);
                    assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
                    assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
                    assert {:subsumption 0} 0 <= k#4
                       && k#4 < _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
                }
            }

            // End Comprehension WF check
            assume true;
            assume (forall k#5: int :: 
              { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#5))): int } 
                { $Unbox(read($Heap, tmpq#0, IndexField(k#5))): int } 
              INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, i#0)
                 ==> $Unbox(read($Heap, tmpq#0, IndexField(k#5))): int
                   == $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#5))): int);
            assume false;
        }

        assume true;
        if (i#0 == i#0#hi)
        {
            break;
        }

        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(128,15)
        assert tmpq#0 != null;
        assert 0 <= i#0 && i#0 < _System.array.Length(tmpq#0);
        assume true;
        assert $_Frame[tmpq#0, IndexField(i#0)];
        assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#0
           && i#0 < _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
        assume true;
        $rhs#0_0 := $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int;
        $Heap := update($Heap, tmpq#0, IndexField(i#0), $Box($rhs#0_0));
        assume $IsGoodHeap($Heap);
        i#0 := i#0 + 1;
        assume true;
    }

    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(130,9)
    assert defass#q#0;
    assert q#0 != null;
    assume true;
    assert $_Frame[q#0, _module.Qubits.m];
    assume true;
    $rhs#0 := #_module.Mode.Had(tmpq#0);
    $Heap := update($Heap, q#0, _module.Qubits.m, $rhs#0);
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(131,12)
    assert defass#q#0;
    assert q#0 != null;
    assume true;
    assert $_Frame[q#0, _module.Qubits.card];
    assume true;
    $rhs#1 := n#0;
    $Heap := update($Heap, q#0, _module.Qubits.card, $rhs#1);
    assume $IsGoodHeap($Heap);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(132,5)
    assert defass#q#0;
    assert {:subsumption 0} q#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(q#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, q#0);
    assume _module.Qubits.Wf#canCall($Heap, q#0);
    assert {:subsumption 0} _module.Qubits.Wf#canCall($Heap, q#0)
       ==> _module.Qubits.Wf($Heap, q#0)
         || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
          _module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
             ==> (var b#12 := _module.Mode.b(read($Heap, q#0, _module.Qubits.m)); 
              _System.array.Length(b#12) == read($Heap, q#0, _module.Qubits.card)));
    assert {:subsumption 0} _module.Qubits.Wf#canCall($Heap, q#0)
       ==> _module.Qubits.Wf($Heap, q#0)
         || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
          !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
             ==> 
            _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
             ==> (var h#12 := _module.Mode.h(read($Heap, q#0, _module.Qubits.m)); 
              _System.array.Length(h#12) == read($Heap, q#0, _module.Qubits.card)));
    assert {:subsumption 0} _module.Qubits.Wf#canCall($Heap, q#0)
       ==> _module.Qubits.Wf($Heap, q#0)
         || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
          !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
             ==> 
            !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
             ==> (var c#12 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
              (var dof#12 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
                INTERNAL_le_boogie(dof#12, tmp#6))));
    assert {:subsumption 0} _module.Qubits.Wf#canCall($Heap, q#0)
       ==> _module.Qubits.Wf($Heap, q#0)
         || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
          !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
             ==> 
            !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
             ==> (var c#12 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
              (var dof#12 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
                INTERNAL_le_boogie(dof#12, _System.array.Length(c#12)))));
    assert {:subsumption 0} _module.Qubits.Wf#canCall($Heap, q#0)
       ==> _module.Qubits.Wf($Heap, q#0)
         || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
          !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
             ==> 
            !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
             ==> (var c#12 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
              (var dof#12 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
                INTERNAL_le_boogie(dof#12, 
                  Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card))))));
    assume _module.Qubits.Wf($Heap, q#0);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(133,5)
    assert defass#q#0;
    assert {:subsumption 0} q#0 != null;
    assert _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
    assert {:subsumption 0} _module.Mode.h(read($Heap, q#0, _module.Qubits.m)) != null;
    if (n#0 == _System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m))))
    {
        assert defass#q#0;
        assert {:subsumption 0} q#0 != null;
        assert _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
        assert {:subsumption 0} _module.Mode.h(read($Heap, q#0, _module.Qubits.m)) != null;
    }

    if (n#0 == _System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m)))
       && INTERNAL_le_boogie(_System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m))), 
        read($Heap, this, _module.Qubits.card)))
    {
        assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
        assert {:subsumption 0} _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
    }

    assume true;
    assert {:subsumption 0} n#0 == _System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m)));
    assert {:subsumption 0} INTERNAL_le_boogie(_System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m))), 
      read($Heap, this, _module.Qubits.card));
    assert {:subsumption 0} read($Heap, this, _module.Qubits.card)
       == _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
    assume n#0 == _System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m)))
       && INTERNAL_le_boogie(_System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m))), 
        read($Heap, this, _module.Qubits.card))
       && read($Heap, this, _module.Qubits.card)
         == _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(134,13)
    assume true;
    assert 0 <= INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), n#0);
    havoc $nw;
    assume $nw != null && dtype($nw) == Tclass._System.array?(TInt);
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw)
       == INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), n#0);
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    tmp#7 := $nw;
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(135,5)
    // Begin Comprehension WF check
    havoc k#6;
    if (true)
    {
        if (INTERNAL_le_boogie(0, k#6))
        {
        }

        if (INTERNAL_le_boogie(0, k#6) && INTERNAL_lt_boogie(k#6, n#0))
        {
            assert defass#q#0;
            assert {:subsumption 0} q#0 != null;
            assert _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
            assert _module.Mode.h(read($Heap, q#0, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= k#6
               && k#6 < _System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m)));
            assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
            assert _module.Mode.Had_q(read(old($Heap), this, _module.Qubits.m));
            assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
            assert _module.Mode.h(read(old($Heap), this, _module.Qubits.m)) != null;
            assert $IsAlloc(_module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
              Tclass._System.array?(TInt), 
              old($Heap));
            assert {:subsumption 0} 0 <= k#6
               && k#6
                 < _System.array.Length(_module.Mode.h(read(old($Heap), this, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume true;
    assert (forall k#7: int :: 
      { $Unbox(read(old($Heap), 
            _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(k#7))): int } 
        { $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#7))): int } 
      INTERNAL_le_boogie(0, k#7) && INTERNAL_lt_boogie(k#7, n#0)
         ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(k#7))): int
           == $Unbox(read(old($Heap), 
              _module.Mode.h(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(k#7))): int);
    // ----- for-loop statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(136,5)
    i#1#lo := LitInt(0);
    i#1#hi := INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), n#0);
    assert i#1#lo <= i#1#hi;
    i#1 := i#1#lo;
    $PreLoopHeap$loop#1 := $Heap;
    preLoop$loop#1$defass#q#0 := defass#q#0;
    havoc $w$loop#1;
    while (true)
      free invariant i#1#lo <= i#1 && i#1 <= i#1#hi;
      free invariant $w$loop#1 ==> _module.Qubits.Wf#canCall($Heap, q#0);
      invariant $w$loop#1
         ==> 
        _module.Qubits.Wf#canCall($Heap, q#0)
         ==> _module.Qubits.Wf($Heap, q#0)
           || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
            _module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
               ==> (var b#14 := _module.Mode.b(read($Heap, q#0, _module.Qubits.m)); 
                _System.array.Length(b#14) == read($Heap, q#0, _module.Qubits.card)));
      invariant $w$loop#1
         ==> 
        _module.Qubits.Wf#canCall($Heap, q#0)
         ==> _module.Qubits.Wf($Heap, q#0)
           || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
               ==> 
              _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
               ==> (var h#14 := _module.Mode.h(read($Heap, q#0, _module.Qubits.m)); 
                _System.array.Length(h#14) == read($Heap, q#0, _module.Qubits.card)));
      invariant $w$loop#1
         ==> 
        _module.Qubits.Wf#canCall($Heap, q#0)
         ==> _module.Qubits.Wf($Heap, q#0)
           || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
               ==> (var c#14 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
                (var dof#14 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#14, tmp#8))));
      invariant $w$loop#1
         ==> 
        _module.Qubits.Wf#canCall($Heap, q#0)
         ==> _module.Qubits.Wf($Heap, q#0)
           || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
               ==> (var c#14 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
                (var dof#14 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#14, _System.array.Length(c#14)))));
      invariant $w$loop#1
         ==> 
        _module.Qubits.Wf#canCall($Heap, q#0)
         ==> _module.Qubits.Wf($Heap, q#0)
           || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
               ==> (var c#14 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
                (var dof#14 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#14, 
                    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card))))));
      free invariant $w$loop#1
         ==> _module.Qubits.Wf#canCall($Heap, q#0)
           && 
          _module.Qubits.Wf($Heap, q#0)
           && (var tmp#8 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
            (if _module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
               then (var b#15 := _module.Mode.b(read($Heap, q#0, _module.Qubits.m)); 
                _System.array.Length(b#15) == read($Heap, q#0, _module.Qubits.card))
               else (if _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
                 then (var h#15 := _module.Mode.h(read($Heap, q#0, _module.Qubits.m)); 
                  _System.array.Length(h#15) == read($Heap, q#0, _module.Qubits.card))
                 else (var c#15 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
                  (var dof#15 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
                    INTERNAL_le_boogie(dof#15, tmp#8)
                       && INTERNAL_le_boogie(dof#15, _System.array.Length(c#15))
                       && INTERNAL_le_boogie(dof#15, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card))))))));
      invariant $w$loop#1 ==> _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
      invariant $w$loop#1 ==> read($Heap, q#0, _module.Qubits.card) == n#0;
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1
         ==> read($Heap, this, _module.Qubits.card)
           == read(old($Heap), this, _module.Qubits.card);
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1 ==> _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1
         ==> read($Heap, this, _module.Qubits.card)
           == _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1
         ==> _System.array.Length(tmp#7)
           == INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), n#0);
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1
         ==> INTERNAL_le_boogie(INTERNAL_add_boogie(i#1, n#0), read($Heap, this, _module.Qubits.card));
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1
         ==> _module.Mode.h(read($Heap, this, _module.Qubits.m))
           == _module.Mode.h(read(old($Heap), this, _module.Qubits.m));
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1
         ==> (forall k#9: int :: 
          { $Unbox(read($Heap, 
                _module.Mode.h(read($Heap, this, _module.Qubits.m)), 
                IndexField(INTERNAL_add_boogie(k#9, n#0)))): int } 
            { $Unbox(read($Heap, tmp#7, IndexField(k#9))): int } 
          INTERNAL_le_boogie(0, k#9) && INTERNAL_lt_boogie(k#9, i#1)
             ==> $Unbox(read($Heap, tmp#7, IndexField(k#9))): int
               == $Unbox(read($Heap, 
                  _module.Mode.h(read($Heap, this, _module.Qubits.m)), 
                  IndexField(INTERNAL_add_boogie(k#9, n#0)))): int);
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1
         ==> (forall k#11: int :: 
          { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#11))): int } 
            { $Unbox(read($Heap, tmpq#0, IndexField(k#11))): int } 
          INTERNAL_le_boogie(0, k#11) && INTERNAL_lt_boogie(k#11, n#0)
             ==> $Unbox(read($Heap, tmpq#0, IndexField(k#11))): int
               == $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#11))): int);
      free invariant $w$loop#1 ==> true;
      invariant $w$loop#1 ==> tmpq#0 == _module.Mode.h(read($Heap, q#0, _module.Qubits.m));
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && read(old($Heap), $o, alloc)
           ==> $Heap[$o] == $PreLoopHeap$loop#1[$o] || $o == this);
      free invariant $HeapSucc($PreLoopHeap$loop#1, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
        { read($Heap, $o, $f) } 
        $o != null && read($PreLoopHeap$loop#1, $o, alloc)
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#1, $o, $f) || $_Frame[$o, $f]);
      free invariant preLoop$loop#1$defass#q#0 ==> defass#q#0;
      free invariant true;
    {
        if (!$w$loop#1)
        {
            assert defass#q#0;
            assert {:subsumption 0} q#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAlloc(q#0, Tclass._module.Qubits?(), $Heap);
            assume _module.Qubits.Wf#canCall($Heap, q#0);
            if (_module.Qubits.Wf($Heap, q#0))
            {
                assert defass#q#0;
                assert {:subsumption 0} q#0 != null;
            }

            if (_module.Qubits.Wf($Heap, q#0)
               && _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m)))
            {
                assert defass#q#0;
                assert {:subsumption 0} q#0 != null;
            }

            assume _module.Qubits.Wf#canCall($Heap, q#0);
            assume _module.Qubits.Wf($Heap, q#0)
               && _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
               && read($Heap, q#0, _module.Qubits.card) == n#0;
            assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
            assume true;
            assume read($Heap, this, _module.Qubits.card)
               == read(old($Heap), this, _module.Qubits.card);
            assume true;
            assume _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
            assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
            assert {:subsumption 0} _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
            assume true;
            assume read($Heap, this, _module.Qubits.card)
               == _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
            assert {:subsumption 0} tmp#7 != null;
            assume true;
            assume _System.array.Length(tmp#7)
               == INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), n#0);
            assume true;
            assume INTERNAL_le_boogie(INTERNAL_add_boogie(i#1, n#0), read($Heap, this, _module.Qubits.card));
            assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
            assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
            assert _module.Mode.Had_q(read(old($Heap), this, _module.Qubits.m));
            assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
            assume true;
            assume _module.Mode.h(read($Heap, this, _module.Qubits.m))
               == _module.Mode.h(read(old($Heap), this, _module.Qubits.m));
            // Begin Comprehension WF check
            havoc k#8;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#8))
                {
                }

                if (INTERNAL_le_boogie(0, k#8) && INTERNAL_lt_boogie(k#8, i#1))
                {
                    assert tmp#7 != null;
                    assert {:subsumption 0} 0 <= k#8 && k#8 < _System.array.Length(tmp#7);
                    assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
                    assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
                    assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#8, n#0)
                       && INTERNAL_add_boogie(k#8, n#0)
                         < _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
                }
            }

            // End Comprehension WF check
            assume true;
            assume (forall k#9: int :: 
              { $Unbox(read($Heap, 
                    _module.Mode.h(read($Heap, this, _module.Qubits.m)), 
                    IndexField(INTERNAL_add_boogie(k#9, n#0)))): int } 
                { $Unbox(read($Heap, tmp#7, IndexField(k#9))): int } 
              INTERNAL_le_boogie(0, k#9) && INTERNAL_lt_boogie(k#9, i#1)
                 ==> $Unbox(read($Heap, tmp#7, IndexField(k#9))): int
                   == $Unbox(read($Heap, 
                      _module.Mode.h(read($Heap, this, _module.Qubits.m)), 
                      IndexField(INTERNAL_add_boogie(k#9, n#0)))): int);
            // Begin Comprehension WF check
            havoc k#10;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#10))
                {
                }

                if (INTERNAL_le_boogie(0, k#10) && INTERNAL_lt_boogie(k#10, n#0))
                {
                    assert tmpq#0 != null;
                    assert {:subsumption 0} 0 <= k#10 && k#10 < _System.array.Length(tmpq#0);
                    assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
                    assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
                    assert {:subsumption 0} 0 <= k#10
                       && k#10 < _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
                }
            }

            // End Comprehension WF check
            assume true;
            assume (forall k#11: int :: 
              { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#11))): int } 
                { $Unbox(read($Heap, tmpq#0, IndexField(k#11))): int } 
              INTERNAL_le_boogie(0, k#11) && INTERNAL_lt_boogie(k#11, n#0)
                 ==> $Unbox(read($Heap, tmpq#0, IndexField(k#11))): int
                   == $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(k#11))): int);
            assert defass#q#0;
            assert {:subsumption 0} q#0 != null;
            assert _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
            assume true;
            assume tmpq#0 == _module.Mode.h(read($Heap, q#0, _module.Qubits.m));
            assume false;
        }

        assume true;
        if (i#1 == i#1#hi)
        {
            break;
        }

        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(148,14)
        assert tmp#7 != null;
        assert 0 <= i#1 && i#1 < _System.array.Length(tmp#7);
        assume true;
        assert $_Frame[tmp#7, IndexField(i#1)];
        assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= INTERNAL_add_boogie(i#1, n#0)
           && INTERNAL_add_boogie(i#1, n#0)
             < _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
        assume true;
        $rhs#1_0 := $Unbox(read($Heap, 
            _module.Mode.h(read($Heap, this, _module.Qubits.m)), 
            IndexField(INTERNAL_add_boogie(i#1, n#0)))): int;
        $Heap := update($Heap, tmp#7, IndexField(i#1), $Box($rhs#1_0));
        assume $IsGoodHeap($Heap);
        i#1 := i#1 + 1;
        assume _module.Qubits.Wf#canCall($Heap, q#0);
    }

    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(150,7)
    assume true;
    assert $_Frame[this, _module.Qubits.m];
    assume true;
    $rhs#2 := #_module.Mode.Had(tmp#7);
    $Heap := update($Heap, this, _module.Qubits.m, $rhs#2);
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(151,10)
    assume true;
    assert $_Frame[this, _module.Qubits.card];
    assert tmp#7 != null;
    assume true;
    assert $Is(_System.array.Length(tmp#7), Tclass._System.nat());
    $rhs#3 := _System.array.Length(tmp#7);
    $Heap := update($Heap, this, _module.Qubits.card, $rhs#3);
    assume $IsGoodHeap($Heap);
    assert defass#q#0;
}



// function declaration for _module.Qubits.WfNor
function _module.Qubits.WfNor($heap: Heap, this: ref) : bool;

function _module.Qubits.WfNor#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Qubits.WfNor
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Qubits.WfNor($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Qubits())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && ($o == this || $o == _module.Mode.b(read($h0, this, _module.Qubits.m)))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Qubits.WfNor($h0, this) == _module.Qubits.WfNor($h1, this));

// consequence axiom for _module.Qubits.WfNor
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Qubits.WfNor($Heap, this) } 
    _module.Qubits.WfNor#canCall($Heap, this)
         || (0 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Qubits())
           && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
           && _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m)))
       ==> true);

function _module.Qubits.WfNor#requires(Heap, ref) : bool;

// #requires axiom for _module.Qubits.WfNor
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Qubits.WfNor#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Qubits())
       && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
     ==> _module.Qubits.WfNor#requires($Heap, this)
       == _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m)));

// definition axiom for _module.Qubits.WfNor (revealed)
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Qubits.WfNor($Heap, this), $IsGoodHeap($Heap) } 
    _module.Qubits.WfNor#canCall($Heap, this)
         || (0 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Qubits())
           && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
           && _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m)))
       ==> _module.Qubits.WfNor($Heap, this)
         == (_System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
             == read($Heap, this, _module.Qubits.card)
           && (forall i#0: int :: 
            { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int } 
            INTERNAL_le_boogie(0, i#0)
                 && INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card))
               ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
                   == LitInt(0)
                 || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
                   == LitInt(1))));

procedure CheckWellformed$$_module.Qubits.WfNor(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.WfNor(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var i#1: int;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;

    // AddWellformednessCheck for function WfNor
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == this || $o == _module.Mode.b(read($Heap, this, _module.Qubits.m)));
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    b$reqreads#0 := $_Frame[this, _module.Qubits.m];
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert b$reqreads#0;
    b$reqreads#1 := $_Frame[this, _module.Qubits.m];
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert b$reqreads#1;
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc)
             ==> $o == this || $o == _module.Mode.b(read($Heap, this, _module.Qubits.m)));
        b$reqreads#2 := $_Frame[this, _module.Qubits.m];
        assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
        b$reqreads#3 := $_Frame[this, _module.Qubits.card];
        if (_System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
           == read($Heap, this, _module.Qubits.card))
        {
            // Begin Comprehension WF check
            havoc i#1;
            if (true)
            {
                if (INTERNAL_le_boogie(0, i#1))
                {
                    b$reqreads#4 := $_Frame[this, _module.Qubits.card];
                }

                if (INTERNAL_le_boogie(0, i#1)
                   && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card)))
                {
                    b$reqreads#5 := $_Frame[this, _module.Qubits.m];
                    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
                    assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
                    assert 0 <= i#1
                       && i#1 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
                    b$reqreads#6 := $_Frame[_module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1)];
                    if ($Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
                       != LitInt(0))
                    {
                        b$reqreads#7 := $_Frame[this, _module.Qubits.m];
                        assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
                        assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
                        assert 0 <= i#1
                           && i#1 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
                        b$reqreads#8 := $_Frame[_module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1)];
                    }
                }
            }

            // End Comprehension WF check
        }

        assume _module.Qubits.WfNor($Heap, this)
           == (_System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
               == read($Heap, this, _module.Qubits.card)
             && (forall i#2: int :: 
              { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int } 
              INTERNAL_le_boogie(0, i#2)
                   && INTERNAL_lt_boogie(i#2, read($Heap, this, _module.Qubits.card))
                 ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int
                     == LitInt(0)
                   || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int
                     == LitInt(1)));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Qubits.WfNor($Heap, this), TBool);
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
    }
}



// function declaration for _module.Qubits.Wf
function _module.Qubits.Wf($heap: Heap, this: ref) : bool;

function _module.Qubits.Wf#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Qubits.Wf
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Qubits.Wf($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Qubits())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Qubits.Wf($h0, this) == _module.Qubits.Wf($h1, this));

// consequence axiom for _module.Qubits.Wf
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Qubits.Wf($Heap, this) } 
    _module.Qubits.Wf#canCall($Heap, this)
         || (0 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Qubits())
           && $IsAlloc(this, Tclass._module.Qubits(), $Heap))
       ==> true);

function _module.Qubits.Wf#requires(Heap, ref) : bool;

// #requires axiom for _module.Qubits.Wf
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Qubits.Wf#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Qubits())
       && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
     ==> _module.Qubits.Wf#requires($Heap, this) == true);

// definition axiom for _module.Qubits.Wf (revealed)
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Qubits.Wf($Heap, this), $IsGoodHeap($Heap) } 
    _module.Qubits.Wf#canCall($Heap, this)
         || (0 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Qubits())
           && $IsAlloc(this, Tclass._module.Qubits(), $Heap))
       ==> Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card))
         && (var tmp#0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
          !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
             ==> 
            !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
             ==> (var c#1 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
              (var dof#1 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
                INTERNAL_le_boogie(dof#1, tmp#0)
                   ==> 
                  INTERNAL_le_boogie(dof#1, _System.array.Length(c#1))
                   ==> Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card)))))
         && _module.Qubits.Wf($Heap, this)
           == (var tmp#0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
            (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
               then (var b#0 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
                _System.array.Length(b#0) == read($Heap, this, _module.Qubits.card))
               else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
                 then (var h#0 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
                  _System.array.Length(h#0) == read($Heap, this, _module.Qubits.card))
                 else (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
                  (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
                    INTERNAL_le_boogie(dof#0, tmp#0)
                       && INTERNAL_le_boogie(dof#0, _System.array.Length(c#0))
                       && INTERNAL_le_boogie(dof#0, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)))))))));

procedure CheckWellformed$$_module.Qubits.Wf(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.Wf(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var tmp#Z#0: int;
  var let#0#0#0: int;
  var ##e#0: int;
  var _mcc#2#0: int;
  var _mcc#3#0: ref;
  var c#Z#0: ref;
  var let#1#0#0: ref;
  var dof#Z#0: int;
  var let#2#0#0: int;
  var ##e#1: int;
  var _mcc#1#0: ref;
  var h#Z#0: ref;
  var let#3#0#0: ref;
  var _mcc#0#0: ref;
  var b#Z#0: ref;
  var let#4#0#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;

    // AddWellformednessCheck for function Wf
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc) ==> $o == this);
        havoc tmp#Z#0;
        assume INTERNAL_le_boogie(0, tmp#Z#0);
        b$reqreads#0 := $_Frame[this, _module.Qubits.card];
        ##e#0 := read($Heap, this, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
        assume let#0#0#0
           == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
        assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass._System.nat());
        assume tmp#Z#0 == let#0#0#0;
        b$reqreads#1 := $_Frame[this, _module.Qubits.m];
        if (read($Heap, this, _module.Qubits.m) == #_module.Mode.Nor(_mcc#0#0))
        {
            assume $Is(_mcc#0#0, Tclass._System.array(Tclass._System.nat()));
            havoc b#Z#0;
            assume $Is(b#Z#0, Tclass._System.array(Tclass._System.nat()))
               && $IsAlloc(b#Z#0, Tclass._System.array(Tclass._System.nat()), $Heap);
            assume let#4#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#4#0#0, Tclass._System.array(Tclass._System.nat()));
            assume b#Z#0 == let#4#0#0;
            assert b#Z#0 != null;
            b$reqreads#4 := $_Frame[this, _module.Qubits.card];
            assume _module.Qubits.Wf($Heap, this)
               == 
              (_System.array.Length(b#Z#0)
               == read($Heap, this, _module.Qubits.card));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.Qubits.Wf($Heap, this), TBool);
        }
        else if (read($Heap, this, _module.Qubits.m) == #_module.Mode.Had(_mcc#1#0))
        {
            assume $Is(_mcc#1#0, Tclass._System.array(TInt));
            havoc h#Z#0;
            assume $Is(h#Z#0, Tclass._System.array(TInt))
               && $IsAlloc(h#Z#0, Tclass._System.array(TInt), $Heap);
            assume let#3#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#3#0#0, Tclass._System.array(TInt));
            assume h#Z#0 == let#3#0#0;
            assert h#Z#0 != null;
            b$reqreads#3 := $_Frame[this, _module.Qubits.card];
            assume _module.Qubits.Wf($Heap, this)
               == 
              (_System.array.Length(h#Z#0)
               == read($Heap, this, _module.Qubits.card));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.Qubits.Wf($Heap, this), TBool);
        }
        else if (read($Heap, this, _module.Qubits.m) == #_module.Mode.CH(_mcc#2#0, _mcc#3#0))
        {
            assume INTERNAL_le_boogie(0, _mcc#2#0);
            assume $Is(_mcc#3#0, 
              Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)));
            havoc c#Z#0;
            assume $Is(c#Z#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
               && $IsAlloc(c#Z#0, 
                Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
                $Heap);
            assume let#1#0#0 == _mcc#3#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, 
              Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)));
            assume c#Z#0 == let#1#0#0;
            havoc dof#Z#0;
            assume INTERNAL_le_boogie(0, dof#Z#0);
            assume let#2#0#0 == _mcc#2#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#0#0, Tclass._System.nat());
            assume dof#Z#0 == let#2#0#0;
            if (INTERNAL_le_boogie(dof#Z#0, tmp#Z#0))
            {
                assert c#Z#0 != null;
            }

            if (INTERNAL_le_boogie(dof#Z#0, tmp#Z#0)
               && INTERNAL_le_boogie(dof#Z#0, _System.array.Length(c#Z#0)))
            {
                b$reqreads#2 := $_Frame[this, _module.Qubits.card];
                ##e#1 := read($Heap, this, _module.Qubits.card);
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
            }

            assume _module.Qubits.Wf($Heap, this)
               == (
                INTERNAL_le_boogie(dof#Z#0, tmp#Z#0)
                 && INTERNAL_le_boogie(dof#Z#0, _System.array.Length(c#Z#0))
                 && INTERNAL_le_boogie(dof#Z#0, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))));
            assume INTERNAL_le_boogie(dof#Z#0, tmp#Z#0)
               ==> 
              INTERNAL_le_boogie(dof#Z#0, _System.array.Length(c#Z#0))
               ==> Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.Qubits.Wf($Heap, this), TBool);
        }
        else
        {
            assume false;
        }

        assert b$reqreads#0;
        assert b$reqreads#1;
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
    }
}



procedure CheckWellformed$$_module.Qubits.H(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.H(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var i#0: int;

    // AddMethodImpl: H, CheckWellformed$$_module.Qubits.H
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assert {:subsumption 0} _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Qubits.WfNor#canCall($Heap, this);
    assume _module.Qubits.WfNor($Heap, this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assume _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
    assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
    assert _module.Mode.Nor_q(read(old($Heap), this, _module.Qubits.m));
    assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
    assert _module.Mode.b(read(old($Heap), this, _module.Qubits.m)) != null;
    assert $IsAlloc(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
      Tclass._System.array(Tclass._System.nat()), 
      old($Heap));
    if (_System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)))
       == _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m))))
    {
        assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.Nor_q(read(old($Heap), this, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert _module.Mode.b(read(old($Heap), this, _module.Qubits.m)) != null;
        assert $IsAlloc(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          Tclass._System.array(Tclass._System.nat()), 
          old($Heap));
    }

    assume _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)))
         == _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)))
       && _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)))
         == read($Heap, this, _module.Qubits.card);
    havoc i#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#0);
        assume INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card));
        if (*)
        {
            assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
            assert _module.Mode.Nor_q(read(old($Heap), this, _module.Qubits.m));
            assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
            assert _module.Mode.b(read(old($Heap), this, _module.Qubits.m)) != null;
            assert $IsAlloc(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
              Tclass._System.array?(Tclass._System.nat()), 
              old($Heap));
            assert 0 <= i#0
               && i#0
                 < _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
            assume $Unbox(read(old($Heap), 
                  _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
                  IndexField(i#0))): int
               == LitInt(0);
            assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
            assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
            assert 0 <= i#0
               && i#0 < _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
            assume $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
               == LitInt(1);
        }
        else
        {
            assume $Unbox(read(old($Heap), 
                    _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
                    IndexField(i#0))): int
                 == LitInt(0)
               ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
                 == LitInt(1);
        }
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#0)
             && INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card))
           ==> 
          $Unbox(read(old($Heap), 
                _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
                IndexField(i#0))): int
             == LitInt(0)
           ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
             == LitInt(1);
    }

    assume (forall i#1: int :: 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
        { $Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(i#1))): int } 
      INTERNAL_le_boogie(0, i#1)
           && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card))
         ==> 
        $Unbox(read(old($Heap), 
              _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(i#1))): int
           == LitInt(0)
         ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
           == LitInt(1));
    assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null
       && !read(old($Heap), _module.Mode.h(read($Heap, this, _module.Qubits.m)), alloc);
}



procedure Call$$_module.Qubits.H(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  requires _module.Qubits.WfNor#canCall($Heap, this)
     ==> _module.Qubits.WfNor($Heap, this)
       || _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
         == read($Heap, this, _module.Qubits.card);
  requires _module.Qubits.WfNor#canCall($Heap, this)
     ==> _module.Qubits.WfNor($Heap, this)
       || (forall i#2: int :: 
        { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int } 
        INTERNAL_le_boogie(0, i#2)
             && INTERNAL_lt_boogie(i#2, read($Heap, this, _module.Qubits.card))
           ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int
               == LitInt(0)
             || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int
               == LitInt(1));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#3 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#3) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#3 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#3) == read($Heap, this, _module.Qubits.card))
           else (var c#3 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#3 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#3, tmp#1)
                 && INTERNAL_le_boogie(dof#3, _System.array.Length(c#3))
                 && INTERNAL_le_boogie(dof#3, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free ensures true;
  ensures _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)))
     == _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
  ensures _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)))
     == read($Heap, this, _module.Qubits.card);
  free ensures true;
  ensures (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
      { $Unbox(read(old($Heap), 
          _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1)
         && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card))
       ==> 
      $Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(i#1))): int
         == LitInt(0)
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(1));
  free ensures true;
  ensures _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.h(read($Heap, this, _module.Qubits.m)), alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.H(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, this, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free requires _module.Qubits.WfNor#canCall($Heap, this)
     && 
    _module.Qubits.WfNor($Heap, this)
     && 
    _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
       == read($Heap, this, _module.Qubits.card)
     && (forall i#3: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): int } 
      INTERNAL_le_boogie(0, i#3)
           && INTERNAL_lt_boogie(i#3, read($Heap, this, _module.Qubits.card))
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): int
             == LitInt(0)
           || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): int
             == LitInt(1));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#6 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#6) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#6 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#6) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, tmp#3))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, _System.array.Length(c#6)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  free ensures true;
  ensures _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
  free ensures true;
  ensures _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)))
     == _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
  ensures _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)))
     == read($Heap, this, _module.Qubits.card);
  free ensures true;
  ensures (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
      { $Unbox(read(old($Heap), 
          _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1)
         && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card))
       ==> 
      $Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(i#1))): int
         == LitInt(0)
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(1));
  free ensures true;
  ensures _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.h(read($Heap, this, _module.Qubits.m)), alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.H(this: ref) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var tmp#4: ref
     where $Is(tmp#4, Tclass._System.array(Tclass._System.nat()))
       && $IsAlloc(tmp#4, Tclass._System.array(Tclass._System.nat()), $Heap);
  var qs#0: ref
     where $Is(qs#0, Tclass._System.array(TInt))
       && $IsAlloc(qs#0, Tclass._System.array(TInt), $Heap);
  var $nw: ref;
  var i#4: int;
  var $PreLoopHeap$loop#0: Heap;
  var $decr_init$loop#00: int;
  var $w$loop#0: bool;
  var j#0: int;
  var $decr$loop#00: int;
  var $rhs#0_0: int;
  var i#5: int;
  var $rhs#0: DatatypeType;

    // AddMethodImpl: H, Impl$$_module.Qubits.H
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(187,19)
    assume true;
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume true;
    tmp#4 := _module.Mode.b(read($Heap, this, _module.Qubits.m));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(188,12)
    assume true;
    assert 0 <= read($Heap, this, _module.Qubits.card);
    havoc $nw;
    assume $nw != null && dtype($nw) == Tclass._System.array?(TInt);
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw) == read($Heap, this, _module.Qubits.card);
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    qs#0 := $nw;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(189,11)
    assume true;
    assume true;
    i#4 := LitInt(0);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(190,5)
    assume true;
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(191,5)
    assert {:subsumption 0} qs#0 != null;
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert {:subsumption 0} _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    if (_System.array.Length(qs#0)
       == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))))
    {
        assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
        assert {:subsumption 0} _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    }

    assume true;
    assert {:subsumption 0} _System.array.Length(qs#0)
       == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
    assert {:subsumption 0} _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
       == read($Heap, this, _module.Qubits.card);
    assume _System.array.Length(qs#0)
         == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
       && _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
         == read($Heap, this, _module.Qubits.card);
    // ----- while statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(192,5)
    // Assume Fuel Constant
    $PreLoopHeap$loop#0 := $Heap;
    $decr_init$loop#00 := INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), i#4);
    havoc $w$loop#0;
    while (true)
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> INTERNAL_le_boogie(i#4, read($Heap, this, _module.Qubits.card));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> _System.array.Length(qs#0)
           == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
      invariant $w$loop#0
         ==> _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
           == read($Heap, this, _module.Qubits.card);
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> (forall j#1: int :: 
          { $Unbox(read($Heap, qs#0, IndexField(j#1))): int } 
            { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(j#1))): int } 
          INTERNAL_le_boogie(0, j#1) && INTERNAL_lt_boogie(j#1, i#4)
             ==> 
            $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(j#1))): int
               == LitInt(0)
             ==> $Unbox(read($Heap, qs#0, IndexField(j#1))): int == LitInt(1));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> tmp#4 == _module.Mode.b(read($Heap, this, _module.Qubits.m));
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && read(old($Heap), $o, alloc)
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o] || $o == this);
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
        { read($Heap, $o, $f) } 
        $o != null && read($PreLoopHeap$loop#0, $o, alloc)
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), i#4)
           <= $decr_init$loop#00
         && (INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), i#4)
             == $decr_init$loop#00
           ==> true);
    {
        if (!$w$loop#0)
        {
            assume true;
            assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
            assume true;
            assume INTERNAL_le_boogie(i#4, read($Heap, this, _module.Qubits.card));
            assert {:subsumption 0} qs#0 != null;
            assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
            assert {:subsumption 0} _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
            if (_System.array.Length(qs#0)
               == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))))
            {
                assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
                assert {:subsumption 0} _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
            }

            assume true;
            assume _System.array.Length(qs#0)
                 == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
               && _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
                 == read($Heap, this, _module.Qubits.card);
            // Begin Comprehension WF check
            havoc j#0;
            if (true)
            {
                if (INTERNAL_le_boogie(0, j#0))
                {
                }

                if (INTERNAL_le_boogie(0, j#0) && INTERNAL_lt_boogie(j#0, i#4))
                {
                    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
                    assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
                    assert {:subsumption 0} 0 <= j#0
                       && j#0 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
                    if ($Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(j#0))): int
                       == LitInt(0))
                    {
                        assert qs#0 != null;
                        assert {:subsumption 0} 0 <= j#0 && j#0 < _System.array.Length(qs#0);
                    }
                }
            }

            // End Comprehension WF check
            assume true;
            assume (forall j#1: int :: 
              { $Unbox(read($Heap, qs#0, IndexField(j#1))): int } 
                { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(j#1))): int } 
              INTERNAL_le_boogie(0, j#1) && INTERNAL_lt_boogie(j#1, i#4)
                 ==> 
                $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(j#1))): int
                   == LitInt(0)
                 ==> $Unbox(read($Heap, qs#0, IndexField(j#1))): int == LitInt(1));
            assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
            assume true;
            assume tmp#4 == _module.Mode.b(read($Heap, this, _module.Qubits.m));
            assume true;
            assume false;
        }

        assume true;
        if (!INTERNAL_lt_boogie(i#4, read($Heap, this, _module.Qubits.card)))
        {
            break;
        }

        $decr$loop#00 := INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), i#4);
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(200,13)
        assert qs#0 != null;
        assert 0 <= i#4 && i#4 < _System.array.Length(qs#0);
        assume true;
        assert $_Frame[qs#0, IndexField(i#4)];
        assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#4
           && i#4 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
        if ($Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): int
           == LitInt(0))
        {
        }
        else
        {
        }

        assume true;
        $rhs#0_0 := (if $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): int
             == LitInt(0)
           then 1
           else -1);
        $Heap := update($Heap, qs#0, IndexField(i#4), $Box($rhs#0_0));
        assume $IsGoodHeap($Heap);
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(201,9)
        assume true;
        assume true;
        i#4 := INTERNAL_add_boogie(i#4, 1);
        // ----- loop termination check ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(192,5)
        assert 0 <= $decr$loop#00
           || INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), i#4)
             == $decr$loop#00;
        assert INTERNAL_sub_boogie(read($Heap, this, _module.Qubits.card), i#4) < $decr$loop#00;
        assume true;
    }

    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(203,5)
    assert {:subsumption 0} qs#0 != null;
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert {:subsumption 0} _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    if (_System.array.Length(qs#0)
       == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))))
    {
        assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
        assert {:subsumption 0} _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    }

    assume true;
    assert {:subsumption 0} _System.array.Length(qs#0)
       == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
    assert {:subsumption 0} _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
       == read($Heap, this, _module.Qubits.card);
    assume _System.array.Length(qs#0)
         == _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
       && _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
         == read($Heap, this, _module.Qubits.card);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(204,5)
    // Begin Comprehension WF check
    havoc i#5;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#5))
        {
        }

        if (INTERNAL_le_boogie(0, i#5)
           && INTERNAL_lt_boogie(i#5, read($Heap, this, _module.Qubits.card)))
        {
            assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= i#5
               && i#5 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
            if ($Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#5))): int
               == LitInt(0))
            {
                assert qs#0 != null;
                assert {:subsumption 0} 0 <= i#5 && i#5 < _System.array.Length(qs#0);
            }
        }
    }

    // End Comprehension WF check
    assume true;
    assert (forall i#6: int :: 
      { $Unbox(read($Heap, qs#0, IndexField(i#6))): int } 
        { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#6))): int } 
      INTERNAL_le_boogie(0, i#6)
           && INTERNAL_lt_boogie(i#6, read($Heap, this, _module.Qubits.card))
         ==> 
        $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#6))): int
           == LitInt(0)
         ==> $Unbox(read($Heap, qs#0, IndexField(i#6))): int == LitInt(1));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(205,7)
    assume true;
    assert $_Frame[this, _module.Qubits.m];
    assume true;
    $rhs#0 := #_module.Mode.Had(qs#0);
    $Heap := update($Heap, this, _module.Qubits.m, $rhs#0);
    assume $IsGoodHeap($Heap);
}



procedure CheckWellformed$$_module.Qubits.PlusRetCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.PlusRetCH(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var i#0: int;
  var ##e#0: int;
  var i#2: int;

    // AddMethodImpl: PlusRetCH, CheckWellformed$$_module.Qubits.PlusRetCH
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    havoc i#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#0);
        assume INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card));
        assert _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.h(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#0
           && i#0 < _System.array.Length(_module.Mode.h(read($Heap, this, _module.Qubits.m)));
        assume $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
           == LitInt(1);
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#0)
             && INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card))
           ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
             == LitInt(1);
    }

    assume (forall i#1: int :: 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
      INTERNAL_le_boogie(0, i#1)
           && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card))
         ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
           == LitInt(1));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    ##e#0 := read($Heap, this, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
    assume _module.Mode.dof(read($Heap, this, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    havoc i#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#2);
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        assume INTERNAL_lt_boogie(i#2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#2
           && i#2 < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(i#2), $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#2)
             && INTERNAL_lt_boogie(i#2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(i#2), $Box(LitInt(1))));
    }

    assume (forall i#3: int :: 
      { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
      INTERNAL_le_boogie(0, i#3)
           && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(i#3), $Box(LitInt(1)))));
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
       && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
}



procedure Call$$_module.Qubits.PlusRetCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  requires (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1)
         && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card))
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(1));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  free ensures Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
  ensures _module.Mode.dof(read($Heap, this, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#3 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#3) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#3 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#3) == read($Heap, this, _module.Qubits.card))
           else (var c#3 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#3 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#3, tmp#1)
                 && INTERNAL_le_boogie(dof#3, _System.array.Length(c#3))
                 && INTERNAL_le_boogie(dof#3, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free ensures (forall i#3: int :: 
    { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
    INTERNAL_le_boogie(0, i#3)
         && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType));
  ensures (forall i#3: int :: 
    { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
    INTERNAL_le_boogie(0, i#3)
         && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(i#3), $Box(LitInt(1)))));
  free ensures true;
  ensures _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.PlusRetCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires _module.Mode.Had_q(read($Heap, this, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, this, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  requires (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1)
         && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card))
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(1));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  free ensures Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
  ensures _module.Mode.dof(read($Heap, this, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#6 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#6) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#6 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#6) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, tmp#3))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, _System.array.Length(c#6)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  free ensures (forall i#3: int :: 
    { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
    INTERNAL_le_boogie(0, i#3)
         && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType));
  ensures (forall i#3: int :: 
    { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
    INTERNAL_le_boogie(0, i#3)
         && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(i#3), $Box(LitInt(1)))));
  free ensures true;
  ensures _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.PlusRetCH(this: ref) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var dof#8: int where INTERNAL_le_boogie(0, dof#8);
  var ##e#1: int;
  var c#8: ref
     where $Is(c#8, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
       && $IsAlloc(c#8, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
        $Heap);
  var $lambdaHeap#0: Heap;
  var i#4: int;
  var $_Frame#l0: <beta>[ref,Field beta]bool;
  var lambdaResult#0: DatatypeType;
  var $nw: ref;
  var i#5: int;
  var $rhs#0: DatatypeType;
  var i#7: int;

    // AddMethodImpl: PlusRetCH, Impl$$_module.Qubits.PlusRetCH
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(219,13)
    assume true;
    ##e#1 := read($Heap, this, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
    assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
    dof#8 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(220,11)
    assume true;
    assert 0 <= dof#8;
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#0;
        assume $IsGoodHeap($lambdaHeap#0);
        assume $Heap == $lambdaHeap#0 || $HeapSucc($Heap, $lambdaHeap#0);
        havoc i#4;
        if (INTERNAL_le_boogie(0, i#4))
        {
            $_Frame#l0 := (lambda<alpha> $o: ref, $f: Field alpha :: 
              $o != null && read($lambdaHeap#0, $o, alloc) ==> false);
            assume lambdaResult#0 == #_System._tuple#2._#Make2($Box(i#4), $Box(LitInt(1)));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt));
        }

        assume false;
    }

    // End Comprehension WF check
    havoc $nw;
    assume $nw != null
       && dtype($nw)
         == Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt));
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw) == dof#8;
    assert {:subsumption 0} (forall arrayinit#0#i0#0: int :: 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < dof#8
         ==> Requires1(Tclass._System.nat(), 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt), 
          $Heap, 
          Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                Handle1((lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                    $Box(#_System._tuple#2._#Make2($l#0#i#0, $Box(LitInt(1))))), 
                  (lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                    $IsBox($l#0#i#0, Tclass._System.nat())), 
                  (lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
              $LS($LZ))), 
          $Box(arrayinit#0#i0#0)));
    assume (forall arrayinit#0#i0#0: int :: 
      { read($Heap, $nw, IndexField(arrayinit#0#i0#0)) } 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < dof#8
         ==> $Unbox(read($Heap, $nw, IndexField(arrayinit#0#i0#0))): DatatypeType
           == $Unbox(Apply1(Tclass._System.nat(), 
              Tclass._System.Tuple2(Tclass._System.nat(), TInt), 
              $Heap, 
              Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                    Handle1((lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                        $Box(#_System._tuple#2._#Make2($l#0#i#0, $Box(LitInt(1))))), 
                      (lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                        $IsBox($l#0#i#0, Tclass._System.nat())), 
                      (lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0#i0#0))): DatatypeType);
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    c#8 := $nw;
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(221,5)
    // Begin Comprehension WF check
    havoc i#5;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#5))
        {
        }

        if (INTERNAL_le_boogie(0, i#5) && INTERNAL_lt_boogie(i#5, dof#8))
        {
            assert c#8 != null;
            assert {:subsumption 0} 0 <= i#5 && i#5 < _System.array.Length(c#8);
        }
    }

    // End Comprehension WF check
    assume (forall i#6: int :: 
      { #_System._tuple#2._#Make2($Box(i#6), $Box(1)) } 
        { $Unbox(read($Heap, c#8, IndexField(i#6))): DatatypeType } 
      INTERNAL_le_boogie(0, i#6) && INTERNAL_lt_boogie(i#6, dof#8)
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, c#8, IndexField(i#6))): DatatypeType));
    assert (forall i#6: int :: 
      { #_System._tuple#2._#Make2($Box(i#6), $Box(1)) } 
        { $Unbox(read($Heap, c#8, IndexField(i#6))): DatatypeType } 
      INTERNAL_le_boogie(0, i#6) && INTERNAL_lt_boogie(i#6, dof#8)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c#8, IndexField(i#6))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(i#6), $Box(LitInt(1)))));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(222,7)
    assume true;
    assert $_Frame[this, _module.Qubits.m];
    assume true;
    $rhs#0 := #_module.Mode.CH(dof#8, c#8);
    $Heap := update($Heap, this, _module.Qubits.m, $rhs#0);
    assume $IsGoodHeap($Heap);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(223,5)
    // Begin Comprehension WF check
    havoc i#7;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#7))
        {
            assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        }

        if (INTERNAL_le_boogie(0, i#7)
           && INTERNAL_lt_boogie(i#7, _module.Mode.dof(read($Heap, this, _module.Qubits.m))))
        {
            assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
            assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= i#7
               && i#7 < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume (forall i#8: int :: 
      { #_System._tuple#2._#Make2($Box(i#8), $Box(1)) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#8))): DatatypeType } 
      INTERNAL_le_boogie(0, i#8)
           && INTERNAL_lt_boogie(i#8, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#8))): DatatypeType));
    assert (forall i#8: int :: 
      { #_System._tuple#2._#Make2($Box(i#8), $Box(1)) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#8))): DatatypeType } 
      INTERNAL_le_boogie(0, i#8)
           && INTERNAL_lt_boogie(i#8, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#8))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(i#8), $Box(LitInt(1)))));
}



procedure CheckWellformed$$_module.Qubits.Xat(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.Xat(this: ref, i#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var k#0: int;

    // AddMethodImpl: Xat, CheckWellformed$$_module.Qubits.Xat
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == _module.Mode.b(read($Heap, this, _module.Qubits.m)));
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assert {:subsumption 0} _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Qubits.WfNor#canCall($Heap, this);
    assume _module.Qubits.WfNor($Heap, this);
    if (INTERNAL_le_boogie(0, i#0))
    {
    }

    assume INTERNAL_le_boogie(0, i#0)
       && INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card));
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o]
           || $o == _module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
    assume $HeapSucc(old($Heap), $Heap);
    if (*)
    {
        assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.Nor_q(read(old($Heap), this, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert _module.Mode.b(read(old($Heap), this, _module.Qubits.m)) != null;
        assert $IsAlloc(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          Tclass._System.array?(Tclass._System.nat()), 
          old($Heap));
        assert 0 <= i#0
           && i#0
             < _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
        if ($Unbox(read(old($Heap), 
              _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(i#0))): int
           == LitInt(0))
        {
            assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
            assert 0 <= i#0
               && i#0 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
        }

        assume $Unbox(read(old($Heap), 
                _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
                IndexField(i#0))): int
             == LitInt(0)
           && $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
             == LitInt(1);
    }
    else
    {
        assume !($Unbox(read(old($Heap), 
                _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
                IndexField(i#0))): int
             == LitInt(0)
           && $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
             == LitInt(1));
        assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.Nor_q(read(old($Heap), this, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert _module.Mode.b(read(old($Heap), this, _module.Qubits.m)) != null;
        assert $IsAlloc(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          Tclass._System.array?(Tclass._System.nat()), 
          old($Heap));
        assert 0 <= i#0
           && i#0
             < _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
        if ($Unbox(read(old($Heap), 
              _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(i#0))): int
           == LitInt(1))
        {
            assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
            assert 0 <= i#0
               && i#0 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
        }

        assume $Unbox(read(old($Heap), 
                _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
                IndexField(i#0))): int
             == LitInt(1)
           && $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
             == LitInt(0);
    }

    // Begin Comprehension WF check
    havoc k#0;
    if (true)
    {
        if (INTERNAL_le_boogie(0, k#0))
        {
            assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
        }

        if (INTERNAL_le_boogie(0, k#0)
           && INTERNAL_lt_boogie(k#0, _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))))
        {
            if (k#0 != i#0)
            {
                assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
                assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
                assert 0 <= k#0
                   && k#0 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
                assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
                assert _module.Mode.Nor_q(read(old($Heap), this, _module.Qubits.m));
                assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
                assert _module.Mode.b(read(old($Heap), this, _module.Qubits.m)) != null;
                assert $IsAlloc(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
                  Tclass._System.array?(Tclass._System.nat()), 
                  old($Heap));
                assert 0 <= k#0
                   && k#0
                     < _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
            }
        }
    }

    // End Comprehension WF check
    assume (forall k#1: int :: 
      { $Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(k#1))): int } 
        { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(k#1))): int } 
      INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))))
         ==> 
        k#1 != i#0
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(k#1))): int
           == $Unbox(read(old($Heap), 
              _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
              IndexField(k#1))): int);
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assert {:subsumption 0} _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Qubits.WfNor#canCall($Heap, this);
    assume _module.Qubits.WfNor($Heap, this);
}



procedure Call$$_module.Qubits.Xat(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  // user-defined preconditions
  requires _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  requires _module.Qubits.WfNor#canCall($Heap, this)
     ==> _module.Qubits.WfNor($Heap, this)
       || _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
         == read($Heap, this, _module.Qubits.card);
  requires _module.Qubits.WfNor#canCall($Heap, this)
     ==> _module.Qubits.WfNor($Heap, this)
       || (forall i#1: int :: 
        { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
        INTERNAL_le_boogie(0, i#1)
             && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card))
           ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
               == LitInt(0)
             || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
               == LitInt(1));
  requires INTERNAL_le_boogie(0, i#0);
  requires INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures ($Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(i#0))): int
         == LitInt(0)
       && $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
         == LitInt(1))
     || ($Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(i#0))): int
         == LitInt(1)
       && $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
         == LitInt(0));
  free ensures true;
  ensures (forall k#1: int :: 
    { $Unbox(read(old($Heap), 
          _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          IndexField(k#1))): int } 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(k#1))): int } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))))
       ==> 
      k#1 != i#0
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(k#1))): int
         == $Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(k#1))): int);
  free ensures true;
  ensures _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#3 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#3) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#3 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#3) == read($Heap, this, _module.Qubits.card))
           else (var c#3 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#3 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#3, tmp#1)
                 && INTERNAL_le_boogie(dof#3, _System.array.Length(c#3))
                 && INTERNAL_le_boogie(dof#3, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free ensures _module.Qubits.WfNor#canCall($Heap, this);
  free ensures _module.Qubits.WfNor#canCall($Heap, this)
     && 
    _module.Qubits.WfNor($Heap, this)
     && 
    _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
       == read($Heap, this, _module.Qubits.card)
     && (forall i#2: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int } 
      INTERNAL_le_boogie(0, i#2)
           && INTERNAL_lt_boogie(i#2, read($Heap, this, _module.Qubits.card))
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int
             == LitInt(0)
           || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): int
             == LitInt(1));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o]
         || $o == _module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.Xat(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    i#0: int where INTERNAL_le_boogie(0, i#0))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  // user-defined preconditions
  requires _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, this, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free requires _module.Qubits.WfNor#canCall($Heap, this)
     && 
    _module.Qubits.WfNor($Heap, this)
     && 
    _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
       == read($Heap, this, _module.Qubits.card)
     && (forall i#3: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): int } 
      INTERNAL_le_boogie(0, i#3)
           && INTERNAL_lt_boogie(i#3, read($Heap, this, _module.Qubits.card))
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): int
             == LitInt(0)
           || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): int
             == LitInt(1));
  requires INTERNAL_le_boogie(0, i#0);
  requires INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures ($Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(i#0))): int
         == LitInt(0)
       && $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
         == LitInt(1))
     || ($Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(i#0))): int
         == LitInt(1)
       && $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
         == LitInt(0));
  free ensures true;
  ensures (forall k#1: int :: 
    { $Unbox(read(old($Heap), 
          _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          IndexField(k#1))): int } 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(k#1))): int } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))))
       ==> 
      k#1 != i#0
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(k#1))): int
         == $Unbox(read(old($Heap), 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            IndexField(k#1))): int);
  free ensures true;
  ensures _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#6 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#6) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#6 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#6) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, tmp#3))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, _System.array.Length(c#6)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  free ensures _module.Qubits.WfNor#canCall($Heap, this);
  ensures _module.Qubits.WfNor#canCall($Heap, this)
     ==> _module.Qubits.WfNor($Heap, this)
       || _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
         == read($Heap, this, _module.Qubits.card);
  ensures _module.Qubits.WfNor#canCall($Heap, this)
     ==> _module.Qubits.WfNor($Heap, this)
       || (forall i#4: int :: 
        { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): int } 
        INTERNAL_le_boogie(0, i#4)
             && INTERNAL_lt_boogie(i#4, read($Heap, this, _module.Qubits.card))
           ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): int
               == LitInt(0)
             || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): int
               == LitInt(1));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o]
         || $o == _module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.Xat(this: ref, i#0: int) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $rhs#0: int;
  var newtype$check#0: int;

    // AddMethodImpl: Xat, Impl$$_module.Qubits.Xat
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == _module.Mode.b(read($Heap, this, _module.Qubits.m)));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(239,12)
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    assert 0 <= i#0
       && i#0 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
    assume true;
    assert $_Frame[_module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0)];
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    assert 0 <= i#0
       && i#0 < _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
    newtype$check#0 := INTERNAL_sub_boogie(1, 
      $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int);
    assert INTERNAL_le_boogie(0, newtype$check#0);
    assume true;
    $rhs#0 := INTERNAL_sub_boogie(1, 
      $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int);
    $Heap := update($Heap, 
      _module.Mode.b(read($Heap, this, _module.Qubits.m)), 
      IndexField(i#0), 
      $Box($rhs#0));
    assume $IsGoodHeap($Heap);
}



procedure CheckWellformed$$_module.Qubits.NorRetCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.NorRetCH(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##a#0: ref;
  var ##i#0: int;
  var ##j#0: int;

    // AddMethodImpl: NorRetCH, CheckWellformed$$_module.Qubits.NorRetCH
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assert {:subsumption 0} _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assume _module.Qubits.WfNor#canCall($Heap, this);
    assume _module.Qubits.WfNor($Heap, this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.dof(read($Heap, this, _module.Qubits.m)) == LitInt(1);
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
    assert 0 <= LitInt(0)
       && LitInt(0)
         < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
    assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
    assert _module.Mode.Nor_q(read(old($Heap), this, _module.Qubits.m));
    assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
    assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
    assert _module.Mode.Nor_q(read(old($Heap), this, _module.Qubits.m));
    assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
    assert _module.Mode.b(read(old($Heap), this, _module.Qubits.m)) != null;
    assert $IsAlloc(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
      Tclass._System.array(Tclass._System.nat()), 
      old($Heap));
    ##a#0 := _module.Mode.b(read(old($Heap), this, _module.Qubits.m));
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#0, Tclass._System.array(Tclass._System.nat()), $Heap);
    assert $Is(LitInt(0), Tclass._System.nat());
    ##i#0 := LitInt(0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##i#0, Tclass._System.nat(), $Heap);
    assert $Is(_System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m))), 
      Tclass._System.nat());
    ##j#0 := _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m)));
    // assume allocatedness for argument to function
    assume $IsAlloc(##j#0, Tclass._System.nat(), $Heap);
    assert {:subsumption 0} INTERNAL_le_boogie(0, ##i#0);
    assert {:subsumption 0} INTERNAL_le_boogie(##i#0, ##j#0);
    assert {:subsumption 0} INTERNAL_le_boogie(##j#0, _System.array.Length(##a#0));
    assume INTERNAL_le_boogie(0, ##i#0)
       && INTERNAL_le_boogie(##i#0, ##j#0)
       && INTERNAL_le_boogie(##j#0, _System.array.Length(##a#0));
    assert {:subsumption 0} (forall k#0: int :: 
      { $Unbox(read($Heap, ##a#0, IndexField(k#0))): int } 
      INTERNAL_le_boogie(0, k#0)
           && INTERNAL_lt_boogie(k#0, _System.array.Length(##a#0))
         ==> $Unbox(read($Heap, ##a#0, IndexField(k#0))): int == LitInt(0)
           || $Unbox(read($Heap, ##a#0, IndexField(k#0))): int == LitInt(1));
    assume (forall k#0: int :: 
      { $Unbox(read($Heap, ##a#0, IndexField(k#0))): int } 
      INTERNAL_le_boogie(0, k#0)
           && INTERNAL_lt_boogie(k#0, _System.array.Length(##a#0))
         ==> $Unbox(read($Heap, ##a#0, IndexField(k#0))): int == LitInt(0)
           || $Unbox(read($Heap, ##a#0, IndexField(k#0))): int == LitInt(1));
    assume B2N.__default.b2nAux#canCall($Heap, 
      _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
      LitInt(0), 
      _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m))));
    assume _System.Tuple2#Equal($Unbox(read($Heap, 
          _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
          IndexField(LitInt(0)))): DatatypeType, 
      #_System._tuple#2._#Make2($Box(B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
            $Heap, 
            _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
            LitInt(0), 
            _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m))))), 
        $Box(LitInt(1))));
    assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
    assume read($Heap, this, _module.Qubits.card)
       == read(old($Heap), this, _module.Qubits.card);
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
       && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
}



procedure Call$$_module.Qubits.NorRetCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  requires _module.Qubits.WfNor#canCall($Heap, this)
     ==> _module.Qubits.WfNor($Heap, this)
       || _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
         == read($Heap, this, _module.Qubits.card);
  requires _module.Qubits.WfNor#canCall($Heap, this)
     ==> _module.Qubits.WfNor($Heap, this)
       || (forall i#0: int :: 
        { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int } 
        INTERNAL_le_boogie(0, i#0)
             && INTERNAL_lt_boogie(i#0, read($Heap, this, _module.Qubits.card))
           ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
               == LitInt(0)
             || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): int
               == LitInt(1));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#3 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#3) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#3 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#3) == read($Heap, this, _module.Qubits.card))
           else (var c#3 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#3 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#3, tmp#1)
                 && INTERNAL_le_boogie(dof#3, _System.array.Length(c#3))
                 && INTERNAL_le_boogie(dof#3, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free ensures true;
  ensures _module.Mode.dof(read($Heap, this, _module.Qubits.m)) == LitInt(1);
  free ensures $IsA#_System.Tuple2($Unbox(read($Heap, 
          _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
          IndexField(LitInt(0)))): DatatypeType)
     && B2N.__default.b2nAux#canCall($Heap, 
      _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
      LitInt(0), 
      _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m))));
  ensures _System.Tuple2#Equal($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType, 
    #_System._tuple#2._#Make2($Box(B2N.__default.b2nAux(StartFuelAssert_B2N._default.b2nAux, 
          $Heap, 
          _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          LitInt(0), 
          _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m))))), 
      $Box(LitInt(1))));
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card)
     == read(old($Heap), this, _module.Qubits.card);
  free ensures true;
  ensures _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.NorRetCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, this, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  free requires _module.Qubits.WfNor#canCall($Heap, this)
     && 
    _module.Qubits.WfNor($Heap, this)
     && 
    _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)))
       == read($Heap, this, _module.Qubits.card)
     && (forall i#1: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int } 
      INTERNAL_le_boogie(0, i#1)
           && INTERNAL_lt_boogie(i#1, read($Heap, this, _module.Qubits.card))
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
             == LitInt(0)
           || $Unbox(read($Heap, _module.Mode.b(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): int
             == LitInt(1));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#6 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#6) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#6 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#6) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, tmp#3))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, _System.array.Length(c#6)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  free ensures true;
  ensures _module.Mode.dof(read($Heap, this, _module.Qubits.m)) == LitInt(1);
  free ensures $IsA#_System.Tuple2($Unbox(read($Heap, 
          _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
          IndexField(LitInt(0)))): DatatypeType)
     && B2N.__default.b2nAux#canCall($Heap, 
      _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
      LitInt(0), 
      _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m))));
  ensures _System.Tuple2#Equal($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, this, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType, 
    #_System._tuple#2._#Make2($Box(B2N.__default.b2nAux(StartFuelAssert_B2N._default.b2nAux, 
          $Heap, 
          _module.Mode.b(read(old($Heap), this, _module.Qubits.m)), 
          LitInt(0), 
          _System.array.Length(_module.Mode.b(read(old($Heap), this, _module.Qubits.m))))), 
      $Box(LitInt(1))));
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card)
     == read(old($Heap), this, _module.Qubits.card);
  free ensures true;
  ensures _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.NorRetCH(this: ref) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var j#0: int where INTERNAL_le_boogie(0, j#0);
  var ##a#1: ref;
  var ##i#1: int;
  var ##j#1: int;
  var t#0: ref
     where $Is(t#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
       && $IsAlloc(t#0, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
        $Heap);
  var $lambdaHeap#0: Heap;
  var _v3#0: int;
  var $_Frame#l0: <beta>[ref,Field beta]bool;
  var lambdaResult#0: DatatypeType;
  var $nw: ref;
  var $rhs#0: DatatypeType;

    // AddMethodImpl: NorRetCH, Impl$$_module.Qubits.NorRetCH
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(254,11)
    assume true;
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m));
    assert _module.Mode.b(read($Heap, this, _module.Qubits.m)) != null;
    ##a#1 := _module.Mode.b(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#1, Tclass._System.array(Tclass._System.nat()), $Heap);
    assert $Is(LitInt(0), Tclass._System.nat());
    ##i#1 := LitInt(0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##i#1, Tclass._System.nat(), $Heap);
    assert $Is(_System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))), 
      Tclass._System.nat());
    ##j#1 := _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m)));
    // assume allocatedness for argument to function
    assume $IsAlloc(##j#1, Tclass._System.nat(), $Heap);
    assert {:subsumption 0} INTERNAL_le_boogie(0, ##i#1);
    assert {:subsumption 0} INTERNAL_le_boogie(##i#1, ##j#1);
    assert {:subsumption 0} INTERNAL_le_boogie(##j#1, _System.array.Length(##a#1));
    assume INTERNAL_le_boogie(0, ##i#1)
       && INTERNAL_le_boogie(##i#1, ##j#1)
       && INTERNAL_le_boogie(##j#1, _System.array.Length(##a#1));
    assert {:subsumption 0} (forall k#1: int :: 
      { $Unbox(read($Heap, ##a#1, IndexField(k#1))): int } 
      INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, _System.array.Length(##a#1))
         ==> $Unbox(read($Heap, ##a#1, IndexField(k#1))): int == LitInt(0)
           || $Unbox(read($Heap, ##a#1, IndexField(k#1))): int == LitInt(1));
    assume (forall k#1: int :: 
      { $Unbox(read($Heap, ##a#1, IndexField(k#1))): int } 
      INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, _System.array.Length(##a#1))
         ==> $Unbox(read($Heap, ##a#1, IndexField(k#1))): int == LitInt(0)
           || $Unbox(read($Heap, ##a#1, IndexField(k#1))): int == LitInt(1));
    assume B2N.__default.b2nAux#canCall($Heap, 
      _module.Mode.b(read($Heap, this, _module.Qubits.m)), 
      LitInt(0), 
      _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))));
    assume B2N.__default.b2nAux#canCall($Heap, 
      _module.Mode.b(read($Heap, this, _module.Qubits.m)), 
      LitInt(0), 
      _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))));
    j#0 := B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
      $Heap, 
      _module.Mode.b(read($Heap, this, _module.Qubits.m)), 
      LitInt(0), 
      _System.array.Length(_module.Mode.b(read($Heap, this, _module.Qubits.m))));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(255,11)
    assume true;
    assert 0 <= LitInt(1);
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#0;
        assume $IsGoodHeap($lambdaHeap#0);
        assume $Heap == $lambdaHeap#0 || $HeapSucc($Heap, $lambdaHeap#0);
        havoc _v3#0;
        if (INTERNAL_le_boogie(0, _v3#0))
        {
            $_Frame#l0 := (lambda<alpha> $o: ref, $f: Field alpha :: 
              $o != null && read($lambdaHeap#0, $o, alloc) ==> false);
            assume lambdaResult#0 == #_System._tuple#2._#Make2($Box(j#0), $Box(LitInt(1)));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt));
        }

        assume false;
    }

    // End Comprehension WF check
    havoc $nw;
    assume $nw != null
       && dtype($nw)
         == Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt));
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw) == LitInt(1);
    assert {:subsumption 0} (forall arrayinit#0#i0#0: int :: 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < LitInt(1)
         ==> Requires1(Tclass._System.nat(), 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt), 
          $Heap, 
          Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                Handle1((lambda $l#0#heap#0: Heap, $l#0#_v3#0: Box :: 
                    $Box(#_System._tuple#2._#Make2($Box(j#0), $Box(LitInt(1))))), 
                  (lambda $l#0#heap#0: Heap, $l#0#_v3#0: Box :: 
                    $IsBox($l#0#_v3#0, Tclass._System.nat())), 
                  (lambda $l#0#heap#0: Heap, $l#0#_v3#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
              $LS($LZ))), 
          $Box(arrayinit#0#i0#0)));
    assume (forall arrayinit#0#i0#0: int :: 
      { read($Heap, $nw, IndexField(arrayinit#0#i0#0)) } 
      0 <= arrayinit#0#i0#0 && arrayinit#0#i0#0 < LitInt(1)
         ==> $Unbox(read($Heap, $nw, IndexField(arrayinit#0#i0#0))): DatatypeType
           == $Unbox(Apply1(Tclass._System.nat(), 
              Tclass._System.Tuple2(Tclass._System.nat(), TInt), 
              $Heap, 
              Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                    Handle1((lambda $l#0#heap#0: Heap, $l#0#_v3#0: Box :: 
                        $Box(#_System._tuple#2._#Make2($Box(j#0), $Box(LitInt(1))))), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v3#0: Box :: 
                        $IsBox($l#0#_v3#0, Tclass._System.nat())), 
                      (lambda $l#0#heap#0: Heap, $l#0#_v3#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0#i0#0))): DatatypeType);
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    t#0 := $nw;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(256,7)
    assume true;
    assert $_Frame[this, _module.Qubits.m];
    assert $Is(LitInt(1), Tclass._System.nat());
    assume true;
    $rhs#0 := #_module.Mode.CH(LitInt(1), t#0);
    $Heap := update($Heap, this, _module.Qubits.m, $rhs#0);
    assume $IsGoodHeap($Heap);
}



procedure CheckWellformed$$_module.Qubits.CatPlusCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    q#0: ref
       where $Is(q#0, Tclass._module.Qubits())
         && $IsAlloc(q#0, Tclass._module.Qubits(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.CatPlusCH(this: ref, q#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var i#0: int;
  var ##e#0: int;
  var i#2: int;

    // AddMethodImpl: CatPlusCH, CheckWellformed$$_module.Qubits.CatPlusCH
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assert q#0 != null;
    assume _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
    assert q#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(q#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, q#0);
    assume _module.Qubits.Wf($Heap, q#0);
    havoc i#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#0);
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        assume INTERNAL_lt_boogie(i#0, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#0
           && i#0 < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(i#0), $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#0)
             && INTERNAL_lt_boogie(i#0, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(i#0), $Box(LitInt(1))));
    }

    assume (forall i#1: int :: 
      { #_System._tuple#2._#Make2($Box(i#1), $Box(1)) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): DatatypeType } 
      INTERNAL_le_boogie(0, i#1)
           && INTERNAL_lt_boogie(i#1, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(1)))));
    assert q#0 != null;
    assume read($Heap, q#0, _module.Qubits.card) == LitInt(1);
    assert q#0 != null;
    assert _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
    assert _module.Mode.h(read($Heap, q#0, _module.Qubits.m)) != null;
    assert 0 <= LitInt(0)
       && LitInt(0)
         < _System.array.Length(_module.Mode.h(read($Heap, q#0, _module.Qubits.m)));
    assume $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(LitInt(0)))): int
       == LitInt(1);
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    ##e#0 := read($Heap, this, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
    assume _module.Mode.dof(read($Heap, this, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
    assert _module.Mode.CH_q(read(old($Heap), this, _module.Qubits.m));
    assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
    assume _module.Mode.dof(read($Heap, this, _module.Qubits.m))
       == INTERNAL_mul_boogie(2, _module.Mode.dof(read(old($Heap), this, _module.Qubits.m)));
    assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
    assume read($Heap, this, _module.Qubits.card)
       == INTERNAL_add_boogie(read(old($Heap), this, _module.Qubits.card), 1);
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assume _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
       && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
    havoc i#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#2);
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        assume INTERNAL_lt_boogie(i#2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#2
           && i#2 < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(i#2), $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#2)
             && INTERNAL_lt_boogie(i#2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(i#2), $Box(LitInt(1))));
    }

    assume (forall i#3: int :: 
      { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
      INTERNAL_le_boogie(0, i#3)
           && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(i#3), $Box(LitInt(1)))));
}



procedure Call$$_module.Qubits.CatPlusCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    q#0: ref
       where $Is(q#0, Tclass._module.Qubits())
         && $IsAlloc(q#0, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, this, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  requires _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var b#2 := _module.Mode.b(read($Heap, q#0, _module.Qubits.m)); 
            _System.array.Length(b#2) == read($Heap, q#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var h#2 := _module.Mode.h(read($Heap, q#0, _module.Qubits.m)); 
            _System.array.Length(h#2) == read($Heap, q#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, tmp#1))));
  requires _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, _System.array.Length(c#2)))));
  requires _module.Qubits.Wf#canCall($Heap, q#0)
     ==> _module.Qubits.Wf($Heap, q#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card))))));
  requires (forall i#1: int :: 
    { #_System._tuple#2._#Make2($Box(i#1), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): DatatypeType } 
    INTERNAL_le_boogie(0, i#1)
         && INTERNAL_lt_boogie(i#1, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(1)))));
  requires read($Heap, q#0, _module.Qubits.card) == LitInt(1);
  requires $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(LitInt(0)))): int
     == LitInt(1);
  requires _module.Mode.dof(read($Heap, this, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, this, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  ensures _module.Mode.dof(read($Heap, this, _module.Qubits.m))
     == INTERNAL_mul_boogie(2, _module.Mode.dof(read(old($Heap), this, _module.Qubits.m)));
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card)
     == INTERNAL_add_boogie(read(old($Heap), this, _module.Qubits.card), 1);
  free ensures true;
  ensures _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
  free ensures (forall i#3: int :: 
    { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
    INTERNAL_le_boogie(0, i#3)
         && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType));
  ensures (forall i#3: int :: 
    { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
    INTERNAL_le_boogie(0, i#3)
         && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(i#3), $Box(LitInt(1)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Qubits.CatPlusCH(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    q#0: ref
       where $Is(q#0, Tclass._module.Qubits())
         && $IsAlloc(q#0, Tclass._module.Qubits(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, this)
     && 
    _module.Qubits.Wf($Heap, this)
     && (var tmp#3 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
         then (var b#7 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
          _System.array.Length(b#7) == read($Heap, this, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           then (var h#7 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#7) == read($Heap, this, _module.Qubits.card))
           else (var c#7 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#7 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#7, tmp#3)
                 && INTERNAL_le_boogie(dof#7, _System.array.Length(c#7))
                 && INTERNAL_le_boogie(dof#7, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
  requires _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, q#0)
     && 
    _module.Qubits.Wf($Heap, q#0)
     && (var tmp#4 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, q#0, _module.Qubits.m))
         then (var b#9 := _module.Mode.b(read($Heap, q#0, _module.Qubits.m)); 
          _System.array.Length(b#9) == read($Heap, q#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, q#0, _module.Qubits.m))
           then (var h#9 := _module.Mode.h(read($Heap, q#0, _module.Qubits.m)); 
            _System.array.Length(h#9) == read($Heap, q#0, _module.Qubits.card))
           else (var c#9 := _module.Mode.c(read($Heap, q#0, _module.Qubits.m)); 
            (var dof#9 := _module.Mode.dof(read($Heap, q#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#9, tmp#4)
                 && INTERNAL_le_boogie(dof#9, _System.array.Length(c#9))
                 && INTERNAL_le_boogie(dof#9, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, q#0, _module.Qubits.card))))))));
  requires (forall i#1: int :: 
    { #_System._tuple#2._#Make2($Box(i#1), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): DatatypeType } 
    INTERNAL_le_boogie(0, i#1)
         && INTERNAL_lt_boogie(i#1, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(1)))));
  requires read($Heap, q#0, _module.Qubits.card) == LitInt(1);
  requires $Unbox(read($Heap, _module.Mode.h(read($Heap, q#0, _module.Qubits.m)), IndexField(LitInt(0)))): int
     == LitInt(1);
  requires _module.Mode.dof(read($Heap, this, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, this);
  ensures _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> (var b#10 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(b#10) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var h#10 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
            _System.array.Length(h#10) == read($Heap, this, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, tmp#5))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, _System.array.Length(c#10)))));
  ensures _module.Qubits.Wf#canCall($Heap, this)
     ==> _module.Qubits.Wf($Heap, this)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
  ensures _module.Mode.dof(read($Heap, this, _module.Qubits.m))
     == INTERNAL_mul_boogie(2, _module.Mode.dof(read(old($Heap), this, _module.Qubits.m)));
  free ensures true;
  ensures read($Heap, this, _module.Qubits.card)
     == INTERNAL_add_boogie(read(old($Heap), this, _module.Qubits.card), 1);
  free ensures true;
  ensures _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.c(read($Heap, this, _module.Qubits.m)), alloc);
  free ensures (forall i#3: int :: 
    { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
    INTERNAL_le_boogie(0, i#3)
         && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType));
  ensures (forall i#3: int :: 
    { #_System._tuple#2._#Make2($Box(i#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType } 
    INTERNAL_le_boogie(0, i#3)
         && INTERNAL_lt_boogie(i#3, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(i#3), $Box(LitInt(1)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Qubits.CatPlusCH(this: ref, q#0: ref) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var offset#0: int where INTERNAL_le_boogie(0, offset#0);
  var ##e#1: int;
  var newH#0: ref
     where $Is(newH#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
       && $IsAlloc(newH#0, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
        $Heap);
  var $nw: ref;
  var i#4: int;
  var i#4#lo: int;
  var i#4#hi: int;
  var $PreLoopHeap$loop#0: Heap;
  var $w$loop#0: bool;
  var k#0: int;
  var k#2: int;
  var $rhs#0_0: DatatypeType;
  var $rhs#0_1: DatatypeType;
  var $rhs#0: DatatypeType;
  var $rhs#1: int;

    // AddMethodImpl: CatPlusCH, Impl$$_module.Qubits.CatPlusCH
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == this);
    $_reverifyPost := false;
    // ----- reveal statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(271,5)
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(271,16)
    // TrCallStmt: Before ProcessCallStmt
    // ProcessCallStmt: Make the call
    call Call$$Power2.__default.reveal__Pow2();
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(272,22)
    assume true;
    ##e#1 := read($Heap, this, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
    assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
    offset#0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card));
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(273,5)
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assume true;
    assert INTERNAL_mul_boogie(2, offset#0)
       == INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(274,34)
    assume true;
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assert 0
       <= INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
    havoc $nw;
    assume $nw != null
       && dtype($nw)
         == Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt));
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw)
       == INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    newH#0 := $nw;
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(275,5)
    if (INTERNAL_le_boogie(0, offset#0))
    {
        assert {:subsumption 0} newH#0 != null;
    }

    assume true;
    assert {:subsumption 0} INTERNAL_le_boogie(0, offset#0);
    assert {:subsumption 0} INTERNAL_le_boogie(offset#0, _System.array.Length(newH#0));
    assume INTERNAL_le_boogie(0, offset#0)
       && INTERNAL_le_boogie(offset#0, _System.array.Length(newH#0));
    // ----- for-loop statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(276,5)
    i#4#lo := LitInt(0);
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    i#4#hi := _module.Mode.dof(read($Heap, this, _module.Qubits.m));
    assert i#4#lo <= i#4#hi;
    i#4 := i#4#lo;
    $PreLoopHeap$loop#0 := $Heap;
    havoc $w$loop#0;
    while (true)
      free invariant i#4#lo <= i#4 && i#4 <= i#4#hi;
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> read($Heap, this, _module.Qubits.card)
           == read(old($Heap), this, _module.Qubits.card);
      free invariant $w$loop#0
         ==> 
        _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
         ==> _module.Qubits.Wf#canCall($Heap, this);
      invariant $w$loop#0 ==> _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, this)
         ==> _module.Qubits.Wf($Heap, this)
           || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
            _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
               ==> (var b#12 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
                _System.array.Length(b#12) == read($Heap, this, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, this)
         ==> _module.Qubits.Wf($Heap, this)
           || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
               ==> 
              _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
               ==> (var h#12 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
                _System.array.Length(h#12) == read($Heap, this, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, this)
         ==> _module.Qubits.Wf($Heap, this)
           || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
               ==> (var c#12 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
                (var dof#12 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#12, tmp#6))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, this)
         ==> _module.Qubits.Wf($Heap, this)
           || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
               ==> (var c#12 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
                (var dof#12 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#12, _System.array.Length(c#12)))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, this)
         ==> _module.Qubits.Wf($Heap, this)
           || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
               ==> (var c#12 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
                (var dof#12 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#12, 
                    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))));
      free invariant $w$loop#0
         ==> _module.Qubits.Wf#canCall($Heap, this)
           && 
          _module.Qubits.Wf($Heap, this)
           && (var tmp#6 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)); 
            (if _module.Mode.Nor_q(read($Heap, this, _module.Qubits.m))
               then (var b#13 := _module.Mode.b(read($Heap, this, _module.Qubits.m)); 
                _System.array.Length(b#13) == read($Heap, this, _module.Qubits.card))
               else (if _module.Mode.Had_q(read($Heap, this, _module.Qubits.m))
                 then (var h#13 := _module.Mode.h(read($Heap, this, _module.Qubits.m)); 
                  _System.array.Length(h#13) == read($Heap, this, _module.Qubits.card))
                 else (var c#13 := _module.Mode.c(read($Heap, this, _module.Qubits.m)); 
                  (var dof#13 := _module.Mode.dof(read($Heap, this, _module.Qubits.m)); 
                    INTERNAL_le_boogie(dof#13, tmp#6)
                       && INTERNAL_le_boogie(dof#13, _System.array.Length(c#13))
                       && INTERNAL_le_boogie(dof#13, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))))))));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> INTERNAL_le_boogie(0, i#4);
      invariant $w$loop#0
         ==> INTERNAL_le_boogie(i#4, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> INTERNAL_le_boogie(0, INTERNAL_add_boogie(i#4, offset#0));
      invariant $w$loop#0
         ==> INTERNAL_le_boogie(INTERNAL_add_boogie(i#4, offset#0), _System.array.Length(newH#0));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> _System.array.Length(newH#0)
           == INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> _module.Mode.c(read($Heap, this, _module.Qubits.m))
           == _module.Mode.c(read(old($Heap), this, _module.Qubits.m));
      free invariant $w$loop#0
         ==> (forall k#1: int :: 
          { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
            { $Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, i#4)
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType));
      invariant $w$loop#0
         ==> (forall k#1: int :: 
          { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
            { $Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, i#4)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))));
      free invariant $w$loop#0
         ==> (forall k#3: int :: 
          { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
            { $Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType } 
          INTERNAL_le_boogie(offset#0, k#3)
               && INTERNAL_lt_boogie(k#3, INTERNAL_add_boogie(i#4, offset#0))
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType));
      invariant $w$loop#0
         ==> (forall k#3: int :: 
          { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
            { $Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType } 
          INTERNAL_le_boogie(offset#0, k#3)
               && INTERNAL_lt_boogie(k#3, INTERNAL_add_boogie(i#4, offset#0))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(k#3), $Box(LitInt(1)))));
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && read(old($Heap), $o, alloc)
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o] || $o == this);
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
        { read($Heap, $o, $f) } 
        $o != null && read($PreLoopHeap$loop#0, $o, alloc)
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant true;
    {
        if (!$w$loop#0)
        {
            assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
            assume true;
            assume read($Heap, this, _module.Qubits.card)
               == read(old($Heap), this, _module.Qubits.card);
            if (_module.Mode.CH_q(read($Heap, this, _module.Qubits.m)))
            {
                // assume allocatedness for receiver argument to function
                assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
                assume _module.Qubits.Wf#canCall($Heap, this);
            }

            assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
               ==> _module.Qubits.Wf#canCall($Heap, this);
            assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
               && _module.Qubits.Wf($Heap, this);
            if (INTERNAL_le_boogie(0, i#4))
            {
                assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
            }

            assume true;
            assume INTERNAL_le_boogie(0, i#4)
               && INTERNAL_le_boogie(i#4, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
            if (INTERNAL_le_boogie(0, INTERNAL_add_boogie(i#4, offset#0)))
            {
                assert {:subsumption 0} newH#0 != null;
            }

            assume true;
            assume INTERNAL_le_boogie(0, INTERNAL_add_boogie(i#4, offset#0))
               && INTERNAL_le_boogie(INTERNAL_add_boogie(i#4, offset#0), _System.array.Length(newH#0));
            assert {:subsumption 0} newH#0 != null;
            assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
            assume true;
            assume _System.array.Length(newH#0)
               == INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
            assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
            assert $IsAlloc(this, Tclass._module.Qubits(), old($Heap));
            assert _module.Mode.CH_q(read(old($Heap), this, _module.Qubits.m));
            assert $IsAlloc(read(old($Heap), this, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
            assume true;
            assume _module.Mode.c(read($Heap, this, _module.Qubits.m))
               == _module.Mode.c(read(old($Heap), this, _module.Qubits.m));
            // Begin Comprehension WF check
            havoc k#0;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#0))
                {
                }

                if (INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, i#4))
                {
                    assert newH#0 != null;
                    assert {:subsumption 0} 0 <= k#0 && k#0 < _System.array.Length(newH#0);
                }
            }

            // End Comprehension WF check
            assume (forall k#1: int :: 
              { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
                { $Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType } 
              INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, i#4)
                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType));
            assume (forall k#1: int :: 
              { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
                { $Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType } 
              INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, i#4)
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))));
            // Begin Comprehension WF check
            havoc k#2;
            if (true)
            {
                if (INTERNAL_le_boogie(offset#0, k#2))
                {
                }

                if (INTERNAL_le_boogie(offset#0, k#2)
                   && INTERNAL_lt_boogie(k#2, INTERNAL_add_boogie(i#4, offset#0)))
                {
                    assert newH#0 != null;
                    assert {:subsumption 0} 0 <= k#2 && k#2 < _System.array.Length(newH#0);
                }
            }

            // End Comprehension WF check
            assume (forall k#3: int :: 
              { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
                { $Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType } 
              INTERNAL_le_boogie(offset#0, k#3)
                   && INTERNAL_lt_boogie(k#3, INTERNAL_add_boogie(i#4, offset#0))
                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType));
            assume (forall k#3: int :: 
              { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
                { $Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType } 
              INTERNAL_le_boogie(offset#0, k#3)
                   && INTERNAL_lt_boogie(k#3, INTERNAL_add_boogie(i#4, offset#0))
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(k#3), $Box(LitInt(1)))));
            assume false;
        }

        assume true;
        if (i#4 == i#4#hi)
        {
            break;
        }

        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(286,15)
        assert newH#0 != null;
        assert 0 <= i#4 && i#4 < _System.array.Length(newH#0);
        assume true;
        assert $_Frame[newH#0, IndexField(i#4)];
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#4
           && i#4 < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
        assume true;
        $rhs#0_0 := $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): DatatypeType;
        $Heap := update($Heap, newH#0, IndexField(i#4), $Box($rhs#0_0));
        assume $IsGoodHeap($Heap);
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(287,24)
        assert newH#0 != null;
        assert 0 <= INTERNAL_add_boogie(i#4, offset#0)
           && INTERNAL_add_boogie(i#4, offset#0) < _System.array.Length(newH#0);
        assume true;
        assert $_Frame[newH#0, IndexField(INTERNAL_add_boogie(i#4, offset#0))];
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
        assert 0 <= i#4
           && i#4 < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): DatatypeType);
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): DatatypeType);
        assert $Is(#_System._tuple#2._#Make2($Box(INTERNAL_add_boogie(offset#0, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): DatatypeType)): int)), 
            $Box(LitInt(1))), 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt));
        $rhs#0_1 := #_System._tuple#2._#Make2($Box(INTERNAL_add_boogie(offset#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#4))): DatatypeType)): int)), 
          $Box(LitInt(1)));
        $Heap := update($Heap, newH#0, IndexField(INTERNAL_add_boogie(i#4, offset#0)), $Box($rhs#0_1));
        assume $IsGoodHeap($Heap);
        i#4 := i#4 + 1;
        assume read($Heap, this, _module.Qubits.card)
             == read(old($Heap), this, _module.Qubits.card)
           ==> 
          _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
           ==> _module.Qubits.Wf#canCall($Heap, this)
             && (_module.Qubits.Wf($Heap, this)
               ==> 
              INTERNAL_le_boogie(0, i#4)
                 && INTERNAL_le_boogie(i#4, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
               ==> 
              INTERNAL_le_boogie(0, INTERNAL_add_boogie(i#4, offset#0))
                 && INTERNAL_le_boogie(INTERNAL_add_boogie(i#4, offset#0), _System.array.Length(newH#0))
               ==> 
              _System.array.Length(newH#0)
                 == INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))
               ==> 
              _module.Mode.c(read($Heap, this, _module.Qubits.m))
                 == _module.Mode.c(read(old($Heap), this, _module.Qubits.m))
               ==> (forall k#1: int :: 
                  { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
                    { $Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType } 
                  INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, i#4)
                     ==> $IsA#_System.Tuple2($Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType))
                 && ((forall k#1: int :: 
                    { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
                      { $Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType } 
                    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, i#4)
                       ==> _System.Tuple2#Equal($Unbox(read($Heap, newH#0, IndexField(k#1))): DatatypeType, 
                        #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))))
                   ==> (forall k#3: int :: 
                    { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
                      { $Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType } 
                    INTERNAL_le_boogie(offset#0, k#3)
                         && INTERNAL_lt_boogie(k#3, INTERNAL_add_boogie(i#4, offset#0))
                       ==> $IsA#_System.Tuple2($Unbox(read($Heap, newH#0, IndexField(k#3))): DatatypeType))));
    }

    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(289,7)
    assume true;
    assert $_Frame[this, _module.Qubits.m];
    assert $Is(INTERNAL_mul_boogie(2, offset#0), Tclass._System.nat());
    assume true;
    $rhs#0 := #_module.Mode.CH(INTERNAL_mul_boogie(2, offset#0), newH#0);
    $Heap := update($Heap, this, _module.Qubits.m, $rhs#0);
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(290,10)
    assume true;
    assert $_Frame[this, _module.Qubits.card];
    assume true;
    assert $Is(INTERNAL_add_boogie(read($Heap, this, _module.Qubits.card), 1), 
      Tclass._System.nat());
    $rhs#1 := INTERNAL_add_boogie(read($Heap, this, _module.Qubits.card), 1);
    $Heap := update($Heap, this, _module.Qubits.card, $rhs#1);
    assume $IsGoodHeap($Heap);
}



// function declaration for _module.Qubits.PSumMod
function _module.Qubits.PSumMod($heap: Heap, this: ref, l#0: int, r#0: int, a#0: int, N#0: int) : bool;

function _module.Qubits.PSumMod#canCall($heap: Heap, this: ref, l#0: int, r#0: int, a#0: int, N#0: int) : bool;

// frame axiom for _module.Qubits.PSumMod
axiom (forall $h0: Heap, $h1: Heap, this: ref, l#0: int, r#0: int, a#0: int, N#0: int :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Qubits.PSumMod($h1, this, l#0, r#0, a#0, N#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Qubits())
       && (_module.Qubits.PSumMod#canCall($h0, this, l#0, r#0, a#0, N#0)
         || (
          INTERNAL_le_boogie(0, l#0)
           && INTERNAL_le_boogie(0, r#0)
           && INTERNAL_le_boogie(0, a#0)
           && INTERNAL_le_boogie(0, N#0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && ($o == this || $o == _module.Mode.c(read($h0, this, _module.Qubits.m)))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Qubits.PSumMod($h0, this, l#0, r#0, a#0, N#0)
       == _module.Qubits.PSumMod($h1, this, l#0, r#0, a#0, N#0));

// consequence axiom for _module.Qubits.PSumMod
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref, l#0: int, r#0: int, a#0: int, N#0: int :: 
    { _module.Qubits.PSumMod($Heap, this, l#0, r#0, a#0, N#0) } 
    _module.Qubits.PSumMod#canCall($Heap, this, l#0, r#0, a#0, N#0)
         || (1 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Qubits())
           && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
           && INTERNAL_le_boogie(0, l#0)
           && INTERNAL_le_boogie(0, r#0)
           && INTERNAL_le_boogie(0, a#0)
           && INTERNAL_le_boogie(0, N#0)
           && 
          INTERNAL_gt_boogie(N#0, 0)
           && _module.Qubits.Wf($Heap, this)
           && _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
           && 
          INTERNAL_le_boogie(0, l#0)
           && INTERNAL_lt_boogie(l#0, r#0)
           && INTERNAL_le_boogie(r#0, _module.Mode.dof(read($Heap, this, _module.Qubits.m))))
       ==> true);

function _module.Qubits.PSumMod#requires(Heap, ref, int, int, int, int) : bool;

// #requires axiom for _module.Qubits.PSumMod
axiom (forall $Heap: Heap, this: ref, l#0: int, r#0: int, a#0: int, N#0: int :: 
  { _module.Qubits.PSumMod#requires($Heap, this, l#0, r#0, a#0, N#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Qubits())
       && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
       && INTERNAL_le_boogie(0, l#0)
       && INTERNAL_le_boogie(0, r#0)
       && INTERNAL_le_boogie(0, a#0)
       && INTERNAL_le_boogie(0, N#0)
     ==> _module.Qubits.PSumMod#requires($Heap, this, l#0, r#0, a#0, N#0)
       == (
        INTERNAL_gt_boogie(N#0, 0)
         && _module.Qubits.Wf($Heap, this)
         && _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
         && 
        INTERNAL_le_boogie(0, l#0)
         && INTERNAL_lt_boogie(l#0, r#0)
         && INTERNAL_le_boogie(r#0, _module.Mode.dof(read($Heap, this, _module.Qubits.m)))));

// definition axiom for _module.Qubits.PSumMod (revealed)
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref, l#0: int, r#0: int, a#0: int, N#0: int :: 
    { _module.Qubits.PSumMod($Heap, this, l#0, r#0, a#0, N#0), $IsGoodHeap($Heap) } 
    _module.Qubits.PSumMod#canCall($Heap, this, l#0, r#0, a#0, N#0)
         || (1 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Qubits())
           && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
           && INTERNAL_le_boogie(0, l#0)
           && INTERNAL_le_boogie(0, r#0)
           && INTERNAL_le_boogie(0, a#0)
           && INTERNAL_le_boogie(0, N#0)
           && 
          INTERNAL_gt_boogie(N#0, 0)
           && _module.Qubits.Wf($Heap, this)
           && _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
           && 
          INTERNAL_le_boogie(0, l#0)
           && INTERNAL_lt_boogie(l#0, r#0)
           && INTERNAL_le_boogie(r#0, _module.Mode.dof(read($Heap, this, _module.Qubits.m))))
       ==> (forall k#0: int :: 
          { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#0))): DatatypeType } 
            { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0) } 
          INTERNAL_le_boogie(l#0, k#0) && INTERNAL_lt_boogie(k#0, r#0)
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#0))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, k#0))
         && _module.Qubits.PSumMod($Heap, this, l#0, r#0, a#0, N#0)
           == (forall k#0: int :: 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#0))): DatatypeType } 
              { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0) } 
            INTERNAL_le_boogie(l#0, k#0) && INTERNAL_lt_boogie(k#0, r#0)
               ==> _System.Tuple2#Equal(#_System._tuple#2._#Make2($Box(k#0), 
                  $Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0), N#0))), 
                $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#0))): DatatypeType)));

procedure CheckWellformed$$_module.Qubits.PSumMod(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap), 
    l#0: int where INTERNAL_le_boogie(0, l#0), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.PSumMod(this: ref, l#0: int, r#0: int, a#0: int, N#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var k#1: int;
  var ##b#0: int;
  var ##e#0: int;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    // AddWellformednessCheck for function PSumMod
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == this || $o == _module.Mode.c(read($Heap, this, _module.Qubits.m)));
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    assume INTERNAL_gt_boogie(N#0, 0);
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) && $o == this ==> $_Frame[$o, $f]);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    b$reqreads#1 := $_Frame[this, _module.Qubits.m];
    assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    if (INTERNAL_le_boogie(0, l#0))
    {
    }

    if (INTERNAL_le_boogie(0, l#0) && INTERNAL_lt_boogie(l#0, r#0))
    {
        b$reqreads#2 := $_Frame[this, _module.Qubits.m];
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    }

    assume INTERNAL_le_boogie(0, l#0)
       && INTERNAL_lt_boogie(l#0, r#0)
       && INTERNAL_le_boogie(r#0, _module.Mode.dof(read($Heap, this, _module.Qubits.m)));
    assert b$reqreads#0;
    assert b$reqreads#1;
    assert b$reqreads#2;
    b$reqreads#3 := $_Frame[this, _module.Qubits.m];
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assert b$reqreads#3;
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc)
             ==> $o == this || $o == _module.Mode.c(read($Heap, this, _module.Qubits.m)));
        // Begin Comprehension WF check
        havoc k#1;
        if (true)
        {
            if (INTERNAL_le_boogie(l#0, k#1))
            {
            }

            if (INTERNAL_le_boogie(l#0, k#1) && INTERNAL_lt_boogie(k#1, r#0))
            {
                ##b#0 := a#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##b#0, TInt, $Heap);
                assert $Is(k#1, Tclass._System.nat());
                ##e#0 := k#1;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
                assume Power.__default.Pow#canCall(a#0, k#1);
                assert N#0 != 0;
                b$reqreads#4 := $_Frame[this, _module.Qubits.m];
                assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
                assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
                assert 0 <= k#1
                   && k#1 < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
                b$reqreads#5 := $_Frame[_module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#1)];
            }
        }

        // End Comprehension WF check
        assume _module.Qubits.PSumMod($Heap, this, l#0, r#0, a#0, N#0)
           == (forall k#2: int :: 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#2))): DatatypeType } 
              { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#2) } 
            INTERNAL_le_boogie(l#0, k#2) && INTERNAL_lt_boogie(k#2, r#0)
               ==> _System.Tuple2#Equal(#_System._tuple#2._#Make2($Box(k#2), 
                  $Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#2), N#0))), 
                $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#2))): DatatypeType));
        assume (forall k#2: int :: 
          { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#2))): DatatypeType } 
            { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#2) } 
          INTERNAL_le_boogie(l#0, k#2) && INTERNAL_lt_boogie(k#2, r#0)
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(k#2))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, k#2));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Qubits.PSumMod($Heap, this, l#0, r#0, a#0, N#0), TBool);
        assert b$reqreads#4;
        assert b$reqreads#5;
    }
}



// function declaration for _module.Qubits.Saturated
function _module.Qubits.Saturated($heap: Heap, this: ref) : bool;

function _module.Qubits.Saturated#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Qubits.Saturated
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Qubits.Saturated($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Qubits())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && ($o == this || $o == _module.Mode.c(read($h0, this, _module.Qubits.m)))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Qubits.Saturated($h0, this) == _module.Qubits.Saturated($h1, this));

// consequence axiom for _module.Qubits.Saturated
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Qubits.Saturated($Heap, this) } 
    _module.Qubits.Saturated#canCall($Heap, this)
         || (1 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Qubits())
           && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
           && 
          _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
           && _module.Qubits.Wf($Heap, this))
       ==> true);

function _module.Qubits.Saturated#requires(Heap, ref) : bool;

// #requires axiom for _module.Qubits.Saturated
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Qubits.Saturated#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Qubits())
       && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
     ==> _module.Qubits.Saturated#requires($Heap, this)
       == (_module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
         && _module.Qubits.Wf($Heap, this)));

// definition axiom for _module.Qubits.Saturated (revealed)
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Qubits.Saturated($Heap, this), $IsGoodHeap($Heap) } 
    _module.Qubits.Saturated#canCall($Heap, this)
         || (1 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Qubits())
           && $IsAlloc(this, Tclass._module.Qubits(), $Heap)
           && 
          _module.Mode.CH_q(read($Heap, this, _module.Qubits.m))
           && _module.Qubits.Wf($Heap, this))
       ==> Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card))
         && (_module.Mode.dof(read($Heap, this, _module.Qubits.m))
             == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))
           ==> (forall i#0: int :: 
            { #_System._tuple#2._#Make2($Box(i#0), $Box(1)) } 
              { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): DatatypeType } 
            INTERNAL_le_boogie(0, i#0)
                 && INTERNAL_lt_boogie(i#0, _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m))))
               ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): DatatypeType)))
         && _module.Qubits.Saturated($Heap, this)
           == (_module.Mode.dof(read($Heap, this, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))
             && (forall i#0: int :: 
              { #_System._tuple#2._#Make2($Box(i#0), $Box(1)) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): DatatypeType } 
              INTERNAL_le_boogie(0, i#0)
                   && INTERNAL_lt_boogie(i#0, _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m))))
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#0))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(i#0), $Box(LitInt(1)))))));

procedure CheckWellformed$$_module.Qubits.Saturated(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Qubits())
         && $IsAlloc(this, Tclass._module.Qubits(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Qubits.Saturated(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var ##e#0: int;
  var i#1: int;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;

    // AddWellformednessCheck for function Saturated
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == this || $o == _module.Mode.c(read($Heap, this, _module.Qubits.m)));
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    b$reqreads#0 := $_Frame[this, _module.Qubits.m];
    assume _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(this, Tclass._module.Qubits?(), $Heap);
    b$reqreads#1 := (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) && $o == this ==> $_Frame[$o, $f]);
    assume _module.Qubits.Wf#canCall($Heap, this);
    assume _module.Qubits.Wf($Heap, this);
    assert b$reqreads#0;
    assert b$reqreads#1;
    b$reqreads#2 := $_Frame[this, _module.Qubits.m];
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    assert b$reqreads#2;
    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc)
             ==> $o == this || $o == _module.Mode.c(read($Heap, this, _module.Qubits.m)));
        b$reqreads#3 := $_Frame[this, _module.Qubits.m];
        assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
        b$reqreads#4 := $_Frame[this, _module.Qubits.card];
        ##e#0 := read($Heap, this, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card));
        if (_module.Mode.dof(read($Heap, this, _module.Qubits.m))
           == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card)))
        {
            // Begin Comprehension WF check
            havoc i#1;
            if (true)
            {
                if (INTERNAL_le_boogie(0, i#1))
                {
                    b$reqreads#5 := $_Frame[this, _module.Qubits.m];
                    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
                    assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
                }

                if (INTERNAL_le_boogie(0, i#1)
                   && INTERNAL_lt_boogie(i#1, _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)))))
                {
                    b$reqreads#6 := $_Frame[this, _module.Qubits.m];
                    assert _module.Mode.CH_q(read($Heap, this, _module.Qubits.m));
                    assert _module.Mode.c(read($Heap, this, _module.Qubits.m)) != null;
                    assert 0 <= i#1
                       && i#1 < _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m)));
                    b$reqreads#7 := $_Frame[_module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#1)];
                }
            }

            // End Comprehension WF check
        }

        assume _module.Qubits.Saturated($Heap, this)
           == (_module.Mode.dof(read($Heap, this, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))
             && (forall i#2: int :: 
              { #_System._tuple#2._#Make2($Box(i#2), $Box(1)) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): DatatypeType } 
              INTERNAL_le_boogie(0, i#2)
                   && INTERNAL_lt_boogie(i#2, _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m))))
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(i#2), $Box(LitInt(1))))));
        assume Power2.__default.Pow2#canCall(read($Heap, this, _module.Qubits.card))
           && (_module.Mode.dof(read($Heap, this, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, this, _module.Qubits.card))
             ==> (forall i#2: int :: 
              { #_System._tuple#2._#Make2($Box(i#2), $Box(1)) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): DatatypeType } 
              INTERNAL_le_boogie(0, i#2)
                   && INTERNAL_lt_boogie(i#2, _System.array.Length(_module.Mode.c(read($Heap, this, _module.Qubits.m))))
                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, this, _module.Qubits.m)), IndexField(i#2))): DatatypeType)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Qubits.Saturated($Heap, this), TBool);
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
    }
}



// _module.Qubits: non-null type $Is
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Qubits()) } 
  $Is(c#0, Tclass._module.Qubits())
     <==> $Is(c#0, Tclass._module.Qubits?()) && c#0 != null);

// _module.Qubits: non-null type $IsAlloc
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Qubits(), $h) } 
  $IsAlloc(c#0, Tclass._module.Qubits(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Qubits?(), $h));

const unique class._module.__default: ClassName;

function Tclass._module.__default() : Ty;

const unique Tagclass._module.__default: TyTag;

// Tclass._module.__default Tag
axiom Tag(Tclass._module.__default()) == Tagclass._module.__default
   && TagFamily(Tclass._module.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass._module.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.__default()) } 
  $IsBox(bx, Tclass._module.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.__default()) } 
  $Is($o, Tclass._module.__default())
     <==> $o == null || dtype($o) == Tclass._module.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.__default(), $h) } 
  $IsAlloc($o, Tclass._module.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for _module._default.SumFrom
function _module.__default.SumFrom($ly: LayerType, $heap: Heap, a#0: ref, i#0: int) : int;

function _module.__default.SumFrom#canCall($heap: Heap, a#0: ref, i#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int :: 
  { _module.__default.SumFrom($LS($ly), $Heap, a#0, i#0) } 
  _module.__default.SumFrom($LS($ly), $Heap, a#0, i#0)
     == _module.__default.SumFrom($ly, $Heap, a#0, i#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int :: 
  { _module.__default.SumFrom(AsFuelBottom($ly), $Heap, a#0, i#0) } 
  _module.__default.SumFrom($ly, $Heap, a#0, i#0)
     == _module.__default.SumFrom($LZ, $Heap, a#0, i#0));

// frame axiom for _module.__default.SumFrom
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, a#0: ref, i#0: int :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.__default.SumFrom($ly, $h1, a#0, i#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && (_module.__default.SumFrom#canCall($h0, a#0, i#0)
         || ($Is(a#0, Tclass._System.array(Tclass._System.nat()))
           && INTERNAL_le_boogie(0, i#0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && $o == a#0 ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.__default.SumFrom($ly, $h0, a#0, i#0)
       == _module.__default.SumFrom($ly, $h1, a#0, i#0));

// consequence axiom for _module.__default.SumFrom
axiom 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int :: 
    { _module.__default.SumFrom($ly, $Heap, a#0, i#0) } 
    _module.__default.SumFrom#canCall($Heap, a#0, i#0)
         || (1 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(a#0, Tclass._System.array(Tclass._System.nat()))
           && INTERNAL_le_boogie(0, i#0)
           && 
          INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(i#0, _System.array.Length(a#0)))
       ==> INTERNAL_le_boogie(0, _module.__default.SumFrom($ly, $Heap, a#0, i#0)));

function _module.__default.SumFrom#requires(LayerType, Heap, ref, int) : bool;

// #requires axiom for _module.__default.SumFrom
axiom (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int :: 
  { _module.__default.SumFrom#requires($ly, $Heap, a#0, i#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && $Is(a#0, Tclass._System.array(Tclass._System.nat()))
       && INTERNAL_le_boogie(0, i#0)
     ==> _module.__default.SumFrom#requires($ly, $Heap, a#0, i#0)
       == (INTERNAL_le_boogie(0, i#0)
         && INTERNAL_le_boogie(i#0, _System.array.Length(a#0))));

// definition axiom for _module.__default.SumFrom (revealed)
axiom 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int :: 
    { _module.__default.SumFrom($LS($ly), $Heap, a#0, i#0), $IsGoodHeap($Heap) } 
    _module.__default.SumFrom#canCall($Heap, a#0, i#0)
         || (1 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(a#0, Tclass._System.array(Tclass._System.nat()))
           && INTERNAL_le_boogie(0, i#0)
           && 
          INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(i#0, _System.array.Length(a#0)))
       ==> (i#0 != _System.array.Length(a#0)
           ==> _module.__default.SumFrom#canCall($Heap, a#0, INTERNAL_add_boogie(i#0, 1)))
         && _module.__default.SumFrom($LS($ly), $Heap, a#0, i#0)
           == (if i#0 == _System.array.Length(a#0)
             then 0
             else INTERNAL_add_boogie($Unbox(read($Heap, a#0, IndexField(i#0))): int, 
              _module.__default.SumFrom($ly, $Heap, a#0, INTERNAL_add_boogie(i#0, 1)))));

procedure CheckWellformed$$_module.__default.SumFrom(a#0: ref where $Is(a#0, Tclass._System.array(Tclass._System.nat())), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.SumFrom(a#0: ref, i#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##a#0: ref;
  var ##i#0: int;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    // AddWellformednessCheck for function SumFrom
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == a#0);
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    if (INTERNAL_le_boogie(0, i#0))
    {
        assert a#0 != null;
    }

    assume INTERNAL_le_boogie(0, i#0) && INTERNAL_le_boogie(i#0, _System.array.Length(a#0));
    assert a#0 != null;
    if (*)
    {
        assume INTERNAL_le_boogie(0, _module.__default.SumFrom($LS($LZ), $Heap, a#0, i#0));
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc) ==> $o == a#0);
        assert a#0 != null;
        if (i#0 == _System.array.Length(a#0))
        {
            assert $Is(LitInt(0), Tclass._System.nat());
            assume _module.__default.SumFrom($LS($LZ), $Heap, a#0, i#0) == LitInt(0);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.SumFrom($LS($LZ), $Heap, a#0, i#0), Tclass._System.nat());
        }
        else
        {
            assert a#0 != null;
            assert 0 <= i#0 && i#0 < _System.array.Length(a#0);
            b$reqreads#0 := $_Frame[a#0, IndexField(i#0)];
            ##a#0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#0, Tclass._System.array(Tclass._System.nat()), $Heap);
            assert $Is(INTERNAL_add_boogie(i#0, 1), Tclass._System.nat());
            ##i#0 := INTERNAL_add_boogie(i#0, 1);
            // assume allocatedness for argument to function
            assume $IsAlloc(##i#0, Tclass._System.nat(), $Heap);
            assert {:subsumption 0} INTERNAL_le_boogie(0, ##i#0);
            assert {:subsumption 0} INTERNAL_le_boogie(##i#0, _System.array.Length(##a#0));
            assume INTERNAL_le_boogie(0, ##i#0)
               && INTERNAL_le_boogie(##i#0, _System.array.Length(##a#0));
            b$reqreads#1 := (forall<alpha> $o: ref, $f: Field alpha :: 
              $o != null && read($Heap, $o, alloc) && $o == ##a#0 ==> $_Frame[$o, $f]);
            assert 0 <= INTERNAL_sub_boogie(_System.array.Length(a#0), i#0)
               || INTERNAL_sub_boogie(_System.array.Length(##a#0), ##i#0)
                 == INTERNAL_sub_boogie(_System.array.Length(a#0), i#0);
            assert INTERNAL_sub_boogie(_System.array.Length(##a#0), ##i#0)
               < INTERNAL_sub_boogie(_System.array.Length(a#0), i#0);
            assume _module.__default.SumFrom#canCall($Heap, a#0, INTERNAL_add_boogie(i#0, 1));
            assert $Is(INTERNAL_add_boogie($Unbox(read($Heap, a#0, IndexField(i#0))): int, 
                _module.__default.SumFrom($LS($LZ), $Heap, a#0, INTERNAL_add_boogie(i#0, 1))), 
              Tclass._System.nat());
            assume _module.__default.SumFrom($LS($LZ), $Heap, a#0, i#0)
               == INTERNAL_add_boogie($Unbox(read($Heap, a#0, IndexField(i#0))): int, 
                _module.__default.SumFrom($LS($LZ), $Heap, a#0, INTERNAL_add_boogie(i#0, 1)));
            assume _module.__default.SumFrom#canCall($Heap, a#0, INTERNAL_add_boogie(i#0, 1));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.SumFrom($LS($LZ), $Heap, a#0, i#0), Tclass._System.nat());
        }

        assert b$reqreads#0;
        assert b$reqreads#1;
    }
}



procedure CheckWellformed$$_module.__default.LemmaLePow2Covariant(n1#0: int where INTERNAL_le_boogie(0, n1#0), 
    n2#0: int where INTERNAL_le_boogie(0, n2#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$_module.__default.LemmaLePow2Covariant(n1#0: int where INTERNAL_le_boogie(0, n1#0), 
    n2#0: int where INTERNAL_le_boogie(0, n2#0));
  // user-defined preconditions
  requires INTERNAL_le_boogie(n1#0, n2#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Power2.__default.Pow2#canCall(n1#0) && Power2.__default.Pow2#canCall(n2#0);
  ensures INTERNAL_le_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n1#0), 
    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n2#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure Impl$$_module.__default.LemmaLePow2Covariant(n1#0: int where INTERNAL_le_boogie(0, n1#0), 
    n2#0: int where INTERNAL_le_boogie(0, n2#0))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_le_boogie(n1#0, n2#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Power2.__default.Pow2#canCall(n1#0) && Power2.__default.Pow2#canCall(n2#0);
  ensures INTERNAL_le_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n1#0), 
    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n2#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation Impl$$_module.__default.LemmaLePow2Covariant(n1#0: int, n2#0: int) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##e#0_0: int;
  var n1##1_0: int;
  var n2##1_0: int;

    // AddMethodImpl: LemmaLePow2Covariant, Impl$$_module.__default.LemmaLePow2Covariant
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $_reverifyPost := false;
    // ----- reveal statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(28,3)
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(28,14)
    // TrCallStmt: Before ProcessCallStmt
    // ProcessCallStmt: Make the call
    call Call$$Power2.__default.reveal__Pow2();
    // TrCallStmt: After ProcessCallStmt
    // ----- if statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(29,3)
    assume true;
    if (n1#0 == LitInt(0))
    {
        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(31,5)
        ##e#0_0 := n2#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0_0, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(n2#0);
        assume Power2.__default.Pow2#canCall(n2#0);
        assert {:subsumption 0} INTERNAL_le_boogie(0, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n2#0));
        assume INTERNAL_le_boogie(0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n2#0));
    }
    else
    {
        // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(35,25)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert $Is(INTERNAL_sub_boogie(n1#0, 1), Tclass._System.nat());
        n1##1_0 := INTERNAL_sub_boogie(n1#0, 1);
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert $Is(INTERNAL_sub_boogie(n2#0, 1), Tclass._System.nat());
        n2##1_0 := INTERNAL_sub_boogie(n2#0, 1);
        assert 0 <= INTERNAL_add_boogie(n1#0, n2#0)
           || INTERNAL_add_boogie(n1##1_0, n2##1_0) == INTERNAL_add_boogie(n1#0, n2#0);
        assert INTERNAL_add_boogie(n1##1_0, n2##1_0) < INTERNAL_add_boogie(n1#0, n2#0);
        // ProcessCallStmt: Make the call
        call Call$$_module.__default.LemmaLePow2Covariant(n1##1_0, n2##1_0);
        // TrCallStmt: After ProcessCallStmt
    }
}



procedure CheckWellformed$$_module.__default.LemmaNLePow2N(n#0: int where INTERNAL_le_boogie(0, n#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$_module.__default.LemmaNLePow2N(n#0: int where INTERNAL_le_boogie(0, n#0));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Power2.__default.Pow2#canCall(n#0);
  ensures INTERNAL_le_boogie(n#0, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure Impl$$_module.__default.LemmaNLePow2N(n#0: int where INTERNAL_le_boogie(0, n#0)) returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Power2.__default.Pow2#canCall(n#0);
  ensures INTERNAL_le_boogie(n#0, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation Impl$$_module.__default.LemmaNLePow2N(n#0: int) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##e#0_0: int;
  var ##e#1_0_0: int;
  var n##1_1_0: int;
  var ##e#1_1_0: int;
  var ##e#1_1_1: int;

    // AddMethodImpl: LemmaNLePow2N, Impl$$_module.__default.LemmaNLePow2N
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $_reverifyPost := false;
    // ----- reveal statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(42,3)
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(42,14)
    // TrCallStmt: Before ProcessCallStmt
    // ProcessCallStmt: Make the call
    call Call$$Power2.__default.reveal__Pow2();
    // TrCallStmt: After ProcessCallStmt
    // ----- if statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(44,3)
    assume true;
    if (n#0 == LitInt(0))
    {
        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(45,5)
        assert $Is(LitInt(0), Tclass._System.nat());
        ##e#0_0 := LitInt(0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0_0, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(LitInt(0));
        assume Power2.__default.Pow2#canCall(LitInt(0));
        assert {:subsumption 0} INTERNAL_le_boogie(0, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, LitInt(0)));
        assume INTERNAL_le_boogie(0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, LitInt(0)));
    }
    else
    {
        // ----- if statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(46,10)
        assume true;
        if (n#0 == LitInt(1))
        {
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(47,5)
            assert $Is(LitInt(1), Tclass._System.nat());
            ##e#1_0_0 := LitInt(1);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_0_0, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(LitInt(1));
            assume Power2.__default.Pow2#canCall(LitInt(1));
            assert {:subsumption 0} INTERNAL_le_boogie(1, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, LitInt(1)));
            assume INTERNAL_le_boogie(1, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, LitInt(1)));
        }
        else
        {
            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(49,18)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert $Is(INTERNAL_sub_boogie(n#0, 1), Tclass._System.nat());
            n##1_1_0 := INTERNAL_sub_boogie(n#0, 1);
            assert 0 <= n#0 || n##1_1_0 == n#0;
            assert n##1_1_0 < n#0;
            // ProcessCallStmt: Make the call
            call Call$$_module.__default.LemmaNLePow2N(n##1_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(50,5)
            assert $Is(INTERNAL_sub_boogie(n#0, 1), Tclass._System.nat());
            ##e#1_1_0 := INTERNAL_sub_boogie(n#0, 1);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_1_0, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(INTERNAL_sub_boogie(n#0, 1));
            assume Power2.__default.Pow2#canCall(INTERNAL_sub_boogie(n#0, 1));
            assert {:subsumption 0} INTERNAL_le_boogie(INTERNAL_sub_boogie(n#0, 1), 
              Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, INTERNAL_sub_boogie(n#0, 1)));
            assume INTERNAL_le_boogie(INTERNAL_sub_boogie(n#0, 1), 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, INTERNAL_sub_boogie(n#0, 1)));
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(51,5)
            ##e#1_1_1 := n#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_1_1, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(n#0);
            assume Power2.__default.Pow2#canCall(n#0);
            assert {:subsumption 0} INTERNAL_le_boogie(n#0, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0));
            assume INTERNAL_le_boogie(n#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0));
        }
    }
}



// function declaration for _module._default.ShorOracle
function _module.__default.ShorOracle(c#0: DatatypeType, i#0: int, a#0: int, N#0: int) : DatatypeType;

function _module.__default.ShorOracle#canCall(c#0: DatatypeType, i#0: int, a#0: int, N#0: int) : bool;

// consequence axiom for _module.__default.ShorOracle
axiom 1 <= $FunctionContextHeight
   ==> (forall c#0: DatatypeType, i#0: int, a#0: int, N#0: int :: 
    { _module.__default.ShorOracle(c#0, i#0, a#0, N#0) } 
    _module.__default.ShorOracle#canCall(c#0, i#0, a#0, N#0)
         || (1 != $FunctionContextHeight
           && 
          $Is(c#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt))
           && INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(0, a#0)
           && INTERNAL_le_boogie(0, N#0)
           && INTERNAL_gt_boogie(N#0, 0))
       ==> $Is(_module.__default.ShorOracle(c#0, i#0, a#0, N#0), 
        Tclass._System.Tuple2(Tclass._System.nat(), TInt)));

function _module.__default.ShorOracle#requires(DatatypeType, int, int, int) : bool;

// #requires axiom for _module.__default.ShorOracle
axiom (forall c#0: DatatypeType, i#0: int, a#0: int, N#0: int :: 
  { _module.__default.ShorOracle#requires(c#0, i#0, a#0, N#0) } 
  $Is(c#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt))
       && INTERNAL_le_boogie(0, i#0)
       && INTERNAL_le_boogie(0, a#0)
       && INTERNAL_le_boogie(0, N#0)
     ==> _module.__default.ShorOracle#requires(c#0, i#0, a#0, N#0)
       == INTERNAL_gt_boogie(N#0, 0));

// definition axiom for _module.__default.ShorOracle (revealed)
axiom 1 <= $FunctionContextHeight
   ==> (forall c#0: DatatypeType, i#0: int, a#0: int, N#0: int :: 
    { _module.__default.ShorOracle(c#0, i#0, a#0, N#0) } 
    _module.__default.ShorOracle#canCall(c#0, i#0, a#0, N#0)
         || (1 != $FunctionContextHeight
           && 
          $Is(c#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt))
           && INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(0, a#0)
           && INTERNAL_le_boogie(0, N#0)
           && INTERNAL_gt_boogie(N#0, 0))
       ==> Power2.__default.Pow2#canCall(i#0)
         && Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0))
         && _System.Tuple2.___hMake2_q(c#0)
         && _System.Tuple2.___hMake2_q(c#0)
         && _module.__default.ShorOracle(c#0, i#0, a#0, N#0)
           == #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0(c#0)): int), 
                N#0)), 
            _System.Tuple2._1(c#0)));

// definition axiom for _module.__default.ShorOracle for all literals (revealed)
axiom 1 <= $FunctionContextHeight
   ==> (forall c#0: DatatypeType, i#0: int, a#0: int, N#0: int :: 
    {:weight 3} { _module.__default.ShorOracle(Lit(c#0), LitInt(i#0), LitInt(a#0), LitInt(N#0)) } 
    _module.__default.ShorOracle#canCall(Lit(c#0), LitInt(i#0), LitInt(a#0), LitInt(N#0))
         || (1 != $FunctionContextHeight
           && 
          $Is(c#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt))
           && INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(0, a#0)
           && INTERNAL_le_boogie(0, N#0)
           && Lit(INTERNAL_gt_boogie(N#0, 0)))
       ==> Power2.__default.Pow2#canCall(LitInt(i#0))
         && Power.__default.Pow#canCall(LitInt(a#0), Power2.__default.Pow2(StartFuel_Power2._default.Pow2, LitInt(i#0)))
         && _System.Tuple2.___hMake2_q(Lit(c#0))
         && _System.Tuple2.___hMake2_q(Lit(c#0))
         && _module.__default.ShorOracle(Lit(c#0), LitInt(i#0), LitInt(a#0), LitInt(N#0))
           == #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    LitInt(a#0), 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, LitInt(i#0))), 
                  $Unbox(_System.Tuple2._0(Lit(c#0))): int), 
                N#0)), 
            $Box(LitInt($Unbox(_System.Tuple2._1(Lit(c#0))): int))));

procedure CheckWellformed$$_module.__default.ShorOracle(c#0: DatatypeType
       where $Is(c#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
    i#0: int where INTERNAL_le_boogie(0, i#0), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.ShorOracle(c#0: DatatypeType, i#0: int, a#0: int, N#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##e#0: int;
  var ##b#0: int;
  var ##e#1: int;


    // AddWellformednessCheck for function ShorOracle
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    assume INTERNAL_gt_boogie(N#0, 0);
    if (*)
    {
        assume $Is(_module.__default.ShorOracle(c#0, i#0, a#0, N#0), 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt));
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc) ==> false);
        ##e#0 := i#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(i#0);
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        ##e#1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0));
        assume _System.Tuple2.___hMake2_q(c#0);
        assert N#0 != 0;
        assume _System.Tuple2.___hMake2_q(c#0);
        assert $Is(#_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0(c#0)): int), 
                N#0)), 
            _System.Tuple2._1(c#0)), 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt));
        assume _module.__default.ShorOracle(c#0, i#0, a#0, N#0)
           == #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0(c#0)): int), 
                N#0)), 
            _System.Tuple2._1(c#0));
        assume Power2.__default.Pow2#canCall(i#0)
           && Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0))
           && _System.Tuple2.___hMake2_q(c#0)
           && _System.Tuple2.___hMake2_q(c#0);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.ShorOracle(c#0, i#0, a#0, N#0), 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt));
    }
}



procedure CheckWellformed$$_module.__default.ControlledOracle(x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    i#0: int where INTERNAL_le_boogie(0, i#0), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0))
   returns (oldy#0: ref
       where $Is(oldy#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(oldy#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.ControlledOracle(x#0: ref, y#0: ref, i#0: int, a#0: int, N#0: int) returns (oldy#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##e#0: int;
  var i#1: int;
  var j#0: int;
  var ##e#1: int;
  var ##b#0: int;
  var ##e#2: int;

    // AddMethodImpl: ControlledOracle, CheckWellformed$$_module.__default.ControlledOracle
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == y#0);
    assume INTERNAL_gt_boogie(N#0, 0);
    assert y#0 != null;
    assume INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
    assert x#0 != null;
    assume _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
    assert y#0 != null;
    assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert y#0 != null;
    assert $Is(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1), 
      Tclass._System.nat());
    ##e#0 := INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1));
    assume INTERNAL_le_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), 
      Power2.__default.Pow2(StartFuel_Power2._default.Pow2, 
        INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1)));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o] || $o == y#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc oldy#0;
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    assert y#0 != null;
    assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert y#0 != null;
    assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
    assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
    assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
    assume _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
       == INTERNAL_mul_boogie(2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)));
    assert y#0 != null;
    assert y#0 != null;
    assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
    assume read($Heap, y#0, _module.Qubits.card)
       == read(old($Heap), y#0, _module.Qubits.card);
    havoc i#1;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#1);
        assert y#0 != null;
        assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assume INTERNAL_lt_boogie(i#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)));
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= i#1
           && i#1 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        assert y#0 != null;
        assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)) != null;
        assert $IsAlloc(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
          Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          old($Heap));
        assert 0 <= i#1
           && i#1
             < _System.array.Length(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)));
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#1))): DatatypeType, 
          $Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(i#1))): DatatypeType);
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#1)
             && INTERNAL_lt_boogie(i#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#1))): DatatypeType, 
            $Unbox(read(old($Heap), 
                _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                IndexField(i#1))): DatatypeType);
    }

    assume (forall i#2: int :: 
      { $Unbox(read(old($Heap), 
            _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
            IndexField(i#2))): DatatypeType } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType } 
      INTERNAL_le_boogie(0, i#2)
           && INTERNAL_lt_boogie(i#2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType, 
          $Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(i#2))): DatatypeType));
    havoc j#0;
    assume true;
    if (*)
    {
        assert y#0 != null;
        assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assume INTERNAL_le_boogie(_module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)), j#0);
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(j#0, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)));
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= j#0
           && j#0 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        ##e#1 := i#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(i#0);
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        ##e#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#2, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0));
        assert y#0 != null;
        assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)) != null;
        assert $IsAlloc(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
          Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          old($Heap));
        assert y#0 != null;
        assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert 0
             <= INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
           && INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
             < _System.array.Length(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType);
        assert $IsAlloc($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType, 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt), 
          old($Heap));
        assert N#0 != 0;
        assert y#0 != null;
        assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)) != null;
        assert $IsAlloc(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
          Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          old($Heap));
        assert y#0 != null;
        assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
        assert 0
             <= INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
           && INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
             < _System.array.Length(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType);
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#0))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0($Unbox(read(old($Heap), 
                          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                          IndexField(INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)): int), 
                N#0)), 
            _System.Tuple2._1($Unbox(read(old($Heap), 
                  _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                  IndexField(INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)));
    }
    else
    {
        assume INTERNAL_le_boogie(_module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)), j#0)
             && INTERNAL_lt_boogie(j#0, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#0))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                      a#0, 
                      Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                    $Unbox(_System.Tuple2._0($Unbox(read(old($Heap), 
                            _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                            IndexField(INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)): int), 
                  N#0)), 
              _System.Tuple2._1($Unbox(read(old($Heap), 
                    _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                    IndexField(INTERNAL_sub_boogie(j#0, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)));
    }

    assume (forall j#1: int :: 
      { INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m))) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType } 
      INTERNAL_le_boogie(_module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)), j#1)
           && INTERNAL_lt_boogie(j#1, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0($Unbox(read(old($Heap), 
                          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                          IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)): int), 
                N#0)), 
            _System.Tuple2._1($Unbox(read(old($Heap), 
                  _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                  IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType))));
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assume _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null
       && !read(old($Heap), _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), alloc);
    assert y#0 != null;
    assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
    assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
    assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
    assume _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)) == oldy#0;
}



procedure Call$$_module.__default.ControlledOracle(x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    i#0: int where INTERNAL_le_boogie(0, i#0), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0))
   returns (oldy#0: ref
       where $Is(oldy#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(oldy#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap));
  // user-defined preconditions
  requires INTERNAL_gt_boogie(N#0, 0);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  requires INTERNAL_le_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), 
    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, 
      INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Qubits.Wf#canCall($Heap, y#0);
  free ensures _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#3 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#3) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#3 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#3) == read($Heap, y#0, _module.Qubits.card))
           else (var c#3 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#3 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#3, tmp#1)
                 && INTERNAL_le_boogie(dof#3, _System.array.Length(c#3))
                 && INTERNAL_le_boogie(dof#3, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  free ensures true;
  ensures _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
     == INTERNAL_mul_boogie(2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)));
  free ensures true;
  ensures read($Heap, y#0, _module.Qubits.card)
     == read(old($Heap), y#0, _module.Qubits.card);
  free ensures (forall i#2: int :: 
    { $Unbox(read(old($Heap), 
          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
          IndexField(i#2))): DatatypeType } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType } 
    INTERNAL_le_boogie(0, i#2)
         && INTERNAL_lt_boogie(i#2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType)
         && $IsA#_System.Tuple2($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(i#2))): DatatypeType));
  ensures (forall i#2: int :: 
    { $Unbox(read(old($Heap), 
          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
          IndexField(i#2))): DatatypeType } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType } 
    INTERNAL_le_boogie(0, i#2)
         && INTERNAL_lt_boogie(i#2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType, 
        $Unbox(read(old($Heap), 
            _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
            IndexField(i#2))): DatatypeType));
  free ensures (forall j#1: int :: 
    { INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m))) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType } 
    INTERNAL_le_boogie(_module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)), j#1)
         && INTERNAL_lt_boogie(j#1, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType)
         && 
        Power2.__default.Pow2#canCall(i#0)
         && Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0))
         && _System.Tuple2.___hMake2_q($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)
         && _System.Tuple2.___hMake2_q($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType));
  free ensures (forall j#1: int :: 
    { INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m))) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType } 
    INTERNAL_le_boogie(_module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)), j#1)
         && INTERNAL_lt_boogie(j#1, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                  a#0, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                $Unbox(_System.Tuple2._0($Unbox(read(old($Heap), 
                        _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                        IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)): int), 
              N#0)), 
          _System.Tuple2._1($Unbox(read(old($Heap), 
                _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType))));
  free ensures true;
  ensures _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), alloc);
  free ensures true;
  ensures _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)) == oldy#0;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == y#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.__default.ControlledOracle(x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    i#0: int where INTERNAL_le_boogie(0, i#0), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0))
   returns (oldy#0: ref
       where $Is(oldy#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(oldy#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    $_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_gt_boogie(N#0, 0);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, y#0, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  requires INTERNAL_le_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), 
    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, 
      INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Qubits.Wf#canCall($Heap, y#0);
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#6 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#6) == read($Heap, y#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#6 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#6) == read($Heap, y#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, tmp#3))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, _System.array.Length(c#6)))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#3 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#6 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#6 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#6, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  free ensures true;
  ensures _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
     == INTERNAL_mul_boogie(2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)));
  free ensures true;
  ensures read($Heap, y#0, _module.Qubits.card)
     == read(old($Heap), y#0, _module.Qubits.card);
  free ensures (forall i#2: int :: 
    { $Unbox(read(old($Heap), 
          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
          IndexField(i#2))): DatatypeType } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType } 
    INTERNAL_le_boogie(0, i#2)
         && INTERNAL_lt_boogie(i#2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType)
         && $IsA#_System.Tuple2($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(i#2))): DatatypeType));
  ensures (forall i#2: int :: 
    { $Unbox(read(old($Heap), 
          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
          IndexField(i#2))): DatatypeType } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType } 
    INTERNAL_le_boogie(0, i#2)
         && INTERNAL_lt_boogie(i#2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#2))): DatatypeType, 
        $Unbox(read(old($Heap), 
            _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
            IndexField(i#2))): DatatypeType));
  free ensures (forall j#1: int :: 
    { INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m))) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType } 
    INTERNAL_le_boogie(_module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)), j#1)
         && INTERNAL_lt_boogie(j#1, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType)
         && 
        Power2.__default.Pow2#canCall(i#0)
         && Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0))
         && _System.Tuple2.___hMake2_q($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)
         && _System.Tuple2.___hMake2_q($Unbox(read(old($Heap), 
              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
              IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType));
  ensures (forall j#1: int :: 
    { INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m))) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType } 
    INTERNAL_le_boogie(_module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)), j#1)
         && INTERNAL_lt_boogie(j#1, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, 
                  a#0, 
                  Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#0)), 
                $Unbox(_System.Tuple2._0($Unbox(read(old($Heap), 
                        _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                        IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType)): int), 
              N#0)), 
          _System.Tuple2._1($Unbox(read(old($Heap), 
                _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                IndexField(INTERNAL_sub_boogie(j#1, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))))): DatatypeType))));
  free ensures true;
  ensures _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null
     && !read(old($Heap), _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), alloc);
  free ensures true;
  ensures _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)) == oldy#0;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == y#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.__default.ControlledOracle(x#0: ref, y#0: ref, i#0: int, a#0: int, N#0: int)
   returns (oldy#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var newC#0: ref
     where $Is(newC#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
       && $IsAlloc(newC#0, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
        $Heap);
  var $nw: ref;
  var j#2: int;
  var $PreLoopHeap$loop#0: Heap;
  var $decr_init$loop#00: int;
  var $w$loop#0: bool;
  var k#0: int;
  var k#2: int;
  var ##c#0: DatatypeType;
  var ##i#0: int;
  var ##a#0: int;
  var ##N#0: int;
  var $decr$loop#00: int;
  var now#0_0: DatatypeType
     where $Is(now#0_0, Tclass._System.Tuple2(Tclass._System.nat(), TInt))
       && $IsAlloc(now#0_0, Tclass._System.Tuple2(Tclass._System.nat(), TInt), $Heap);
  var $rhs#0_0: DatatypeType;
  var $rhs#0_1: DatatypeType;
  var ##e#0_0: int;
  var ##b#0_0: int;
  var ##e#0_1: int;
  var $rhs#0: DatatypeType;
  var ##e#3: int;

    // AddMethodImpl: ControlledOracle, Impl$$_module.__default.ControlledOracle
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == y#0);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(342,8)
    assume true;
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assume true;
    oldy#0 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(343,32)
    assume true;
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert 0
       <= INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)));
    havoc $nw;
    assume $nw != null
       && dtype($nw)
         == Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt));
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw)
       == INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)));
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    newC#0 := $nw;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(344,9)
    assume true;
    assume true;
    j#2 := LitInt(0);
    // ----- while statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(345,3)
    // Assume Fuel Constant
    $PreLoopHeap$loop#0 := $Heap;
    $decr_init$loop#00 := INTERNAL_sub_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), j#2);
    havoc $w$loop#0;
    while (true)
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> INTERNAL_gt_boogie(N#0, 0);
      free invariant $w$loop#0
         ==> 
        _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
         ==> _module.Qubits.Wf#canCall($Heap, y#0);
      invariant $w$loop#0 ==> _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var b#8 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
                _System.array.Length(b#8) == read($Heap, y#0, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> 
              _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var h#8 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
                _System.array.Length(h#8) == read($Heap, y#0, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var c#8 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
                (var dof#8 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#8, tmp#4))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var c#8 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
                (var dof#8 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#8, _System.array.Length(c#8)))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#4 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var c#8 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
                (var dof#8 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#8, 
                    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
      free invariant $w$loop#0
         ==> _module.Qubits.Wf#canCall($Heap, y#0)
           && 
          _module.Qubits.Wf($Heap, y#0)
           && (var tmp#4 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               then (var b#9 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
                _System.array.Length(b#9) == read($Heap, y#0, _module.Qubits.card))
               else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
                 then (var h#9 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
                  _System.array.Length(h#9) == read($Heap, y#0, _module.Qubits.card))
                 else (var c#9 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
                  (var dof#9 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
                    INTERNAL_le_boogie(dof#9, tmp#4)
                       && INTERNAL_le_boogie(dof#9, _System.array.Length(c#9))
                       && INTERNAL_le_boogie(dof#9, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> INTERNAL_le_boogie(0, 
          INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))));
      invariant $w$loop#0
         ==> INTERNAL_le_boogie(INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))), 
          _System.array.Length(newC#0));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
           == _System.array.Length(newC#0);
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> read($Heap, y#0, _module.Qubits.card)
           == read(old($Heap), y#0, _module.Qubits.card);
      invariant $w$loop#0
         ==> _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
           == _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m));
      invariant $w$loop#0
         ==> _module.Mode.c(read($Heap, y#0, _module.Qubits.m))
           == _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m));
      free invariant $w$loop#0
         ==> (forall k#1: int :: 
          { $Unbox(read(old($Heap), 
                _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                IndexField(k#1))): DatatypeType } 
            { $Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, j#2)
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType)
               && $IsA#_System.Tuple2($Unbox(read(old($Heap), 
                    _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                    IndexField(k#1))): DatatypeType));
      invariant $w$loop#0
         ==> (forall k#1: int :: 
          { $Unbox(read(old($Heap), 
                _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                IndexField(k#1))): DatatypeType } 
            { $Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, j#2)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType, 
              $Unbox(read(old($Heap), 
                  _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                  IndexField(k#1))): DatatypeType));
      free invariant $w$loop#0
         ==> (forall k#3: int :: 
          { $Unbox(read(old($Heap), 
                _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                IndexField(k#3))): DatatypeType } 
            { $Unbox(read($Heap, 
                newC#0, 
                IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType } 
          INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, j#2)
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, 
                    newC#0, 
                    IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType)
               && $IsA#_System.Tuple2(_module.__default.ShorOracle($Unbox(read(old($Heap), 
                      _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                      IndexField(k#3))): DatatypeType, 
                  i#0, 
                  a#0, 
                  N#0))
               && _module.__default.ShorOracle#canCall($Unbox(read(old($Heap), 
                    _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                    IndexField(k#3))): DatatypeType, 
                i#0, 
                a#0, 
                N#0));
      invariant $w$loop#0
         ==> (forall k#3: int :: 
          { $Unbox(read(old($Heap), 
                _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                IndexField(k#3))): DatatypeType } 
            { $Unbox(read($Heap, 
                newC#0, 
                IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType } 
          INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, j#2)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, 
                  newC#0, 
                  IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType, 
              _module.__default.ShorOracle($Unbox(read(old($Heap), 
                    _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                    IndexField(k#3))): DatatypeType, 
                i#0, 
                a#0, 
                N#0)));
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && read(old($Heap), $o, alloc)
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o] || $o == y#0);
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
        { read($Heap, $o, $f) } 
        $o != null && read($PreLoopHeap$loop#0, $o, alloc)
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant INTERNAL_sub_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), j#2)
           <= $decr_init$loop#00
         && (INTERNAL_sub_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), j#2)
             == $decr_init$loop#00
           ==> true);
    {
        if (!$w$loop#0)
        {
            assume true;
            assume INTERNAL_gt_boogie(N#0, 0);
            assert {:subsumption 0} y#0 != null;
            if (_module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m)))
            {
                assert {:subsumption 0} y#0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
                assume _module.Qubits.Wf#canCall($Heap, y#0);
            }

            assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
               ==> _module.Qubits.Wf#canCall($Heap, y#0);
            assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
               && _module.Qubits.Wf($Heap, y#0);
            assert {:subsumption 0} y#0 != null;
            assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
            if (INTERNAL_le_boogie(0, 
              INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))
            {
                assert {:subsumption 0} y#0 != null;
                assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                assert {:subsumption 0} newC#0 != null;
            }

            assume true;
            assume INTERNAL_le_boogie(0, 
                INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))))
               && INTERNAL_le_boogie(INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))), 
                _System.array.Length(newC#0));
            assert {:subsumption 0} y#0 != null;
            assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
            assert {:subsumption 0} newC#0 != null;
            assume true;
            assume INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
               == _System.array.Length(newC#0);
            assert {:subsumption 0} y#0 != null;
            assert {:subsumption 0} y#0 != null;
            assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
            if (read($Heap, y#0, _module.Qubits.card)
               == read(old($Heap), y#0, _module.Qubits.card))
            {
                assert {:subsumption 0} y#0 != null;
                assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                assert {:subsumption 0} y#0 != null;
                assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
                assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
                assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
            }

            if (read($Heap, y#0, _module.Qubits.card)
                 == read(old($Heap), y#0, _module.Qubits.card)
               && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                 == _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)))
            {
                assert {:subsumption 0} y#0 != null;
                assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                assert {:subsumption 0} y#0 != null;
                assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
                assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
                assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
            }

            assume true;
            assume read($Heap, y#0, _module.Qubits.card)
                 == read(old($Heap), y#0, _module.Qubits.card)
               && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                 == _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m))
               && _module.Mode.c(read($Heap, y#0, _module.Qubits.m))
                 == _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m));
            // Begin Comprehension WF check
            havoc k#0;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#0))
                {
                }

                if (INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, j#2))
                {
                    assert newC#0 != null;
                    assert {:subsumption 0} 0 <= k#0 && k#0 < _System.array.Length(newC#0);
                    assert {:subsumption 0} y#0 != null;
                    assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
                    assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
                    assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
                    assert _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)) != null;
                    assert $IsAlloc(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                      Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
                      old($Heap));
                    assert {:subsumption 0} 0 <= k#0
                       && k#0
                         < _System.array.Length(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)));
                }
            }

            // End Comprehension WF check
            assume (forall k#1: int :: 
              { $Unbox(read(old($Heap), 
                    _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                    IndexField(k#1))): DatatypeType } 
                { $Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType } 
              INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, j#2)
                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType)
                   && $IsA#_System.Tuple2($Unbox(read(old($Heap), 
                        _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                        IndexField(k#1))): DatatypeType));
            assume (forall k#1: int :: 
              { $Unbox(read(old($Heap), 
                    _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                    IndexField(k#1))): DatatypeType } 
                { $Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType } 
              INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, j#2)
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType, 
                  $Unbox(read(old($Heap), 
                      _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                      IndexField(k#1))): DatatypeType));
            // Begin Comprehension WF check
            havoc k#2;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#2))
                {
                }

                if (INTERNAL_le_boogie(0, k#2) && INTERNAL_lt_boogie(k#2, j#2))
                {
                    assert newC#0 != null;
                    assert {:subsumption 0} y#0 != null;
                    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                    assert {:subsumption 0} 0
                         <= INTERNAL_add_boogie(k#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
                       && INTERNAL_add_boogie(k#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
                         < _System.array.Length(newC#0);
                    assert {:subsumption 0} y#0 != null;
                    assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
                    assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
                    assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
                    assert _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)) != null;
                    assert $IsAlloc(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                      Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
                      old($Heap));
                    assert {:subsumption 0} 0 <= k#2
                       && k#2
                         < _System.array.Length(_module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)));
                    ##c#0 := $Unbox(read(old($Heap), 
                        _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                        IndexField(k#2))): DatatypeType;
                    ##i#0 := i#0;
                    ##a#0 := a#0;
                    ##N#0 := N#0;
                    assert $IsAlloc($Unbox(read(old($Heap), 
                          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                          IndexField(k#2))): DatatypeType, 
                      Tclass._System.Tuple2(Tclass._System.nat(), TInt), 
                      old($Heap));
                    assert {:subsumption 0} INTERNAL_gt_boogie(##N#0, 0);
                    assume _module.__default.ShorOracle#canCall($Unbox(read(old($Heap), 
                          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                          IndexField(k#2))): DatatypeType, 
                      i#0, 
                      a#0, 
                      N#0);
                    assume _System.Tuple2.___hMake2_q(_module.__default.ShorOracle($Unbox(read(old($Heap), 
                            _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                            IndexField(k#2))): DatatypeType, 
                        i#0, 
                        a#0, 
                        N#0));
                }
            }

            // End Comprehension WF check
            assume (forall k#3: int :: 
              { $Unbox(read(old($Heap), 
                    _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                    IndexField(k#3))): DatatypeType } 
                { $Unbox(read($Heap, 
                    newC#0, 
                    IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType } 
              INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, j#2)
                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, 
                        newC#0, 
                        IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType)
                   && $IsA#_System.Tuple2(_module.__default.ShorOracle($Unbox(read(old($Heap), 
                          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                          IndexField(k#3))): DatatypeType, 
                      i#0, 
                      a#0, 
                      N#0))
                   && _module.__default.ShorOracle#canCall($Unbox(read(old($Heap), 
                        _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                        IndexField(k#3))): DatatypeType, 
                    i#0, 
                    a#0, 
                    N#0));
            assume (forall k#3: int :: 
              { $Unbox(read(old($Heap), 
                    _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                    IndexField(k#3))): DatatypeType } 
                { $Unbox(read($Heap, 
                    newC#0, 
                    IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType } 
              INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, j#2)
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, 
                      newC#0, 
                      IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType, 
                  _module.__default.ShorOracle($Unbox(read(old($Heap), 
                        _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                        IndexField(k#3))): DatatypeType, 
                    i#0, 
                    a#0, 
                    N#0)));
            assert y#0 != null;
            assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
            assume true;
            assume false;
        }

        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assume true;
        if (!INTERNAL_lt_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))))
        {
            break;
        }

        $decr$loop#00 := INTERNAL_sub_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), j#2);
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(355,13)
        assume true;
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= j#2
           && j#2 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        assume true;
        now#0_0 := $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#2))): DatatypeType;
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(356,13)
        assert newC#0 != null;
        assert 0 <= j#2 && j#2 < _System.array.Length(newC#0);
        assume true;
        assert $_Frame[newC#0, IndexField(j#2)];
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= j#2
           && j#2 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        assume true;
        $rhs#0_0 := $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(j#2))): DatatypeType;
        $Heap := update($Heap, newC#0, IndexField(j#2), $Box($rhs#0_0));
        assume $IsGoodHeap($Heap);
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(357,23)
        assert newC#0 != null;
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert 0
             <= INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
           && INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
             < _System.array.Length(newC#0);
        assume true;
        assert $_Frame[newC#0, IndexField(INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))))];
        ##e#0_0 := i#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0_0, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(i#0);
        ##b#0_0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0_0, TInt, $Heap);
        ##e#0_1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0_1, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0));
        assume _System.Tuple2.___hMake2_q(now#0_0);
        assert N#0 != 0;
        assume _System.Tuple2.___hMake2_q(now#0_0);
        assume Power2.__default.Pow2#canCall(i#0)
           && Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0))
           && _System.Tuple2.___hMake2_q(now#0_0)
           && _System.Tuple2.___hMake2_q(now#0_0);
        assert $Is(#_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0(now#0_0)): int), 
                N#0)), 
            _System.Tuple2._1(now#0_0)), 
          Tclass._System.Tuple2(Tclass._System.nat(), TInt));
        $rhs#0_1 := #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                  a#0, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                $Unbox(_System.Tuple2._0(now#0_0)): int), 
              N#0)), 
          _System.Tuple2._1(now#0_0));
        $Heap := update($Heap, 
          newC#0, 
          IndexField(INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))), 
          $Box($rhs#0_1));
        assume $IsGoodHeap($Heap);
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(358,7)
        assume true;
        assume true;
        j#2 := INTERNAL_add_boogie(j#2, 1);
        // ----- loop termination check ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(345,3)
        assert 0 <= $decr$loop#00
           || INTERNAL_sub_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), j#2)
             == $decr$loop#00;
        assert INTERNAL_sub_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), j#2)
           < $decr$loop#00;
        assume INTERNAL_gt_boogie(N#0, 0)
           ==> 
          _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
           ==> _module.Qubits.Wf#canCall($Heap, y#0)
             && (_module.Qubits.Wf($Heap, y#0)
               ==> 
              INTERNAL_le_boogie(0, 
                  INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))))
                 && INTERNAL_le_boogie(INTERNAL_add_boogie(j#2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))), 
                  _System.array.Length(newC#0))
               ==> 
              INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
                 == _System.array.Length(newC#0)
               ==> 
              read($Heap, y#0, _module.Qubits.card)
                 == read(old($Heap), y#0, _module.Qubits.card)
               ==> 
              _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                 == _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m))
               ==> 
              _module.Mode.c(read($Heap, y#0, _module.Qubits.m))
                 == _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m))
               ==> (forall k#1: int :: 
                  { $Unbox(read(old($Heap), 
                        _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                        IndexField(k#1))): DatatypeType } 
                    { $Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType } 
                  INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, j#2)
                     ==> $IsA#_System.Tuple2($Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType)
                       && $IsA#_System.Tuple2($Unbox(read(old($Heap), 
                            _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                            IndexField(k#1))): DatatypeType))
                 && ((forall k#1: int :: 
                    { $Unbox(read(old($Heap), 
                          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                          IndexField(k#1))): DatatypeType } 
                      { $Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType } 
                    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, j#2)
                       ==> _System.Tuple2#Equal($Unbox(read($Heap, newC#0, IndexField(k#1))): DatatypeType, 
                        $Unbox(read(old($Heap), 
                            _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                            IndexField(k#1))): DatatypeType))
                   ==> (forall k#3: int :: 
                    { $Unbox(read(old($Heap), 
                          _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                          IndexField(k#3))): DatatypeType } 
                      { $Unbox(read($Heap, 
                          newC#0, 
                          IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType } 
                    INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, j#2)
                       ==> $IsA#_System.Tuple2($Unbox(read($Heap, 
                              newC#0, 
                              IndexField(INTERNAL_add_boogie(k#3, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))))): DatatypeType)
                         && $IsA#_System.Tuple2(_module.__default.ShorOracle($Unbox(read(old($Heap), 
                                _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                                IndexField(k#3))): DatatypeType, 
                            i#0, 
                            a#0, 
                            N#0))
                         && _module.__default.ShorOracle#canCall($Unbox(read(old($Heap), 
                              _module.Mode.c(read(old($Heap), y#0, _module.Qubits.m)), 
                              IndexField(k#3))): DatatypeType, 
                          i#0, 
                          a#0, 
                          N#0))));
    }

    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(361,7)
    assert y#0 != null;
    assume true;
    assert $_Frame[y#0, _module.Qubits.m];
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert $Is(INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))), 
      Tclass._System.nat());
    assume true;
    $rhs#0 := #_module.Mode.CH(INTERNAL_mul_boogie(2, _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))), 
      newC#0);
    $Heap := update($Heap, y#0, _module.Qubits.m, $rhs#0);
    assume $IsGoodHeap($Heap);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(362,3)
    assert {:subsumption 0} y#0 != null;
    if (_module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m)))
    {
        assert {:subsumption 0} y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert {:subsumption 0} y#0 != null;
        assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
        assert _module.Mode.CH_q(read(old($Heap), y#0, _module.Qubits.m));
        assert $IsAlloc(read(old($Heap), y#0, _module.Qubits.m), Tclass._module.Mode(), old($Heap));
    }

    assume true;
    assert {:subsumption 0} _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert {:subsumption 0} _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
       == INTERNAL_mul_boogie(2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)));
    assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
       && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
         == INTERNAL_mul_boogie(2, _module.Mode.dof(read(old($Heap), y#0, _module.Qubits.m)));
    // ----- reveal statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(363,3)
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(363,14)
    // TrCallStmt: Before ProcessCallStmt
    // ProcessCallStmt: Make the call
    call Call$$Power2.__default.reveal__Pow2();
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(364,3)
    assert {:subsumption 0} y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert {:subsumption 0} y#0 != null;
    ##e#3 := read($Heap, y#0, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#3, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card));
    assume Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card));
    assert {:subsumption 0} INTERNAL_le_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), 
      Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)));
    assume INTERNAL_le_boogie(_module.Mode.dof(read($Heap, y#0, _module.Qubits.m)), 
      Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)));
}



procedure {:_induction a#0} CheckWellformed$$_module.__default.LemmaShorOracleNoMod(dof#0: int where INTERNAL_le_boogie(0, dof#0), 
    c#0: ref
       where $Is(c#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    c'#0: ref
       where $Is(c'#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c'#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation {:_induction a#0} CheckWellformed$$_module.__default.LemmaShorOracleNoMod(dof#0: int, c#0: ref, c'#0: ref, a#0: int, N#0: int, i#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##e#0: int;
  var k#0: int;
  var ##b#0: int;
  var ##e#1: int;
  var k#2: int;
  var k#4: int;
  var ##e#2: int;
  var ##b#1: int;
  var ##e#3: int;
  var k#6: int;
  var ##b#2: int;
  var ##e#4: int;

    // AddMethodImpl: LemmaShorOracleNoMod, CheckWellformed$$_module.__default.LemmaShorOracleNoMod
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_gt_boogie(N#0, 0);
    ##e#0 := i#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(i#0);
    assume Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0) == dof#0;
    assert c#0 != null;
    if (INTERNAL_ge_boogie(_System.array.Length(c#0), dof#0))
    {
    }

    assume INTERNAL_ge_boogie(_System.array.Length(c#0), dof#0)
       && INTERNAL_ge_boogie(dof#0, 0);
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assume INTERNAL_lt_boogie(k#0, dof#0);
        assert c#0 != null;
        assert 0 <= k#0 && k#0 < _System.array.Length(c#0);
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        assert $Is(k#0, Tclass._System.nat());
        ##e#1 := k#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#0);
        assume _System.Tuple2#Equal($Unbox(read($Heap, c#0, IndexField(k#0))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, dof#0)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, c#0, IndexField(k#0))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0)), 
              $Box(LitInt(1))));
    }

    assume (forall k#1: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
        { $Unbox(read($Heap, c#0, IndexField(k#1))): DatatypeType } 
      INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c#0, IndexField(k#1))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1)), 
            $Box(LitInt(1)))));
    assert c'#0 != null;
    if (INTERNAL_ge_boogie(_System.array.Length(c'#0), INTERNAL_mul_boogie(2, dof#0)))
    {
    }

    assume INTERNAL_ge_boogie(_System.array.Length(c'#0), INTERNAL_mul_boogie(2, dof#0))
       && INTERNAL_ge_boogie(INTERNAL_mul_boogie(2, dof#0), 0);
    havoc k#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#2);
        assume INTERNAL_lt_boogie(k#2, dof#0);
        assert c'#0 != null;
        assert 0 <= k#2 && k#2 < _System.array.Length(c'#0);
        assert c#0 != null;
        assert 0 <= k#2 && k#2 < _System.array.Length(c#0);
        assume _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#2))): DatatypeType, 
          $Unbox(read($Heap, c#0, IndexField(k#2))): DatatypeType);
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#2) && INTERNAL_lt_boogie(k#2, dof#0)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#2))): DatatypeType, 
            $Unbox(read($Heap, c#0, IndexField(k#2))): DatatypeType);
    }

    assume (forall k#3: int :: 
      { $Unbox(read($Heap, c#0, IndexField(k#3))): DatatypeType } 
        { $Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType } 
      INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType, 
          $Unbox(read($Heap, c#0, IndexField(k#3))): DatatypeType));
    havoc k#4;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#4);
        assume INTERNAL_lt_boogie(k#4, dof#0);
        assert c'#0 != null;
        assert 0 <= INTERNAL_add_boogie(k#4, dof#0)
           && INTERNAL_add_boogie(k#4, dof#0) < _System.array.Length(c'#0);
        ##e#2 := i#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#2, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(i#0);
        ##b#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#1, TInt, $Heap);
        ##e#3 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#3, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0));
        assert c'#0 != null;
        assert 0 <= k#4 && k#4 < _System.array.Length(c'#0);
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#4))): DatatypeType);
        assert c'#0 != null;
        assert 0 <= k#4 && k#4 < _System.array.Length(c'#0);
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#4))): DatatypeType);
        assume _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#4, dof#0)))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                  a#0, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#4))): DatatypeType)): int)), 
            _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#4))): DatatypeType)));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#4) && INTERNAL_lt_boogie(k#4, dof#0)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#4, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#4))): DatatypeType)): int)), 
              _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#4))): DatatypeType)));
    }

    assume (forall k#5: int :: 
      { $Unbox(_System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int } 
        { $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int } 
        { INTERNAL_add_boogie(k#5, dof#0) } 
        { INTERNAL_lt_boogie(k#5, dof#0) } 
        { INTERNAL_le_boogie(0, k#5) } 
      INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#5, dof#0)))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                  a#0, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int)), 
            _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType))));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc k#6;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#6);
        assume INTERNAL_lt_boogie(k#6, INTERNAL_mul_boogie(2, dof#0));
        assert c'#0 != null;
        assert 0 <= k#6 && k#6 < _System.array.Length(c'#0);
        ##b#2 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#2, TInt, $Heap);
        assert $Is(k#6, Tclass._System.nat());
        ##e#4 := k#6;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#4, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#6);
        assume _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#6))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#6)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#6)
             && INTERNAL_lt_boogie(k#6, INTERNAL_mul_boogie(2, dof#0))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#6))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#6)), 
              $Box(LitInt(1))));
    }

    assume (forall k#7: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#7) } 
        { $Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType } 
      INTERNAL_le_boogie(0, k#7)
           && INTERNAL_lt_boogie(k#7, INTERNAL_mul_boogie(2, dof#0))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#7)), 
            $Box(LitInt(1)))));
}



procedure {:_induction a#0} Call$$_module.__default.LemmaShorOracleNoMod(dof#0: int where INTERNAL_le_boogie(0, dof#0), 
    c#0: ref
       where $Is(c#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    c'#0: ref
       where $Is(c'#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c'#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  // user-defined preconditions
  requires INTERNAL_gt_boogie(N#0, 0);
  requires Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#0) == dof#0;
  requires INTERNAL_ge_boogie(_System.array.Length(c#0), dof#0);
  requires INTERNAL_ge_boogie(dof#0, 0);
  requires (forall k#1: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, c#0, IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c#0, IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1)), 
          $Box(LitInt(1)))));
  requires INTERNAL_ge_boogie(_System.array.Length(c'#0), INTERNAL_mul_boogie(2, dof#0));
  requires INTERNAL_ge_boogie(INTERNAL_mul_boogie(2, dof#0), 0);
  requires (forall k#3: int :: 
    { $Unbox(read($Heap, c#0, IndexField(k#3))): DatatypeType } 
      { $Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType, 
        $Unbox(read($Heap, c#0, IndexField(k#3))): DatatypeType));
  requires (forall k#5: int :: 
    { $Unbox(_System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int } 
      { $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int } 
      { INTERNAL_add_boogie(k#5, dof#0) } 
      { INTERNAL_lt_boogie(k#5, dof#0) } 
      { INTERNAL_le_boogie(0, k#5) } 
    INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#5, dof#0)))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, 
                a#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#0)), 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int)), 
          _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures (forall k#7: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#7) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType } 
    INTERNAL_le_boogie(0, k#7)
         && INTERNAL_lt_boogie(k#7, INTERNAL_mul_boogie(2, dof#0))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType)
         && Power.__default.Pow#canCall(a#0, k#7));
  free ensures (forall k#7: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#7) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType } 
    INTERNAL_le_boogie(0, k#7)
         && INTERNAL_lt_boogie(k#7, INTERNAL_mul_boogie(2, dof#0))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#7)), 
          $Box(LitInt(1)))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:_induction a#0} Impl$$_module.__default.LemmaShorOracleNoMod(dof#0: int where INTERNAL_le_boogie(0, dof#0), 
    c#0: ref
       where $Is(c#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    c'#0: ref
       where $Is(c'#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c'#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    i#0: int where INTERNAL_le_boogie(0, i#0))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_gt_boogie(N#0, 0);
  requires Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#0) == dof#0;
  requires INTERNAL_ge_boogie(_System.array.Length(c#0), dof#0);
  requires INTERNAL_ge_boogie(dof#0, 0);
  free requires (forall k#1: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, c#0, IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c#0, IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1)), 
          $Box(LitInt(1)))));
  requires INTERNAL_ge_boogie(_System.array.Length(c'#0), INTERNAL_mul_boogie(2, dof#0));
  requires INTERNAL_ge_boogie(INTERNAL_mul_boogie(2, dof#0), 0);
  requires (forall k#3: int :: 
    { $Unbox(read($Heap, c#0, IndexField(k#3))): DatatypeType } 
      { $Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType, 
        $Unbox(read($Heap, c#0, IndexField(k#3))): DatatypeType));
  free requires (forall k#5: int :: 
    { $Unbox(_System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int } 
      { $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int } 
      { INTERNAL_add_boogie(k#5, dof#0) } 
      { INTERNAL_lt_boogie(k#5, dof#0) } 
      { INTERNAL_le_boogie(0, k#5) } 
    INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#5, dof#0)))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                a#0, 
                Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)): int)), 
          _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures (forall k#7: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#7) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType } 
    INTERNAL_le_boogie(0, k#7)
         && INTERNAL_lt_boogie(k#7, INTERNAL_mul_boogie(2, dof#0))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType)
         && Power.__default.Pow#canCall(a#0, k#7));
  ensures (forall k#7: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#7) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType } 
    INTERNAL_le_boogie(0, k#7)
         && INTERNAL_lt_boogie(k#7, INTERNAL_mul_boogie(2, dof#0))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#7))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#7)), 
          $Box(LitInt(1)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:_induction a#0} Impl$$_module.__default.LemmaShorOracleNoMod(dof#0: int, c#0: ref, c'#0: ref, a#0: int, N#0: int, i#0: int)
   returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $initHeapForallStmt#0: Heap;
  var k#0_0: int;
  var ##b#0_0_0_0: int;
  var ##e#0_0_0_0: int;
  var ##b#0_0_0_1: int;
  var ##e#0_0_0_1: int;
  var ##b#0_0_1_0: int;
  var ##e#0_0_1_0: int;
  var ##b#0_0_1_1: int;
  var ##e#0_0_1_1: int;
  var b##0_0_1_0: int;
  var e1##0_0_1_0: int;
  var e2##0_0_1_0: int;
  var ##b#0_0_1_2: int;
  var ##e#0_0_1_2: int;
  var ##b#0_0_2_0: int;
  var ##e#0_0_2_0: int;
  var ##b#0_0_2_1: int;
  var ##e#0_0_2_1: int;
  var ##b#0_0_2_2: int;
  var ##e#0_0_2_2: int;
  var ##b#0_0_2_3: int;
  var ##e#0_0_2_3: int;
  var ##b#0_0_3_0: int;
  var ##e#0_0_3_0: int;
  var ##b#0_0_3_1: int;
  var ##e#0_0_3_1: int;
  var ##b#0_0_3_2: int;
  var ##e#0_0_3_2: int;
  var ##b#0_0_0: int;
  var ##e#0_0_0: int;
  var k#12: int;
  var ##b#3: int;
  var ##e#5: int;
  var k#14: int;

    // AddMethodImpl: LemmaShorOracleNoMod, Impl$$_module.__default.LemmaShorOracleNoMod
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap, $Tick;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#a0#0: int :: 
      INTERNAL_le_boogie(0, $ih#a0#0)
           && 
          INTERNAL_gt_boogie(N#0, 0)
           && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0) == dof#0
           && 
          INTERNAL_ge_boogie(_System.array.Length(c#0), dof#0)
           && INTERNAL_ge_boogie(dof#0, 0)
           && (forall k#8: int :: 
            { Power.__default.Pow(StartFuel_Power._default.Pow, $ih#a0#0, k#8) } 
              { $Unbox(read($initHeapForallStmt#0, c#0, IndexField(k#8))): DatatypeType } 
            INTERNAL_le_boogie(0, k#8) && INTERNAL_lt_boogie(k#8, dof#0)
               ==> _System.Tuple2#Equal($Unbox(read($initHeapForallStmt#0, c#0, IndexField(k#8))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, $ih#a0#0, k#8)), 
                  $Box(LitInt(1)))))
           && 
          INTERNAL_ge_boogie(_System.array.Length(c'#0), INTERNAL_mul_boogie(2, dof#0))
           && INTERNAL_ge_boogie(INTERNAL_mul_boogie(2, dof#0), 0)
           && (forall k#9: int :: 
            { $Unbox(read($initHeapForallStmt#0, c#0, IndexField(k#9))): DatatypeType } 
              { $Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#9))): DatatypeType } 
            INTERNAL_le_boogie(0, k#9) && INTERNAL_lt_boogie(k#9, dof#0)
               ==> _System.Tuple2#Equal($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#9))): DatatypeType, 
                $Unbox(read($initHeapForallStmt#0, c#0, IndexField(k#9))): DatatypeType))
           && (forall k#10: int :: 
            { $Unbox(_System.Tuple2._1($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#10))): DatatypeType)): int } 
              { $Unbox(_System.Tuple2._0($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#10))): DatatypeType)): int } 
              { INTERNAL_add_boogie(k#10, dof#0) } 
              { INTERNAL_lt_boogie(k#10, dof#0) } 
              { INTERNAL_le_boogie(0, k#10) } 
            INTERNAL_le_boogie(0, k#10) && INTERNAL_lt_boogie(k#10, dof#0)
               ==> _System.Tuple2#Equal($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(INTERNAL_add_boogie(k#10, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                        $ih#a0#0, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                      $Unbox(_System.Tuple2._0($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#10))): DatatypeType)): int)), 
                  _System.Tuple2._1($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#10))): DatatypeType))))
           && ((0 <= dof#0 && dof#0 < dof#0)
             || (dof#0 == dof#0
               && ((c#0 == null && c#0 != null)
                 || ((c#0 != null <==> c#0 != null)
                   && ((c'#0 == null && c'#0 != null)
                     || ((c'#0 != null <==> c'#0 != null)
                       && ((0 <= $ih#a0#0 && $ih#a0#0 < a#0)
                         || ($ih#a0#0 == a#0
                           && ((0 <= N#0 && N#0 < N#0) || (N#0 == N#0 && 0 <= i#0 && i#0 < i#0))))))))))
         ==> (forall k#11: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, $ih#a0#0, k#11) } 
            { $Unbox(read($Heap, c'#0, IndexField(k#11))): DatatypeType } 
          INTERNAL_le_boogie(0, k#11)
               && INTERNAL_lt_boogie(k#11, INTERNAL_mul_boogie(2, dof#0))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#11))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, $ih#a0#0, k#11)), 
                $Box(LitInt(1))))));
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(391,3)
    if (*)
    {
        // Assume Fuel Constant
        havoc k#0_0;
        assume true;
        if (INTERNAL_le_boogie(0, k#0_0))
        {
        }

        assume true;
        assume INTERNAL_le_boogie(0, k#0_0) && INTERNAL_lt_boogie(k#0_0, dof#0);
        // ----- calc statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_0, TInt, $Heap);
            ##e#0_0_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= k#0_0 && k#0_0 < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType);
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType);
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_3_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_3_0, TInt, $Heap);
            ##e#0_0_3_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_3_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= k#0_0 && k#0_0 < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType);
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType);
            // ----- Hint0 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_3_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_3_1, TInt, $Heap);
            ##e#0_0_3_1 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_3_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_3_2 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_3_2, TInt, $Heap);
            assert $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_3_2 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_3_2, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- assert line0 == line1 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert {:subsumption 0} _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                      $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType)): int)), 
                  $Box(LitInt(1))))
               == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                      Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0))), 
                  $Box(LitInt(1))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_2_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_2_0, TInt, $Heap);
            ##e#0_0_2_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_2_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_2_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_2_1, TInt, $Heap);
            assume $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_2_1 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_2_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- Hint1 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType);
            ##b#0_0_2_2 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_2_2, TInt, $Heap);
            ##e#0_0_2_2 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_2_2, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_2_3 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_2_3, TInt, $Heap);
            assert $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_2_3 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_2_3, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- assert line1 == line2 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert {:subsumption 0} _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                      Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0))), 
                  $Box(LitInt(1))))
               == 
              ($Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)): int
               == INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType);
            ##b#0_0_1_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_1_0, TInt, $Heap);
            ##e#0_0_1_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_1_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_1_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_1_1, TInt, $Heap);
            assume $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_1_1 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_1_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- Hint2 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(396,20)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_1_0 := a#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            e1##0_0_1_0 := dof#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert $Is(k#0_0, Tclass._System.nat());
            e2##0_0_1_0 := k#0_0;
            // ProcessCallStmt: Make the call
            call Call$$Power.__default.LemmaPowAdds(b##0_0_1_0, e1##0_0_1_0, e2##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType);
            ##b#0_0_1_2 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_1_2, TInt, $Heap);
            assert $Is(INTERNAL_add_boogie(dof#0, k#0_0), Tclass._System.nat());
            ##e#0_0_1_2 := INTERNAL_add_boogie(dof#0, k#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_1_2, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            // ----- assert line2 == line3 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert {:subsumption 0} ($Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)): int
               == INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0)))
               == 
              ($Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)): int
               == Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0)));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType);
            ##b#0_0_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_0_0, TInt, $Heap);
            assume $Is(INTERNAL_add_boogie(dof#0, k#0_0), Tclass._System.nat());
            ##e#0_0_0_0 := INTERNAL_add_boogie(dof#0, k#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_0_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            // ----- Hint3 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_0_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_0_1, TInt, $Heap);
            assert $Is(INTERNAL_add_boogie(dof#0, k#0_0), Tclass._System.nat());
            ##e#0_0_0_1 := INTERNAL_add_boogie(dof#0, k#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_0_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            // ----- assert line3 == line4 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(392,5)
            assert {:subsumption 0} ($Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)): int
               == Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0)))
               == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0))), 
                  $Box(LitInt(1))));
            assume false;
        }

        assume _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, dof#0), 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType)): int)), 
              $Box(LitInt(1))))
           == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0))), 
              $Box(LitInt(1))));
        assert _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType)): int)), 
              $Box(LitInt(1))))
           == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0))), 
              $Box(LitInt(1))));
        assume false;
    }
    else
    {
        assume (forall k#0_1: int :: 
          { INTERNAL_add_boogie(dof#0, k#0_1) } 
            { $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_1))): DatatypeType)): int } 
            { INTERNAL_add_boogie(k#0_1, dof#0) } 
            { INTERNAL_lt_boogie(k#0_1, dof#0) } 
            { INTERNAL_le_boogie(0, k#0_1) } 
          INTERNAL_le_boogie(0, k#0_1) && INTERNAL_lt_boogie(k#0_1, dof#0)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_1, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, dof#0), 
                      $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_1))): DatatypeType)): int)), 
                  $Box(LitInt(1))))
               == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_1, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_1))), 
                  $Box(LitInt(1)))));
    }

    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(401,3)
    // Begin Comprehension WF check
    havoc k#12;
    if (true)
    {
        if (INTERNAL_le_boogie(0, k#12))
        {
        }

        if (INTERNAL_le_boogie(0, k#12) && INTERNAL_lt_boogie(k#12, dof#0))
        {
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#12, dof#0)
               && INTERNAL_add_boogie(k#12, dof#0) < _System.array.Length(c'#0);
            ##b#3 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#3, TInt, $Heap);
            assert $Is(INTERNAL_add_boogie(dof#0, k#12), Tclass._System.nat());
            ##e#5 := INTERNAL_add_boogie(dof#0, k#12);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#5, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#12));
        }
    }

    // End Comprehension WF check
    assume (forall k#13: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#13)) } 
        { $Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#13, dof#0)))): DatatypeType } 
      INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, dof#0)
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#13, dof#0)))): DatatypeType)
           && Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#13)));
    assert {:subsumption 0} (forall k#13: int :: 
      { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#13)) } 
        { $Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#13, dof#0)))): DatatypeType } 
      INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#13, dof#0)))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#13))), 
            $Box(LitInt(1)))));
    assume (forall k#13: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#13)) } 
        { $Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#13, dof#0)))): DatatypeType } 
      INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#13, dof#0)))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#13))), 
            $Box(LitInt(1)))));
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(402,3)
    // Begin Comprehension WF check
    havoc k#14;
    if (true)
    {
        if (INTERNAL_le_boogie(dof#0, k#14))
        {
        }

        if (INTERNAL_le_boogie(dof#0, k#14)
           && INTERNAL_lt_boogie(k#14, INTERNAL_mul_boogie(2, dof#0)))
        {
            if (INTERNAL_le_boogie(0, INTERNAL_sub_boogie(k#14, dof#0)))
            {
            }
        }
    }

    // End Comprehension WF check
    assume true;
    assert (forall k#15: int :: 
      { INTERNAL_sub_boogie(k#15, dof#0) } 
        { INTERNAL_lt_boogie(k#15, INTERNAL_mul_boogie(2, dof#0)) } 
        { INTERNAL_le_boogie(dof#0, k#15) } 
      INTERNAL_le_boogie(dof#0, k#15)
           && INTERNAL_lt_boogie(k#15, INTERNAL_mul_boogie(2, dof#0))
         ==> INTERNAL_le_boogie(0, INTERNAL_sub_boogie(k#15, dof#0))
           && INTERNAL_lt_boogie(INTERNAL_sub_boogie(k#15, dof#0), dof#0));
}



procedure {:_induction a#0} CheckWellformed$$_module.__default.LemmaShorOracle(dof#0: int where INTERNAL_le_boogie(0, dof#0), 
    c'#0: ref
       where $Is(c'#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c'#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation {:_induction a#0} CheckWellformed$$_module.__default.LemmaShorOracle(dof#0: int, c'#0: ref, a#0: int, N#0: int, i#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var k#0: int;
  var ##b#0: int;
  var ##e#0: int;
  var k#2: int;
  var ##e#1: int;
  var ##b#1: int;
  var ##e#2: int;
  var ##e#3: int;
  var k#4: int;
  var ##b#2: int;
  var ##e#4: int;

    // AddMethodImpl: LemmaShorOracle, CheckWellformed$$_module.__default.LemmaShorOracle
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_gt_boogie(N#0, 0);
    if (INTERNAL_le_boogie(0, INTERNAL_mul_boogie(2, dof#0)))
    {
        assert c'#0 != null;
    }

    assume INTERNAL_le_boogie(0, INTERNAL_mul_boogie(2, dof#0))
       && INTERNAL_le_boogie(INTERNAL_mul_boogie(2, dof#0), _System.array.Length(c'#0));
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assume INTERNAL_lt_boogie(k#0, dof#0);
        assert c'#0 != null;
        assert 0 <= k#0 && k#0 < _System.array.Length(c'#0);
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        assert $Is(k#0, Tclass._System.nat());
        ##e#0 := k#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#0);
        assert N#0 != 0;
        assume _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#0))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0), N#0)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, dof#0)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#0))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0), N#0)), 
              $Box(LitInt(1))));
    }

    assume (forall k#1: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
        { $Unbox(read($Heap, c'#0, IndexField(k#1))): DatatypeType } 
      INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#1))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1), N#0)), 
            $Box(LitInt(1)))));
    havoc k#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#2);
        assume INTERNAL_lt_boogie(k#2, dof#0);
        assert c'#0 != null;
        assert 0 <= INTERNAL_add_boogie(k#2, dof#0)
           && INTERNAL_add_boogie(k#2, dof#0) < _System.array.Length(c'#0);
        ##e#1 := i#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(i#0);
        ##b#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#1, TInt, $Heap);
        ##e#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#2, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0));
        assert c'#0 != null;
        assert 0 <= k#2 && k#2 < _System.array.Length(c'#0);
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#2))): DatatypeType);
        assert N#0 != 0;
        assert c'#0 != null;
        assert 0 <= k#2 && k#2 < _System.array.Length(c'#0);
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#2))): DatatypeType);
        assume _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#2, dof#0)))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#2))): DatatypeType)): int), 
                N#0)), 
            _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#2))): DatatypeType)));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#2) && INTERNAL_lt_boogie(k#2, dof#0)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#2, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                      a#0, 
                      Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                    $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#2))): DatatypeType)): int), 
                  N#0)), 
              _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#2))): DatatypeType)));
    }

    assume (forall k#3: int :: 
      { $Unbox(_System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int } 
        { $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int } 
        { INTERNAL_add_boogie(k#3, dof#0) } 
        { INTERNAL_lt_boogie(k#3, dof#0) } 
        { INTERNAL_le_boogie(0, k#3) } 
      INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#3, dof#0)))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                    a#0, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int), 
                N#0)), 
            _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType))));
    ##e#3 := i#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#3, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(i#0);
    assume Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0) == dof#0;
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc k#4;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#4);
        assume INTERNAL_lt_boogie(k#4, INTERNAL_mul_boogie(2, dof#0));
        assert c'#0 != null;
        assert 0 <= k#4 && k#4 < _System.array.Length(c'#0);
        ##b#2 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#2, TInt, $Heap);
        assert $Is(k#4, Tclass._System.nat());
        ##e#4 := k#4;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#4, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#4);
        assert N#0 != 0;
        assume _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#4))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#4), N#0)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#4)
             && INTERNAL_lt_boogie(k#4, INTERNAL_mul_boogie(2, dof#0))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#4))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#4), N#0)), 
              $Box(LitInt(1))));
    }

    assume (forall k#5: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
        { $Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType } 
      INTERNAL_le_boogie(0, k#5)
           && INTERNAL_lt_boogie(k#5, INTERNAL_mul_boogie(2, dof#0))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5), N#0)), 
            $Box(LitInt(1)))));
}



procedure {:_induction a#0} Call$$_module.__default.LemmaShorOracle(dof#0: int where INTERNAL_le_boogie(0, dof#0), 
    c'#0: ref
       where $Is(c'#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c'#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  // user-defined preconditions
  requires INTERNAL_gt_boogie(N#0, 0);
  requires INTERNAL_le_boogie(0, INTERNAL_mul_boogie(2, dof#0));
  requires INTERNAL_le_boogie(INTERNAL_mul_boogie(2, dof#0), _System.array.Length(c'#0));
  requires (forall k#1: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1), N#0)), 
          $Box(LitInt(1)))));
  requires (forall k#3: int :: 
    { $Unbox(_System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int } 
      { $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int } 
      { INTERNAL_add_boogie(k#3, dof#0) } 
      { INTERNAL_lt_boogie(k#3, dof#0) } 
      { INTERNAL_le_boogie(0, k#3) } 
    INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#3, dof#0)))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, 
                  a#0, 
                  Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#0)), 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int), 
              N#0)), 
          _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType))));
  requires Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#0) == dof#0;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, INTERNAL_mul_boogie(2, dof#0))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)
         && Power.__default.Pow#canCall(a#0, k#5));
  free ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, INTERNAL_mul_boogie(2, dof#0))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5), N#0)), 
          $Box(LitInt(1)))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:_induction a#0} Impl$$_module.__default.LemmaShorOracle(dof#0: int where INTERNAL_le_boogie(0, dof#0), 
    c'#0: ref
       where $Is(c'#0, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
         && $IsAlloc(c'#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
          $Heap), 
    a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    i#0: int where INTERNAL_le_boogie(0, i#0))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_gt_boogie(N#0, 0);
  requires INTERNAL_le_boogie(0, INTERNAL_mul_boogie(2, dof#0));
  requires INTERNAL_le_boogie(INTERNAL_mul_boogie(2, dof#0), _System.array.Length(c'#0));
  free requires (forall k#1: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1), N#0)), 
          $Box(LitInt(1)))));
  free requires (forall k#3: int :: 
    { $Unbox(_System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int } 
      { $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int } 
      { INTERNAL_add_boogie(k#3, dof#0) } 
      { INTERNAL_lt_boogie(k#3, dof#0) } 
      { INTERNAL_le_boogie(0, k#3) } 
    INTERNAL_le_boogie(0, k#3) && INTERNAL_lt_boogie(k#3, dof#0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#3, dof#0)))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                  a#0, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType)): int), 
              N#0)), 
          _System.Tuple2._1($Unbox(read($Heap, c'#0, IndexField(k#3))): DatatypeType))));
  requires Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#0) == dof#0;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, INTERNAL_mul_boogie(2, dof#0))
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType)
         && Power.__default.Pow#canCall(a#0, k#5));
  ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#5) } 
      { $Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, INTERNAL_mul_boogie(2, dof#0))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#5))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#5), N#0)), 
          $Box(LitInt(1)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:_induction a#0} Impl$$_module.__default.LemmaShorOracle(dof#0: int, c'#0: ref, a#0: int, N#0: int, i#0: int)
   returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $initHeapForallStmt#0: Heap;
  var k#0_0: int;
  var ##b#0_0_0_0: int;
  var ##e#0_0_0_0: int;
  var ##b#0_0_0_1: int;
  var ##e#0_0_0_1: int;
  var ##b#0_0_1_0: int;
  var ##e#0_0_1_0: int;
  var ##b#0_0_1_1: int;
  var ##e#0_0_1_1: int;
  var b##0_0_1_0: int;
  var e1##0_0_1_0: int;
  var e2##0_0_1_0: int;
  var ##b#0_0_1_2: int;
  var ##e#0_0_1_2: int;
  var ##b#0_0_2_0: int;
  var ##e#0_0_2_0: int;
  var ##b#0_0_2_1: int;
  var ##e#0_0_2_1: int;
  var ##b#0_0_2_2: int;
  var ##e#0_0_2_2: int;
  var ##b#0_0_2_3: int;
  var ##e#0_0_2_3: int;
  var ##b#0_0_3_0: int;
  var ##e#0_0_3_0: int;
  var ##b#0_0_3_1: int;
  var ##e#0_0_3_1: int;
  var ##b#0_0_3_2: int;
  var ##e#0_0_3_2: int;
  var ##b#0_0_3_3: int;
  var ##e#0_0_3_3: int;
  var ##b#0_0_4_0: int;
  var ##e#0_0_4_0: int;
  var ##b#0_0_4_1: int;
  var ##e#0_0_4_1: int;
  var ##b#0_0_4_2: int;
  var ##e#0_0_4_2: int;
  var ##b#0_0_0: int;
  var ##e#0_0_0: int;
  var k#9: int;
  var ##b#3: int;
  var ##e#5: int;
  var k#11: int;

    // AddMethodImpl: LemmaShorOracle, Impl$$_module.__default.LemmaShorOracle
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap, $Tick;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#a0#0: int :: 
      INTERNAL_le_boogie(0, $ih#a0#0)
           && 
          INTERNAL_gt_boogie(N#0, 0)
           && 
          INTERNAL_le_boogie(0, INTERNAL_mul_boogie(2, dof#0))
           && INTERNAL_le_boogie(INTERNAL_mul_boogie(2, dof#0), _System.array.Length(c'#0))
           && (forall k#6: int :: 
            { Power.__default.Pow(StartFuel_Power._default.Pow, $ih#a0#0, k#6) } 
              { $Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#6))): DatatypeType } 
            INTERNAL_le_boogie(0, k#6) && INTERNAL_lt_boogie(k#6, dof#0)
               ==> _System.Tuple2#Equal($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#6))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, $ih#a0#0, k#6), N#0)), 
                  $Box(LitInt(1)))))
           && (forall k#7: int :: 
            { $Unbox(_System.Tuple2._1($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#7))): DatatypeType)): int } 
              { $Unbox(_System.Tuple2._0($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#7))): DatatypeType)): int } 
              { INTERNAL_add_boogie(k#7, dof#0) } 
              { INTERNAL_lt_boogie(k#7, dof#0) } 
              { INTERNAL_le_boogie(0, k#7) } 
            INTERNAL_le_boogie(0, k#7) && INTERNAL_lt_boogie(k#7, dof#0)
               ==> _System.Tuple2#Equal($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(INTERNAL_add_boogie(k#7, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                          $ih#a0#0, 
                          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0)), 
                        $Unbox(_System.Tuple2._0($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#7))): DatatypeType)): int), 
                      N#0)), 
                  _System.Tuple2._1($Unbox(read($initHeapForallStmt#0, c'#0, IndexField(k#7))): DatatypeType))))
           && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#0) == dof#0
           && ((0 <= dof#0 && dof#0 < dof#0)
             || (dof#0 == dof#0
               && ((c'#0 == null && c'#0 != null)
                 || ((c'#0 != null <==> c'#0 != null)
                   && ((0 <= $ih#a0#0 && $ih#a0#0 < a#0)
                     || ($ih#a0#0 == a#0
                       && ((0 <= N#0 && N#0 < N#0) || (N#0 == N#0 && 0 <= i#0 && i#0 < i#0))))))))
         ==> (forall k#8: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, $ih#a0#0, k#8) } 
            { $Unbox(read($Heap, c'#0, IndexField(k#8))): DatatypeType } 
          INTERNAL_le_boogie(0, k#8)
               && INTERNAL_lt_boogie(k#8, INTERNAL_mul_boogie(2, dof#0))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(k#8))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, $ih#a0#0, k#8), N#0)), 
                $Box(LitInt(1))))));
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(413,3)
    if (*)
    {
        // Assume Fuel Constant
        havoc k#0_0;
        assume true;
        if (INTERNAL_le_boogie(0, k#0_0))
        {
        }

        assume true;
        assume INTERNAL_le_boogie(0, k#0_0) && INTERNAL_lt_boogie(k#0_0, dof#0);
        // ----- calc statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_0, TInt, $Heap);
            ##e#0_0_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= k#0_0 && k#0_0 < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType);
            assert {:subsumption 0} N#0 != 0;
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType);
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_4_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_4_0, TInt, $Heap);
            ##e#0_0_4_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_4_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= k#0_0 && k#0_0 < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType);
            assume {:subsumption 0} N#0 != 0;
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType);
            // ----- Hint0 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_4_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_4_1, TInt, $Heap);
            ##e#0_0_4_1 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_4_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_4_2 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_4_2, TInt, $Heap);
            assert $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_4_2 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_4_2, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assert {:subsumption 0} N#0 != 0;
            assert {:subsumption 0} N#0 != 0;
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- assert line0 == line1 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert {:subsumption 0} _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                        $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType)): int), 
                      N#0)), 
                  $Box(LitInt(1))))
               == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                        INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0), N#0)), 
                      N#0)), 
                  $Box(LitInt(1))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_3_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_3_0, TInt, $Heap);
            ##e#0_0_3_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_3_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_3_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_3_1, TInt, $Heap);
            assume $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_3_1 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_3_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assume {:subsumption 0} N#0 != 0;
            assume {:subsumption 0} N#0 != 0;
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- Hint1 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(417,32)
            // TrCallStmt: Before ProcessCallStmt
            // ProcessCallStmt: Make the call
            call Call$$DivMod.__default.LemmaMulModNoopRightAuto();
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_3_2 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_3_2, TInt, $Heap);
            ##e#0_0_3_2 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_3_2, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_3_3 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_3_3, TInt, $Heap);
            assert $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_3_3 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_3_3, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assert {:subsumption 0} N#0 != 0;
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- assert line1 == line2 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert {:subsumption 0} _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                        INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0), N#0)), 
                      N#0)), 
                  $Box(LitInt(1))))
               == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                        Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0)), 
                      N#0)), 
                  $Box(LitInt(1))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_2_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_2_0, TInt, $Heap);
            ##e#0_0_2_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_2_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_2_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_2_1, TInt, $Heap);
            assume $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_2_1 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_2_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assume {:subsumption 0} N#0 != 0;
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- Hint2 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType);
            ##b#0_0_2_2 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_2_2, TInt, $Heap);
            ##e#0_0_2_2 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_2_2, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_2_3 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_2_3, TInt, $Heap);
            assert $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_2_3 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_2_3, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assert {:subsumption 0} N#0 != 0;
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- assert line2 == line3 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert {:subsumption 0} _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                        Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0)), 
                      N#0)), 
                  $Box(LitInt(1))))
               == 
              ($Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)): int
               == INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                  Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0)), 
                N#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType);
            ##b#0_0_1_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_1_0, TInt, $Heap);
            ##e#0_0_1_0 := dof#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_1_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, dof#0);
            ##b#0_0_1_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_1_1, TInt, $Heap);
            assume $Is(k#0_0, Tclass._System.nat());
            ##e#0_0_1_1 := k#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_1_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#0_0);
            assume {:subsumption 0} N#0 != 0;
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && 
              Power.__default.Pow#canCall(a#0, dof#0)
               && Power.__default.Pow#canCall(a#0, k#0_0);
            // ----- Hint3 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(420,20)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_1_0 := a#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            e1##0_0_1_0 := dof#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert $Is(k#0_0, Tclass._System.nat());
            e2##0_0_1_0 := k#0_0;
            // ProcessCallStmt: Make the call
            call Call$$Power.__default.LemmaPowAdds(b##0_0_1_0, e1##0_0_1_0, e2##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType);
            ##b#0_0_1_2 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_1_2, TInt, $Heap);
            assert $Is(INTERNAL_add_boogie(dof#0, k#0_0), Tclass._System.nat());
            ##e#0_0_1_2 := INTERNAL_add_boogie(dof#0, k#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_1_2, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            assert {:subsumption 0} N#0 != 0;
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            // ----- assert line3 == line4 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert {:subsumption 0} ($Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)): int
               == INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                  Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#0_0)), 
                N#0))
               == 
              ($Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)): int
               == INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0)), 
                N#0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assume c'#0 != null;
            assume {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType);
            ##b#0_0_0_0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_0_0, TInt, $Heap);
            assume $Is(INTERNAL_add_boogie(dof#0, k#0_0), Tclass._System.nat());
            ##e#0_0_0_0 := INTERNAL_add_boogie(dof#0, k#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_0_0, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            assume {:subsumption 0} N#0 != 0;
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            // ----- Hint4 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#0_0, dof#0)
               && INTERNAL_add_boogie(k#0_0, dof#0) < _System.array.Length(c'#0);
            ##b#0_0_0_1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0_0_1, TInt, $Heap);
            assert $Is(INTERNAL_add_boogie(dof#0, k#0_0), Tclass._System.nat());
            ##e#0_0_0_1 := INTERNAL_add_boogie(dof#0, k#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_0_1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            assert {:subsumption 0} N#0 != 0;
            assume $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#0_0));
            // ----- assert line4 == line5 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(414,5)
            assert {:subsumption 0} ($Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType)): int
               == INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0)), 
                N#0))
               == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0)), 
                      N#0)), 
                  $Box(LitInt(1))));
            assume false;
        }

        assume _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, dof#0), 
                    $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType)): int), 
                  N#0)), 
              $Box(LitInt(1))))
           == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0)), 
                  N#0)), 
              $Box(LitInt(1))));
        assert _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, dof#0), 
                    $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_0))): DatatypeType)): int), 
                  N#0)), 
              $Box(LitInt(1))))
           == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_0, dof#0)))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_0)), 
                  N#0)), 
              $Box(LitInt(1))));
        assume false;
    }
    else
    {
        assume (forall k#0_1: int :: 
          { INTERNAL_add_boogie(dof#0, k#0_1) } 
            { $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_1))): DatatypeType)): int } 
            { INTERNAL_add_boogie(k#0_1, dof#0) } 
            { INTERNAL_lt_boogie(k#0_1, dof#0) } 
            { INTERNAL_le_boogie(0, k#0_1) } 
          INTERNAL_le_boogie(0, k#0_1) && INTERNAL_lt_boogie(k#0_1, dof#0)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_1, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(INTERNAL_mul_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, dof#0), 
                        $Unbox(_System.Tuple2._0($Unbox(read($Heap, c'#0, IndexField(k#0_1))): DatatypeType)): int), 
                      N#0)), 
                  $Box(LitInt(1))))
               == _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#0_1, dof#0)))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#0_1)), 
                      N#0)), 
                  $Box(LitInt(1)))));
    }

    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(425,3)
    // Begin Comprehension WF check
    havoc k#9;
    if (true)
    {
        if (INTERNAL_le_boogie(0, k#9))
        {
        }

        if (INTERNAL_le_boogie(0, k#9) && INTERNAL_lt_boogie(k#9, dof#0))
        {
            assert c'#0 != null;
            assert {:subsumption 0} 0 <= INTERNAL_add_boogie(k#9, dof#0)
               && INTERNAL_add_boogie(k#9, dof#0) < _System.array.Length(c'#0);
            ##b#3 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#3, TInt, $Heap);
            assert $Is(INTERNAL_add_boogie(dof#0, k#9), Tclass._System.nat());
            ##e#5 := INTERNAL_add_boogie(dof#0, k#9);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#5, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#9));
            assert {:subsumption 0} N#0 != 0;
        }
    }

    // End Comprehension WF check
    assume (forall k#10: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#10)) } 
        { $Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#10, dof#0)))): DatatypeType } 
      INTERNAL_le_boogie(0, k#10) && INTERNAL_lt_boogie(k#10, dof#0)
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#10, dof#0)))): DatatypeType)
           && Power.__default.Pow#canCall(a#0, INTERNAL_add_boogie(dof#0, k#10)));
    assert {:subsumption 0} (forall k#10: int :: 
      { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#10)) } 
        { $Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#10, dof#0)))): DatatypeType } 
      INTERNAL_le_boogie(0, k#10) && INTERNAL_lt_boogie(k#10, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#10, dof#0)))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#10)), 
                N#0)), 
            $Box(LitInt(1)))));
    assume (forall k#10: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#10)) } 
        { $Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#10, dof#0)))): DatatypeType } 
      INTERNAL_le_boogie(0, k#10) && INTERNAL_lt_boogie(k#10, dof#0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, c'#0, IndexField(INTERNAL_add_boogie(k#10, dof#0)))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, INTERNAL_add_boogie(dof#0, k#10)), 
                N#0)), 
            $Box(LitInt(1)))));
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(426,3)
    // Begin Comprehension WF check
    havoc k#11;
    if (true)
    {
        if (INTERNAL_le_boogie(dof#0, k#11))
        {
        }

        if (INTERNAL_le_boogie(dof#0, k#11)
           && INTERNAL_lt_boogie(k#11, INTERNAL_mul_boogie(2, dof#0)))
        {
            if (INTERNAL_le_boogie(0, INTERNAL_sub_boogie(k#11, dof#0)))
            {
            }
        }
    }

    // End Comprehension WF check
    assume true;
    assert (forall k#12: int :: 
      { INTERNAL_sub_boogie(k#12, dof#0) } 
        { INTERNAL_lt_boogie(k#12, INTERNAL_mul_boogie(2, dof#0)) } 
        { INTERNAL_le_boogie(dof#0, k#12) } 
      INTERNAL_le_boogie(dof#0, k#12)
           && INTERNAL_lt_boogie(k#12, INTERNAL_mul_boogie(2, dof#0))
         ==> INTERNAL_le_boogie(0, INTERNAL_sub_boogie(k#12, dof#0))
           && INTERNAL_lt_boogie(INTERNAL_sub_boogie(k#12, dof#0), dof#0));
}



procedure CheckWellformed$$_module.__default.Shor0(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap))
   returns (x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.Shor0(a#0: int, N#0: int, n#0: int, x#0: ref, y#0: ref) returns (x'#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var i#0: int;
  var i#2: int;
  var i#4: int;
  var k#0: int;
  var ##b#0: int;
  var ##e#0: int;

    // AddMethodImpl: Shor0, CheckWellformed$$_module.__default.Shor0
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == x#0
           || $o == y#0
           || $o == _module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
    assume INTERNAL_ge_boogie(N#0, 2);
    assume x#0 != y#0;
    assert x#0 != null;
    assert y#0 != null;
    assume !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
    assert x#0 != null;
    if (n#0 == read($Heap, x#0, _module.Qubits.card))
    {
        assert x#0 != null;
        assert y#0 != null;
    }

    if (n#0 == read($Heap, x#0, _module.Qubits.card)
       && read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card))
    {
        assert y#0 != null;
    }

    assume n#0 == read($Heap, x#0, _module.Qubits.card)
       && read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card)
       && INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
    assert x#0 != null;
    assume _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
    assert y#0 != null;
    assume _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
    assert x#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x#0);
    assume _module.Qubits.Wf($Heap, x#0);
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    // Begin Comprehension WF check
    havoc i#0;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#0))
        {
        }

        if (INTERNAL_le_boogie(0, i#0) && INTERNAL_lt_boogie(i#0, n#0))
        {
            assert x#0 != null;
            assert _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, x#0, _module.Qubits.m)) != null;
            assert 0 <= i#0
               && i#0 < _System.array.Length(_module.Mode.b(read($Heap, x#0, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume (forall i#1: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
      INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
           == LitInt(0));
    // Begin Comprehension WF check
    havoc i#2;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#2))
        {
        }

        if (INTERNAL_le_boogie(0, i#2) && INTERNAL_lt_boogie(i#2, n#0))
        {
            assert y#0 != null;
            assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, y#0, _module.Qubits.m)) != null;
            assert 0 <= i#2
               && i#2 < _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume (forall i#3: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int } 
      INTERNAL_le_boogie(0, i#3) && INTERNAL_lt_boogie(i#3, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int
           == LitInt(0));
    assert y#0 != null;
    assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == x#0
           || $o == y#0
           || $o == _module.Mode.b(read(old($Heap), y#0, _module.Qubits.m)));
    assume $HeapSucc(old($Heap), $Heap);
    havoc x'#0;
    assume x#0 != y#0;
    assert x#0 != null;
    assert y#0 != null;
    assume !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
    assert x#0 != null;
    if (n#0 == read($Heap, x#0, _module.Qubits.card))
    {
        assert x#0 != null;
        assert y#0 != null;
    }

    if (n#0 == read($Heap, x#0, _module.Qubits.card)
       && read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card))
    {
        assert y#0 != null;
    }

    assume n#0 == read($Heap, x#0, _module.Qubits.card)
       && read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card)
       && INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
    assert x#0 != null;
    assume _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
    assert y#0 != null;
    assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert x#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x#0);
    assume _module.Qubits.Wf($Heap, x#0);
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assume _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)) == LitInt(1);
    havoc i#4;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#4);
        assert x#0 != null;
        assume INTERNAL_lt_boogie(i#4, read($Heap, x#0, _module.Qubits.card));
        assert x#0 != null;
        assert _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.h(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= i#4
           && i#4 < _System.array.Length(_module.Mode.h(read($Heap, x#0, _module.Qubits.m)));
        assume $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#4))): int
           == LitInt(1);
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#4)
             && INTERNAL_lt_boogie(i#4, read($Heap, x#0, _module.Qubits.card))
           ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#4))): int
             == LitInt(1);
    }

    assume (forall i#5: int :: 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#5))): int } 
      INTERNAL_le_boogie(0, i#5)
           && INTERNAL_lt_boogie(i#5, read($Heap, x#0, _module.Qubits.card))
         ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#5))): int
           == LitInt(1));
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assume INTERNAL_lt_boogie(k#0, 1);
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= k#0
           && k#0 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        assert $Is(k#0, Tclass._System.nat());
        ##e#0 := k#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#0);
        assert N#0 != 0;
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0), N#0)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, 1)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0), N#0)), 
              $Box(LitInt(1))));
    }

    assume (forall k#1: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
      INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, 1)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1), N#0)), 
            $Box(LitInt(1)))));
    assume x'#0 != null && !read(old($Heap), x'#0, alloc);
    assert x'#0 != null;
    assume _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert x'#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x'#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x'#0);
    assume _module.Qubits.Wf($Heap, x'#0);
    assert x'#0 != null;
    assume read($Heap, x'#0, _module.Qubits.card) == LitInt(0);
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)) == LitInt(1);
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)) != null;
    assert 0 <= LitInt(0)
       && LitInt(0)
         < _System.array.Length(_module.Mode.c(read($Heap, x'#0, _module.Qubits.m)));
    assume _System.Tuple2#Equal($Unbox(read($Heap, 
          _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), 
          IndexField(LitInt(0)))): DatatypeType, 
      #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
}



procedure Call$$_module.__default.Shor0(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap))
   returns (x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires x#0 != y#0;
  requires !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
  requires n#0 == read($Heap, x#0, _module.Qubits.card);
  requires read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#2 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#2) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#2 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#2) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, tmp#1))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, _System.array.Length(c#2)))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  requires (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(0));
  requires (forall i#3: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int } 
    INTERNAL_le_boogie(0, i#3) && INTERNAL_lt_boogie(i#3, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int
         == LitInt(0));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures x#0 != y#0
     ==> $IsA#_module.Mode(read($Heap, x#0, _module.Qubits.m))
       && $IsA#_module.Mode(read($Heap, y#0, _module.Qubits.m));
  ensures x#0 != y#0;
  ensures !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
  free ensures true;
  ensures n#0 == read($Heap, x#0, _module.Qubits.card);
  ensures read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  ensures INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  free ensures _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
     ==> 
    _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x#0)
       && (_module.Qubits.Wf($Heap, x#0) ==> _module.Qubits.Wf#canCall($Heap, y#0));
  ensures _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
  ensures _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, x#0)
     && 
    _module.Qubits.Wf($Heap, x#0)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, x#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, x#0, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))))));
  free ensures _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#3 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#7 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#7) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#7 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#7) == read($Heap, y#0, _module.Qubits.card))
           else (var c#7 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#7 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#7, tmp#3)
                 && INTERNAL_le_boogie(dof#7, _System.array.Length(c#7))
                 && INTERNAL_le_boogie(dof#7, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  ensures _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)) == LitInt(1);
  free ensures true;
  ensures (forall i#5: int :: 
    { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#5))): int } 
    INTERNAL_le_boogie(0, i#5)
         && INTERNAL_lt_boogie(i#5, read($Heap, x#0, _module.Qubits.card))
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#5))): int
         == LitInt(1));
  free ensures (forall k#1: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, 1)
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)
         && Power.__default.Pow#canCall(a#0, k#1));
  free ensures (forall k#1: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, 1)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1), N#0)), 
          $Box(LitInt(1)))));
  free ensures true;
  ensures x'#0 != null && !read(old($Heap), x'#0, alloc);
  free ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x'#0);
  ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     && 
    _module.Qubits.Wf($Heap, x'#0)
     && (var tmp#4 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
         then (var b#9 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
          _System.array.Length(b#9) == read($Heap, x'#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           then (var h#9 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#9) == read($Heap, x'#0, _module.Qubits.card))
           else (var c#9 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#9 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#9, tmp#4)
                 && INTERNAL_le_boogie(dof#9, _System.array.Length(c#9))
                 && INTERNAL_le_boogie(dof#9, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))))));
  ensures read($Heap, x'#0, _module.Qubits.card) == LitInt(0);
  free ensures _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)) == LitInt(1)
     ==> $IsA#_System.Tuple2($Unbox(read($Heap, 
          _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), 
          IndexField(LitInt(0)))): DatatypeType);
  ensures _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)) == LitInt(1);
  ensures _System.Tuple2#Equal($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType, 
    #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == x#0
         || $o == y#0
         || $o == _module.Mode.b(read(old($Heap), y#0, _module.Qubits.m)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.__default.Shor0(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap))
   returns (defass#x'#0: bool, 
    x'#0: ref
       where defass#x'#0
         ==> $Is(x'#0, Tclass._module.Qubits())
           && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap), 
    $_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires x#0 != y#0;
  requires !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
  requires n#0 == read($Heap, x#0, _module.Qubits.card);
  requires read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, x#0)
     && 
    _module.Qubits.Wf($Heap, x#0)
     && (var tmp#5 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
         then (var b#11 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
          _System.array.Length(b#11) == read($Heap, x#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           then (var h#11 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#11) == read($Heap, x#0, _module.Qubits.card))
           else (var c#11 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#11 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#11, tmp#5)
                 && INTERNAL_le_boogie(dof#11, _System.array.Length(c#11))
                 && INTERNAL_le_boogie(dof#11, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))))));
  free requires _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#6 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#13 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#13) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#13 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#13) == read($Heap, y#0, _module.Qubits.card))
           else (var c#13 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#13 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#13, tmp#6)
                 && INTERNAL_le_boogie(dof#13, _System.array.Length(c#13))
                 && INTERNAL_le_boogie(dof#13, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  requires (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(0));
  requires (forall i#3: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int } 
    INTERNAL_le_boogie(0, i#3) && INTERNAL_lt_boogie(i#3, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int
         == LitInt(0));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures x#0 != y#0
     ==> $IsA#_module.Mode(read($Heap, x#0, _module.Qubits.m))
       && $IsA#_module.Mode(read($Heap, y#0, _module.Qubits.m));
  ensures x#0 != y#0;
  ensures !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
  free ensures true;
  ensures n#0 == read($Heap, x#0, _module.Qubits.card);
  ensures read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  ensures INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  free ensures _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
     ==> 
    _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x#0)
       && (_module.Qubits.Wf($Heap, x#0) ==> _module.Qubits.Wf#canCall($Heap, y#0));
  ensures _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
  ensures _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var b#14 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(b#14) == read($Heap, x#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var h#14 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#14) == read($Heap, x#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#14 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#14 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#14, tmp#7))));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#14 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#14 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#14, _System.array.Length(c#14)))));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#14 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#14 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#14, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#16 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#16) == read($Heap, y#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#16 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#16) == read($Heap, y#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#16 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#16 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#16, tmp#8))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#16 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#16 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#16, _System.array.Length(c#16)))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#16 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#16 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#16, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  ensures _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)) == LitInt(1);
  free ensures true;
  ensures (forall i#5: int :: 
    { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#5))): int } 
    INTERNAL_le_boogie(0, i#5)
         && INTERNAL_lt_boogie(i#5, read($Heap, x#0, _module.Qubits.card))
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#5))): int
         == LitInt(1));
  free ensures (forall k#1: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, 1)
       ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)
         && Power.__default.Pow#canCall(a#0, k#1));
  ensures (forall k#1: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, 1)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1), N#0)), 
          $Box(LitInt(1)))));
  free ensures true;
  ensures x'#0 != null && !read(old($Heap), x'#0, alloc);
  free ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x'#0);
  ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var b#18 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(b#18) == read($Heap, x'#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var h#18 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#18) == read($Heap, x'#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#18 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#18 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#18, tmp#9))));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#18 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#18 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#18, _System.array.Length(c#18)))));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#18 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#18 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#18, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))));
  ensures read($Heap, x'#0, _module.Qubits.card) == LitInt(0);
  free ensures _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)) == LitInt(1)
     ==> $IsA#_System.Tuple2($Unbox(read($Heap, 
          _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), 
          IndexField(LitInt(0)))): DatatypeType);
  ensures _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)) == LitInt(1);
  ensures _System.Tuple2#Equal($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType, 
    #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == x#0
         || $o == y#0
         || $o == _module.Mode.b(read(old($Heap), y#0, _module.Qubits.m)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.__default.Shor0(a#0: int, N#0: int, n#0: int, x#0: ref, y#0: ref)
   returns (defass#x'#0: bool, x'#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var tmp#10: DatatypeType
     where $Is(tmp#10, Tclass._module.Mode())
       && $IsAlloc(tmp#10, Tclass._module.Mode(), $Heap);
  var i##0: int;
  var a##0: ref;
  var l##0: int;
  var i##1: int;
  var ##a#0: ref;
  var ##i#0: int;
  var ##j#0: int;
  var ##a#1: ref;
  var ##i#1: int;
  var ##j#1: int;
  var ##a#2: ref;
  var ##i#2: int;
  var ##j#2: int;
  var i#6: int;
  var i#8: int;
  var i#10: int;
  var i#12: int;
  var len_x#0: int where INTERNAL_le_boogie(0, len_x#0);
  var $nw: ref;
  var x##0: int;
  var m##0: int;
  var k#5: int;
  var ##b#1: int;
  var ##e#1: int;

    // AddMethodImpl: Shor0, Impl$$_module.__default.Shor0
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == x#0
           || $o == y#0
           || $o == _module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(448,17)
    assume true;
    assert y#0 != null;
    assume true;
    tmp#10 := read($Heap, y#0, _module.Qubits.m);
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(449,8)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert y#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert $Is(LitInt(0), Tclass._System.nat());
    i##0 := LitInt(0);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && read($Heap, $o, alloc)
           && $o == _module.Mode.b(read($Heap, y#0, _module.Qubits.m))
         ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call Call$$_module.Qubits.Xat(y#0, i##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(450,28)
    // TrCallStmt: Before ProcessCallStmt
    assert y#0 != null;
    assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m));
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert $Is(LitInt(0), Tclass._System.nat());
    l##0 := LitInt(0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert $Is(LitInt(1), Tclass._System.nat());
    i##1 := LitInt(1);
    // ProcessCallStmt: Make the call
    call Call$$B2N.__default.LemmaB2NArrayTailingZeros(a##0, l##0, i##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- reveal statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(451,3)
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(451,16)
    // TrCallStmt: Before ProcessCallStmt
    // ProcessCallStmt: Make the call
    call Call$$B2N.__default.reveal__b2nAux();
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(452,3)
    assert {:subsumption 0} y#0 != null;
    assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
    assert {:subsumption 0} y#0 != null;
    assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
    assert {:subsumption 0} _module.Mode.b(read($Heap, y#0, _module.Qubits.m)) != null;
    ##a#0 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m));
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#0, Tclass._System.array(Tclass._System.nat()), $Heap);
    assert $Is(LitInt(0), Tclass._System.nat());
    ##i#0 := LitInt(0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##i#0, Tclass._System.nat(), $Heap);
    assert $Is(_System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m))), 
      Tclass._System.nat());
    ##j#0 := _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
    // assume allocatedness for argument to function
    assume $IsAlloc(##j#0, Tclass._System.nat(), $Heap);
    assert {:subsumption 0} INTERNAL_le_boogie(0, ##i#0);
    assert {:subsumption 0} INTERNAL_le_boogie(##i#0, ##j#0);
    assert {:subsumption 0} INTERNAL_le_boogie(##j#0, _System.array.Length(##a#0));
    assert {:subsumption 0} (forall k#2: int :: 
      { $Unbox(read($Heap, ##a#0, IndexField(k#2))): int } 
      INTERNAL_le_boogie(0, k#2)
           && INTERNAL_lt_boogie(k#2, _System.array.Length(##a#0))
         ==> $Unbox(read($Heap, ##a#0, IndexField(k#2))): int == LitInt(0)
           || $Unbox(read($Heap, ##a#0, IndexField(k#2))): int == LitInt(1));
    assume B2N.__default.b2nAux#canCall($Heap, 
      _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
      LitInt(0), 
      _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m))));
    assert {:subsumption 0} y#0 != null;
    assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
    ##a#1 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m));
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#1, Tclass._System.array(Tclass._System.nat()), $Heap);
    assert $Is(LitInt(0), Tclass._System.nat());
    ##i#1 := LitInt(0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##i#1, Tclass._System.nat(), $Heap);
    assert $Is(LitInt(1), Tclass._System.nat());
    ##j#1 := LitInt(1);
    // assume allocatedness for argument to function
    assume $IsAlloc(##j#1, Tclass._System.nat(), $Heap);
    assert {:subsumption 0} INTERNAL_le_boogie(0, ##i#1);
    assert {:subsumption 0} INTERNAL_le_boogie(##i#1, ##j#1);
    assert {:subsumption 0} INTERNAL_le_boogie(##j#1, _System.array.Length(##a#1));
    assert {:subsumption 0} (forall k#3: int :: 
      { $Unbox(read($Heap, ##a#1, IndexField(k#3))): int } 
      INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, _System.array.Length(##a#1))
         ==> $Unbox(read($Heap, ##a#1, IndexField(k#3))): int == LitInt(0)
           || $Unbox(read($Heap, ##a#1, IndexField(k#3))): int == LitInt(1));
    assume B2N.__default.b2nAux#canCall($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), LitInt(0), LitInt(1));
    if (B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
        $Heap, 
        _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
        LitInt(0), 
        _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m))))
       == B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
        $Heap, 
        _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
        LitInt(0), 
        LitInt(1)))
    {
        assert {:subsumption 0} y#0 != null;
        assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
        ##a#2 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m));
        // assume allocatedness for argument to function
        assume $IsAlloc(##a#2, Tclass._System.array(Tclass._System.nat()), $Heap);
        assert $Is(LitInt(0), Tclass._System.nat());
        ##i#2 := LitInt(0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##i#2, Tclass._System.nat(), $Heap);
        assert $Is(LitInt(1), Tclass._System.nat());
        ##j#2 := LitInt(1);
        // assume allocatedness for argument to function
        assume $IsAlloc(##j#2, Tclass._System.nat(), $Heap);
        assert {:subsumption 0} INTERNAL_le_boogie(0, ##i#2);
        assert {:subsumption 0} INTERNAL_le_boogie(##i#2, ##j#2);
        assert {:subsumption 0} INTERNAL_le_boogie(##j#2, _System.array.Length(##a#2));
        assert {:subsumption 0} (forall k#4: int :: 
          { $Unbox(read($Heap, ##a#2, IndexField(k#4))): int } 
          INTERNAL_le_boogie(0, k#4)
               && INTERNAL_lt_boogie(k#4, _System.array.Length(##a#2))
             ==> $Unbox(read($Heap, ##a#2, IndexField(k#4))): int == LitInt(0)
               || $Unbox(read($Heap, ##a#2, IndexField(k#4))): int == LitInt(1));
        assume B2N.__default.b2nAux#canCall($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), LitInt(0), LitInt(1));
        assert {:subsumption 0} y#0 != null;
        assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.b(read($Heap, y#0, _module.Qubits.m)) != null;
        assert {:subsumption 0} 0 <= LitInt(0)
           && LitInt(0)
             < _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
    }

    if (B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
          $Heap, 
          _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
          LitInt(0), 
          _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m))))
         == B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
          $Heap, 
          _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
          LitInt(0), 
          LitInt(1))
       && B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
          $Heap, 
          _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
          LitInt(0), 
          LitInt(1))
         == $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(LitInt(0)))): int)
    {
        assert {:subsumption 0} y#0 != null;
        assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.b(read($Heap, y#0, _module.Qubits.m)) != null;
        assert {:subsumption 0} 0 <= LitInt(0)
           && LitInt(0)
             < _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
    }

    assume B2N.__default.b2nAux#canCall($Heap, 
        _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
        LitInt(0), 
        _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m))))
       && B2N.__default.b2nAux#canCall($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), LitInt(0), LitInt(1))
       && (B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
            $Heap, 
            _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
            LitInt(0), 
            _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m))))
           == B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
            $Heap, 
            _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
            LitInt(0), 
            LitInt(1))
         ==> B2N.__default.b2nAux#canCall($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), LitInt(0), LitInt(1)));
    assert {:subsumption 0} B2N.__default.b2nAux(StartFuelAssert_B2N._default.b2nAux, 
        $Heap, 
        _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
        LitInt(0), 
        _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m))))
       == B2N.__default.b2nAux(StartFuelAssert_B2N._default.b2nAux, 
        $Heap, 
        _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
        LitInt(0), 
        LitInt(1));
    assert {:subsumption 0} B2N.__default.b2nAux(StartFuelAssert_B2N._default.b2nAux, 
        $Heap, 
        _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
        LitInt(0), 
        LitInt(1))
       == $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(LitInt(0)))): int;
    assert {:subsumption 0} $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(LitInt(0)))): int
       == LitInt(1);
    assume B2N.__default.b2nAux(StartFuelAssert_B2N._default.b2nAux, 
          $Heap, 
          _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
          LitInt(0), 
          _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m))))
         == B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
          $Heap, 
          _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
          LitInt(0), 
          LitInt(1))
       && B2N.__default.b2nAux(StartFuel_B2N._default.b2nAux, 
          $Heap, 
          _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), 
          LitInt(0), 
          LitInt(1))
         == $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(LitInt(0)))): int
       && $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(LitInt(0)))): int
         == LitInt(1);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(453,3)
    // Begin Comprehension WF check
    havoc i#6;
    if (true)
    {
        if (INTERNAL_le_boogie(1, i#6))
        {
        }

        if (INTERNAL_le_boogie(1, i#6) && INTERNAL_lt_boogie(i#6, n#0))
        {
            assert {:subsumption 0} y#0 != null;
            assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, y#0, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= i#6
               && i#6 < _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume true;
    assert (forall i#7: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#7))): int } 
      INTERNAL_le_boogie(1, i#7) && INTERNAL_lt_boogie(i#7, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#7))): int
           == LitInt(0));
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(454,3)
    // Begin Comprehension WF check
    havoc i#8;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#8))
        {
        }

        if (INTERNAL_le_boogie(0, i#8) && INTERNAL_lt_boogie(i#8, n#0))
        {
            assert {:subsumption 0} x#0 != null;
            assert _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, x#0, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= i#8
               && i#8 < _System.array.Length(_module.Mode.b(read($Heap, x#0, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume true;
    assert (forall i#9: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#9))): int } 
      INTERNAL_le_boogie(0, i#9) && INTERNAL_lt_boogie(i#9, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#9))): int
           == LitInt(0));
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(455,13)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert y#0 != null;
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) && $o == y#0 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call Call$$_module.Qubits.NorRetCH(y#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(457,3)
    assert {:subsumption 0} y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
    assert {:subsumption 0} 0 <= LitInt(0)
       && LitInt(0)
         < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
    assume $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(LitInt(0)))): DatatypeType);
    assert _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(LitInt(0)))): DatatypeType, 
      #_System._tuple#2._#Make2($Box(LitInt(1)), $Box(LitInt(1))));
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(458,3)
    assert {:subsumption 0} y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assume true;
    assert _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)) == LitInt(1);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(459,3)
    // Begin Comprehension WF check
    havoc i#10;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#10))
        {
        }

        if (INTERNAL_le_boogie(0, i#10) && INTERNAL_lt_boogie(i#10, n#0))
        {
            assert {:subsumption 0} x#0 != null;
            assert _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, x#0, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= i#10
               && i#10 < _System.array.Length(_module.Mode.b(read($Heap, x#0, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume true;
    assert (forall i#11: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#11))): int } 
      INTERNAL_le_boogie(0, i#11) && INTERNAL_lt_boogie(i#11, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#11))): int
           == LitInt(0));
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(460,6)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert x#0 != null;
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) && $o == x#0 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call Call$$_module.Qubits.H(x#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(461,3)
    // Begin Comprehension WF check
    havoc i#12;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#12))
        {
            assert {:subsumption 0} x#0 != null;
        }

        if (INTERNAL_le_boogie(0, i#12)
           && INTERNAL_lt_boogie(i#12, read($Heap, x#0, _module.Qubits.card)))
        {
            assert {:subsumption 0} x#0 != null;
            assert _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
            assert _module.Mode.h(read($Heap, x#0, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= i#12
               && i#12 < _System.array.Length(_module.Mode.h(read($Heap, x#0, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume true;
    assert (forall i#13: int :: 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#13))): int } 
      INTERNAL_le_boogie(0, i#13)
           && INTERNAL_lt_boogie(i#13, read($Heap, x#0, _module.Qubits.card))
         ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#13))): int
           == LitInt(1));
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(464,19)
    assume true;
    assert x#0 != null;
    assume true;
    len_x#0 := read($Heap, x#0, _module.Qubits.card);
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(469,6)
    assume true;
    // ----- init call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(469,20)
    // TrCallStmt: Before ProcessCallStmt
    // ProcessCallStmt: Make the call
    call $nw := Call$$_module.Qubits.EmptyCH();
    // TrCallStmt: After ProcessCallStmt
    x'#0 := $nw;
    defass#x'#0 := true;
    // ----- reveal statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(470,3)
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(470,14)
    // TrCallStmt: Before ProcessCallStmt
    // ProcessCallStmt: Make the call
    call Call$$Power2.__default.reveal__Pow2();
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(471,3)
    assert {:subsumption 0} y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assume true;
    assert _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)) == LitInt(1);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(472,3)
    assert {:subsumption 0} y#0 != null;
    assume true;
    assert read($Heap, y#0, _module.Qubits.card) == len_x#0;
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(473,16)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert $Is(LitInt(1), Tclass._System.nat());
    x##0 := LitInt(1);
    assume true;
    // ProcessCallStmt: CheckSubrange
    m##0 := N#0;
    // ProcessCallStmt: Make the call
    call Call$$DivMod.__default.LemmaSmallMod(x##0, m##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(474,3)
    // Begin Comprehension WF check
    havoc k#5;
    if (true)
    {
        if (INTERNAL_le_boogie(0, k#5))
        {
        }

        if (INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, 1))
        {
            assert {:subsumption 0} y#0 != null;
            assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
            assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= k#5
               && k#5 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
            ##b#1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#1, TInt, $Heap);
            assert $Is(k#5, Tclass._System.nat());
            ##e#1 := k#5;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#5);
            assert {:subsumption 0} N#0 != 0;
        }
    }

    // End Comprehension WF check
    assume (forall k#6: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#6) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType } 
      INTERNAL_le_boogie(0, k#6) && INTERNAL_lt_boogie(k#6, 1)
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType)
           && Power.__default.Pow#canCall(a#0, k#6));
    assert {:subsumption 0} (forall k#6: int :: 
      { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#6) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType } 
      INTERNAL_le_boogie(0, k#6) && INTERNAL_lt_boogie(k#6, 1)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#6), N#0)), 
            $Box(LitInt(1)))));
    assume (forall k#6: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#6) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType } 
      INTERNAL_le_boogie(0, k#6) && INTERNAL_lt_boogie(k#6, 1)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#6), N#0)), 
            $Box(LitInt(1)))));
    assert defass#x'#0;
}



procedure CheckWellformed$$_module.__default.Shor1(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.Shor1(a#0: int, N#0: int, n#0: int, x#0: ref, y#0: ref, x'#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var i#0: int;
  var k#0: int;
  var ##b#0: int;
  var ##e#0: int;
  var ##e#1: int;
  var ##e#2: int;
  var ##e#3: int;
  var k#2: int;
  var ##e#4: int;
  var k#4: int;
  var ##e#5: int;
  var ##b#1: int;
  var ##e#6: int;

    // AddMethodImpl: Shor1, CheckWellformed$$_module.__default.Shor1
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == x#0 || $o == y#0 || $o == x'#0);
    assume INTERNAL_ge_boogie(N#0, 2);
    assume x#0 != y#0;
    assert x#0 != null;
    assert y#0 != null;
    assume !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
    assert x#0 != null;
    if (n#0 == read($Heap, x#0, _module.Qubits.card))
    {
        assert x#0 != null;
        assert y#0 != null;
    }

    if (n#0 == read($Heap, x#0, _module.Qubits.card)
       && read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card))
    {
        assert y#0 != null;
    }

    assume n#0 == read($Heap, x#0, _module.Qubits.card)
       && read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card)
       && INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
    assert x#0 != null;
    assume _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
    assert y#0 != null;
    assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert x#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x#0);
    assume _module.Qubits.Wf($Heap, x#0);
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assume _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)) == LitInt(1);
    havoc i#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, i#0);
        assert x#0 != null;
        assume INTERNAL_lt_boogie(i#0, read($Heap, x#0, _module.Qubits.card));
        assert x#0 != null;
        assert _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.h(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= i#0
           && i#0 < _System.array.Length(_module.Mode.h(read($Heap, x#0, _module.Qubits.m)));
        assume $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#0))): int
           == LitInt(1);
    }
    else
    {
        assume INTERNAL_le_boogie(0, i#0)
             && INTERNAL_lt_boogie(i#0, read($Heap, x#0, _module.Qubits.card))
           ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#0))): int
             == LitInt(1);
    }

    assume (forall i#1: int :: 
      { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
      INTERNAL_le_boogie(0, i#1)
           && INTERNAL_lt_boogie(i#1, read($Heap, x#0, _module.Qubits.card))
         ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
           == LitInt(1));
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assume INTERNAL_lt_boogie(k#0, 1);
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= k#0
           && k#0 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        assert $Is(k#0, Tclass._System.nat());
        ##e#0 := k#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#0);
        assert N#0 != 0;
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0), N#0)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, 1)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#0), N#0)), 
              $Box(LitInt(1))));
    }

    assume (forall k#1: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
      INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, 1)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1), N#0)), 
            $Box(LitInt(1)))));
    assert x'#0 != null;
    assume _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert x'#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x'#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x'#0);
    assume _module.Qubits.Wf($Heap, x'#0);
    assert x'#0 != null;
    assume read($Heap, x'#0, _module.Qubits.card) == LitInt(0);
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)) == LitInt(1);
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)) != null;
    assert 0 <= LitInt(0)
       && LitInt(0)
         < _System.array.Length(_module.Mode.c(read($Heap, x'#0, _module.Qubits.m)));
    assume _System.Tuple2#Equal($Unbox(read($Heap, 
          _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), 
          IndexField(LitInt(0)))): DatatypeType, 
      #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o] || $o == x#0 || $o == y#0 || $o == x'#0);
    assume $HeapSucc(old($Heap), $Heap);
    assert x'#0 != null;
    if (n#0 == read($Heap, x'#0, _module.Qubits.card))
    {
        assert x'#0 != null;
        assert y#0 != null;
    }

    if (n#0 == read($Heap, x'#0, _module.Qubits.card)
       && read($Heap, x'#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card))
    {
        assert y#0 != null;
    }

    assume n#0 == read($Heap, x'#0, _module.Qubits.card)
       && read($Heap, x'#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card)
       && INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
    assert x'#0 != null;
    assume _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert y#0 != null;
    assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert x'#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x'#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x'#0);
    assume _module.Qubits.Wf($Heap, x'#0);
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert x'#0 != null;
    ##e#1 := read($Heap, x'#0, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
    {
        assert x'#0 != null;
        ##e#2 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#2, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    }

    if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
    {
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert y#0 != null;
        ##e#3 := read($Heap, y#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#3, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card));
    }

    assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
       && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
    havoc k#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#2);
        assert x'#0 != null;
        ##e#4 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#4, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assume INTERNAL_lt_boogie(k#2, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)));
        assert x'#0 != null;
        assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)) != null;
        assert 0 <= k#2
           && k#2 < _System.array.Length(_module.Mode.c(read($Heap, x'#0, _module.Qubits.m)));
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(k#2), $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#2)
             && INTERNAL_lt_boogie(k#2, 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(k#2), $Box(LitInt(1))));
    }

    assume (forall k#3: int :: 
      { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
      INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(k#3), $Box(LitInt(1)))));
    havoc k#4;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#4);
        assert x'#0 != null;
        ##e#5 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#5, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assume INTERNAL_lt_boogie(k#4, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)));
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= k#4
           && k#4 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        ##b#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#1, TInt, $Heap);
        assert $Is(k#4, Tclass._System.nat());
        ##e#6 := k#4;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#6, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#4);
        assert N#0 != 0;
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#4), N#0)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#4)
             && INTERNAL_lt_boogie(k#4, 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#4), N#0)), 
              $Box(LitInt(1))));
    }

    assume (forall k#5: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
      INTERNAL_le_boogie(0, k#5)
           && INTERNAL_lt_boogie(k#5, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5), N#0)), 
            $Box(LitInt(1)))));
}



procedure Call$$_module.__default.Shor1(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires x#0 != y#0;
  requires !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
  requires n#0 == read($Heap, x#0, _module.Qubits.card);
  requires read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#2 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#2) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#2 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#2) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, tmp#1))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, _System.array.Length(c#2)))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  requires _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)) == LitInt(1);
  requires (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1)
         && INTERNAL_lt_boogie(i#1, read($Heap, x#0, _module.Qubits.card))
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(1));
  requires (forall k#1: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, 1)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1), N#0)), 
          $Box(LitInt(1)))));
  requires _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#2 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var b#4 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(b#4) == read($Heap, x'#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#2 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var h#4 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#4) == read($Heap, x'#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#2 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#4 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#4 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#4, tmp#2))));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#2 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#4 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#4 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#4, _System.array.Length(c#4)))));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#2 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#4 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#4 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#4, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))));
  requires read($Heap, x'#0, _module.Qubits.card) == LitInt(0);
  requires _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)) == LitInt(1);
  requires _System.Tuple2#Equal($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType, 
    #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures n#0 == read($Heap, x'#0, _module.Qubits.card);
  ensures read($Heap, x'#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  ensures INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  free ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
     ==> 
    _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x'#0)
       && (_module.Qubits.Wf($Heap, x'#0) ==> _module.Qubits.Wf#canCall($Heap, y#0));
  ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  ensures _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     && 
    _module.Qubits.Wf($Heap, x'#0)
     && (var tmp#3 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
         then (var b#7 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
          _System.array.Length(b#7) == read($Heap, x'#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           then (var h#7 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#7) == read($Heap, x'#0, _module.Qubits.card))
           else (var c#7 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#7 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#7, tmp#3)
                 && INTERNAL_le_boogie(dof#7, _System.array.Length(c#7))
                 && INTERNAL_le_boogie(dof#7, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))))));
  free ensures _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#4 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#9 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#9) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#9 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#9) == read($Heap, y#0, _module.Qubits.card))
           else (var c#9 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#9 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#9, tmp#4)
                 && INTERNAL_le_boogie(dof#9, _System.array.Length(c#9))
                 && INTERNAL_le_boogie(dof#9, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  free ensures Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
     && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
         && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
             == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
           ==> Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card))));
  ensures _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
  ensures Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
     == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
  free ensures (forall k#3: int :: 
    { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#3)
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
       && (INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)));
  free ensures (forall k#3: int :: 
    { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(k#3), $Box(LitInt(1)))));
  free ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#5)
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
       && (INTERNAL_le_boogie(0, k#5)
           && INTERNAL_lt_boogie(k#5, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)
           && Power.__default.Pow#canCall(a#0, k#5)));
  free ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5), N#0)), 
          $Box(LitInt(1)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == x#0 || $o == y#0 || $o == x'#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.__default.Shor1(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires x#0 != y#0;
  requires !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
  requires n#0 == read($Heap, x#0, _module.Qubits.card);
  requires read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, x#0)
     && 
    _module.Qubits.Wf($Heap, x#0)
     && (var tmp#5 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
         then (var b#11 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
          _System.array.Length(b#11) == read($Heap, x#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           then (var h#11 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#11) == read($Heap, x#0, _module.Qubits.card))
           else (var c#11 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#11 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#11, tmp#5)
                 && INTERNAL_le_boogie(dof#11, _System.array.Length(c#11))
                 && INTERNAL_le_boogie(dof#11, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))))));
  free requires _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#6 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#13 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#13) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#13 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#13) == read($Heap, y#0, _module.Qubits.card))
           else (var c#13 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#13 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#13, tmp#6)
                 && INTERNAL_le_boogie(dof#13, _System.array.Length(c#13))
                 && INTERNAL_le_boogie(dof#13, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  requires _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)) == LitInt(1);
  requires (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1)
         && INTERNAL_lt_boogie(i#1, read($Heap, x#0, _module.Qubits.card))
       ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(1));
  free requires (forall k#1: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, 1)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1), N#0)), 
          $Box(LitInt(1)))));
  requires _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, x'#0)
     && 
    _module.Qubits.Wf($Heap, x'#0)
     && (var tmp#7 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
         then (var b#15 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
          _System.array.Length(b#15) == read($Heap, x'#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           then (var h#15 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#15) == read($Heap, x'#0, _module.Qubits.card))
           else (var c#15 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#15 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#15, tmp#7)
                 && INTERNAL_le_boogie(dof#15, _System.array.Length(c#15))
                 && INTERNAL_le_boogie(dof#15, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))))));
  requires read($Heap, x'#0, _module.Qubits.card) == LitInt(0);
  requires _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)) == LitInt(1);
  requires _System.Tuple2#Equal($Unbox(read($Heap, 
        _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), 
        IndexField(LitInt(0)))): DatatypeType, 
    #_System._tuple#2._#Make2($Box(LitInt(0)), $Box(LitInt(1))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures n#0 == read($Heap, x'#0, _module.Qubits.card);
  ensures read($Heap, x'#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  ensures INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  free ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
     ==> 
    _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x'#0)
       && (_module.Qubits.Wf($Heap, x'#0) ==> _module.Qubits.Wf#canCall($Heap, y#0));
  ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  ensures _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var b#16 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(b#16) == read($Heap, x'#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var h#16 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#16) == read($Heap, x'#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#16 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#16 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#16, tmp#8))));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#16 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#16 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#16, _System.array.Length(c#16)))));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#8 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#16 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#16 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#16, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#18 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#18) == read($Heap, y#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#18 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#18) == read($Heap, y#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#18 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#18 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#18, tmp#9))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#18 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#18 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#18, _System.array.Length(c#18)))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#9 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#18 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#18 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#18, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  free ensures Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
     && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
         && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
             == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
           ==> Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card))));
  ensures _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
  ensures Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
     == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
  free ensures (forall k#3: int :: 
    { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#3)
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
       && (INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)));
  ensures (forall k#3: int :: 
    { #_System._tuple#2._#Make2($Box(k#3), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, 
          Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(k#3), $Box(LitInt(1)))));
  free ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#5)
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
       && (INTERNAL_le_boogie(0, k#5)
           && INTERNAL_lt_boogie(k#5, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)
           && Power.__default.Pow#canCall(a#0, k#5)));
  ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#5) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, 
          Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#5), N#0)), 
          $Box(LitInt(1)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || $o == x#0 || $o == y#0 || $o == x'#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.__default.Shor1(a#0: int, N#0: int, n#0: int, x#0: ref, y#0: ref, x'#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var len_x#0: int where INTERNAL_le_boogie(0, len_x#0);
  var ##e#7: int;
  var i#2: int;
  var i#2#lo: int;
  var i#2#hi: int;
  var $PreLoopHeap$loop#0: Heap;
  var $w$loop#0: bool;
  var i#3: int;
  var ##e#8: int;
  var ##e#9: int;
  var ##e#10: int;
  var k#6: int;
  var k#8: int;
  var ##e#11: int;
  var ##b#2: int;
  var ##e#12: int;
  var x'dof#1_0: int where INTERNAL_le_boogie(0, x'dof#1_0);
  var olddof#1_0: int where INTERNAL_le_boogie(0, olddof#1_0);
  var defass#q#1_0: bool;
  var q#1_0: ref
     where defass#q#1_0
       ==> $Is(q#1_0, Tclass._module.Qubits())
         && $IsAlloc(q#1_0, Tclass._module.Qubits(), $Heap);
  var $rhs##1_0: ref;
  var n##1_0: int;
  var ##e#1_0: int;
  var ##e#1_1: int;
  var ##e#1_2: int;
  var n1##1_0_0: int;
  var n2##1_0_0: int;
  var ##e#1_0_0: int;
  var ##e#1_0_1: int;
  var oldy#1_0: ref
     where $Is(oldy#1_0, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
       && $IsAlloc(oldy#1_0, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
        $Heap);
  var $rhs##1_1: ref;
  var x##1_0: ref;
  var y##1_0: ref;
  var i##1_0: int;
  var a##1_0: int;
  var N##1_0: int;
  var k#1_0: int;
  var ##e#1_3: int;
  var ##b#1_0: int;
  var ##e#1_4: int;
  var dof##1_0: int;
  var ##e#1_5: int;
  var c'##1_0: ref;
  var a##1_1: int;
  var N##1_1: int;
  var i##1_1: int;
  var q##1_0: ref;
  var k#1_2: int;
  var ##e#1_6: int;
  var ##b#1_1: int;
  var ##e#1_7: int;
  var ##e#1_8: int;
  var ##e#1_9: int;
  var ##e#1_10: int;
  var k#1_4: int;
  var ##e#1_11: int;
  var ##b#1_2: int;
  var ##e#1_12: int;
  var ##e#13: int;
  var ##e#14: int;
  var ##e#15: int;

    // AddMethodImpl: Shor1, Impl$$_module.__default.Shor1
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> $o == x#0 || $o == y#0 || $o == x'#0);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(495,19)
    assume true;
    assume true;
    len_x#0 := n#0;
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(496,3)
    assert {:subsumption 0} x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert {:subsumption 0} x'#0 != null;
    ##e#7 := read($Heap, x'#0, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#7, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    if (*)
    {
        // ----- assert statement proof ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(496,3)
        // ----- reveal statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(497,5)
        // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(497,16)
        // TrCallStmt: Before ProcessCallStmt
        // ProcessCallStmt: Make the call
        call Call$$Power2.__default.reveal__Pow2();
        // TrCallStmt: After ProcessCallStmt
        assert {:subsumption 0} _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
           == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
        assume false;
    }

    assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
    // ----- for-loop statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(499,3)
    i#2#lo := LitInt(0);
    i#2#hi := len_x#0;
    assert i#2#lo <= i#2#hi;
    i#2 := i#2#lo;
    $PreLoopHeap$loop#0 := $Heap;
    havoc $w$loop#0;
    while (true)
      free invariant i#2#lo <= i#2 && i#2 <= i#2#hi;
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> n#0 == read($Heap, y#0, _module.Qubits.card);
      invariant $w$loop#0 ==> INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> INTERNAL_le_boogie(0, i#2);
      invariant $w$loop#0 ==> INTERNAL_le_boogie(i#2, len_x#0);
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> i#2 == read($Heap, x'#0, _module.Qubits.card);
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> read($Heap, y#0, _module.Qubits.card)
           == read(old($Heap), y#0, _module.Qubits.card);
      invariant $w$loop#0 ==> read(old($Heap), y#0, _module.Qubits.card) == len_x#0;
      free invariant $w$loop#0
         ==> 
        _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
         ==> _module.Qubits.Wf#canCall($Heap, x#0);
      invariant $w$loop#0 ==> _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x#0)
         ==> _module.Qubits.Wf($Heap, x#0)
           || (var tmp#10 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
            _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
               ==> (var b#20 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
                _System.array.Length(b#20) == read($Heap, x#0, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x#0)
         ==> _module.Qubits.Wf($Heap, x#0)
           || (var tmp#10 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
               ==> 
              _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
               ==> (var h#20 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
                _System.array.Length(h#20) == read($Heap, x#0, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x#0)
         ==> _module.Qubits.Wf($Heap, x#0)
           || (var tmp#10 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
               ==> (var c#20 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
                (var dof#20 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#20, tmp#10))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x#0)
         ==> _module.Qubits.Wf($Heap, x#0)
           || (var tmp#10 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
               ==> (var c#20 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
                (var dof#20 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#20, _System.array.Length(c#20)))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x#0)
         ==> _module.Qubits.Wf($Heap, x#0)
           || (var tmp#10 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
               ==> (var c#20 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
                (var dof#20 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#20, 
                    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))));
      free invariant $w$loop#0
         ==> _module.Qubits.Wf#canCall($Heap, x#0)
           && 
          _module.Qubits.Wf($Heap, x#0)
           && (var tmp#10 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
            (if _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
               then (var b#21 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
                _System.array.Length(b#21) == read($Heap, x#0, _module.Qubits.card))
               else (if _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
                 then (var h#21 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
                  _System.array.Length(h#21) == read($Heap, x#0, _module.Qubits.card))
                 else (var c#21 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
                  (var dof#21 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
                    INTERNAL_le_boogie(dof#21, tmp#10)
                       && INTERNAL_le_boogie(dof#21, _System.array.Length(c#21))
                       && INTERNAL_le_boogie(dof#21, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))))));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> (forall i#4: int :: 
          { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#4))): int } 
          INTERNAL_le_boogie(0, i#4)
               && INTERNAL_lt_boogie(i#4, _System.array.Length(_module.Mode.h(read($Heap, x#0, _module.Qubits.m))))
             ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#4))): int
               == LitInt(1));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
         ==> INTERNAL_add_boogie(i#2, read($Heap, x#0, _module.Qubits.card)) == len_x#0;
      free invariant $w$loop#0
         ==> 
        _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
         ==> _module.Qubits.Wf#canCall($Heap, x'#0);
      invariant $w$loop#0 ==> _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x'#0)
         ==> _module.Qubits.Wf($Heap, x'#0)
           || (var tmp#11 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
            _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
               ==> (var b#22 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
                _System.array.Length(b#22) == read($Heap, x'#0, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x'#0)
         ==> _module.Qubits.Wf($Heap, x'#0)
           || (var tmp#11 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
               ==> 
              _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
               ==> (var h#22 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
                _System.array.Length(h#22) == read($Heap, x'#0, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x'#0)
         ==> _module.Qubits.Wf($Heap, x'#0)
           || (var tmp#11 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
               ==> (var c#22 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
                (var dof#22 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#22, tmp#11))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x'#0)
         ==> _module.Qubits.Wf($Heap, x'#0)
           || (var tmp#11 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
               ==> (var c#22 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
                (var dof#22 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#22, _System.array.Length(c#22)))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, x'#0)
         ==> _module.Qubits.Wf($Heap, x'#0)
           || (var tmp#11 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
               ==> (var c#22 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
                (var dof#22 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#22, 
                    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))));
      free invariant $w$loop#0
         ==> _module.Qubits.Wf#canCall($Heap, x'#0)
           && 
          _module.Qubits.Wf($Heap, x'#0)
           && (var tmp#11 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
            (if _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
               then (var b#23 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
                _System.array.Length(b#23) == read($Heap, x'#0, _module.Qubits.card))
               else (if _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
                 then (var h#23 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
                  _System.array.Length(h#23) == read($Heap, x'#0, _module.Qubits.card))
                 else (var c#23 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
                  (var dof#23 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
                    INTERNAL_le_boogie(dof#23, tmp#11)
                       && INTERNAL_le_boogie(dof#23, _System.array.Length(c#23))
                       && INTERNAL_le_boogie(dof#23, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))))));
      free invariant $w$loop#0
         ==> 
        _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
         ==> _module.Qubits.Wf#canCall($Heap, y#0);
      invariant $w$loop#0 ==> _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#12 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var b#24 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
                _System.array.Length(b#24) == read($Heap, y#0, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#12 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> 
              _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var h#24 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
                _System.array.Length(h#24) == read($Heap, y#0, _module.Qubits.card)));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#12 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var c#24 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
                (var dof#24 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#24, tmp#12))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#12 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var c#24 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
                (var dof#24 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#24, _System.array.Length(c#24)))));
      invariant $w$loop#0
         ==> 
        _module.Qubits.Wf#canCall($Heap, y#0)
         ==> _module.Qubits.Wf($Heap, y#0)
           || (var tmp#12 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               ==> 
              !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
               ==> (var c#24 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
                (var dof#24 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
                  INTERNAL_le_boogie(dof#24, 
                    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
      free invariant $w$loop#0
         ==> _module.Qubits.Wf#canCall($Heap, y#0)
           && 
          _module.Qubits.Wf($Heap, y#0)
           && (var tmp#12 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
            (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
               then (var b#25 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
                _System.array.Length(b#25) == read($Heap, y#0, _module.Qubits.card))
               else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
                 then (var h#25 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
                  _System.array.Length(h#25) == read($Heap, y#0, _module.Qubits.card))
                 else (var c#25 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
                  (var dof#25 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
                    INTERNAL_le_boogie(dof#25, tmp#12)
                       && INTERNAL_le_boogie(dof#25, _System.array.Length(c#25))
                       && INTERNAL_le_boogie(dof#25, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
      free invariant $w$loop#0
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
           && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
             ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
               && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                   == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                 ==> Power2.__default.Pow2#canCall(i#2)));
      invariant $w$loop#0
         ==> _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
           == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
      invariant $w$loop#0
         ==> Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
           == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
      invariant $w$loop#0
         ==> _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
           == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#2);
      free invariant $w$loop#0
         ==> (forall k#7: int :: 
          { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
          INTERNAL_le_boogie(0, k#7)
               && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)))
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType));
      invariant $w$loop#0
         ==> (forall k#7: int :: 
          { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
          INTERNAL_le_boogie(0, k#7)
               && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(k#7), $Box(LitInt(1)))));
      free invariant $w$loop#0
         ==> (forall k#9: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#9) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
          (INTERNAL_le_boogie(0, k#9) ==> Power2.__default.Pow2#canCall(i#2))
             && (INTERNAL_le_boogie(0, k#9)
                 && INTERNAL_lt_boogie(k#9, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))
               ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)
                 && Power.__default.Pow#canCall(a#0, k#9)));
      invariant $w$loop#0
         ==> (forall k#9: int :: 
          { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#9) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
          INTERNAL_le_boogie(0, k#9)
               && INTERNAL_lt_boogie(k#9, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#2))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#9), N#0)), 
                $Box(LitInt(1)))));
      free invariant $w$loop#0
         ==> (forall k#9: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#9) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
          INTERNAL_le_boogie(0, k#9)
               && INTERNAL_lt_boogie(k#9, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#9), N#0)), 
                $Box(LitInt(1)))));
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && read(old($Heap), $o, alloc)
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o] || $o == x#0 || $o == y#0 || $o == x'#0);
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
        { read($Heap, $o, $f) } 
        $o != null && read($PreLoopHeap$loop#0, $o, alloc)
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant true;
    {
        if (!$w$loop#0)
        {
            assert {:subsumption 0} y#0 != null;
            if (n#0 == read($Heap, y#0, _module.Qubits.card))
            {
                assert {:subsumption 0} y#0 != null;
            }

            assume true;
            assume n#0 == read($Heap, y#0, _module.Qubits.card)
               && INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
            if (INTERNAL_le_boogie(0, i#2))
            {
            }

            assume true;
            assume INTERNAL_le_boogie(0, i#2) && INTERNAL_le_boogie(i#2, len_x#0);
            assert {:subsumption 0} x'#0 != null;
            assume true;
            assume i#2 == read($Heap, x'#0, _module.Qubits.card);
            assert {:subsumption 0} y#0 != null;
            assert {:subsumption 0} y#0 != null;
            assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
            if (read($Heap, y#0, _module.Qubits.card)
               == read(old($Heap), y#0, _module.Qubits.card))
            {
                assert {:subsumption 0} y#0 != null;
                assert $IsAlloc(y#0, Tclass._module.Qubits(), old($Heap));
            }

            assume true;
            assume read($Heap, y#0, _module.Qubits.card)
                 == read(old($Heap), y#0, _module.Qubits.card)
               && read(old($Heap), y#0, _module.Qubits.card) == len_x#0;
            assert {:subsumption 0} x#0 != null;
            if (_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m)))
            {
                assert {:subsumption 0} x#0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAlloc(x#0, Tclass._module.Qubits?(), $Heap);
                assume _module.Qubits.Wf#canCall($Heap, x#0);
            }

            assume _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
               ==> _module.Qubits.Wf#canCall($Heap, x#0);
            assume _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
               && _module.Qubits.Wf($Heap, x#0);
            // Begin Comprehension WF check
            havoc i#3;
            if (true)
            {
                if (INTERNAL_le_boogie(0, i#3))
                {
                    assert {:subsumption 0} x#0 != null;
                    assert _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
                    assert {:subsumption 0} _module.Mode.h(read($Heap, x#0, _module.Qubits.m)) != null;
                }

                if (INTERNAL_le_boogie(0, i#3)
                   && INTERNAL_lt_boogie(i#3, _System.array.Length(_module.Mode.h(read($Heap, x#0, _module.Qubits.m)))))
                {
                    assert {:subsumption 0} x#0 != null;
                    assert _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m));
                    assert _module.Mode.h(read($Heap, x#0, _module.Qubits.m)) != null;
                    assert {:subsumption 0} 0 <= i#3
                       && i#3 < _System.array.Length(_module.Mode.h(read($Heap, x#0, _module.Qubits.m)));
                }
            }

            // End Comprehension WF check
            assume true;
            assume (forall i#4: int :: 
              { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#4))): int } 
              INTERNAL_le_boogie(0, i#4)
                   && INTERNAL_lt_boogie(i#4, _System.array.Length(_module.Mode.h(read($Heap, x#0, _module.Qubits.m))))
                 ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#4))): int
                   == LitInt(1));
            assert {:subsumption 0} x#0 != null;
            assume true;
            assume INTERNAL_add_boogie(i#2, read($Heap, x#0, _module.Qubits.card)) == len_x#0;
            assert {:subsumption 0} x'#0 != null;
            if (_module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m)))
            {
                assert {:subsumption 0} x'#0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAlloc(x'#0, Tclass._module.Qubits?(), $Heap);
                assume _module.Qubits.Wf#canCall($Heap, x'#0);
            }

            assume _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
               ==> _module.Qubits.Wf#canCall($Heap, x'#0);
            assume _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
               && _module.Qubits.Wf($Heap, x'#0);
            assert {:subsumption 0} y#0 != null;
            if (_module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m)))
            {
                assert {:subsumption 0} y#0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
                assume _module.Qubits.Wf#canCall($Heap, y#0);
            }

            assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
               ==> _module.Qubits.Wf#canCall($Heap, y#0);
            assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
               && _module.Qubits.Wf($Heap, y#0);
            assert {:subsumption 0} x'#0 != null;
            assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
            assert {:subsumption 0} x'#0 != null;
            ##e#8 := read($Heap, x'#0, _module.Qubits.card);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#8, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
            if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
            {
                assert {:subsumption 0} x'#0 != null;
                ##e#9 := read($Heap, x'#0, _module.Qubits.card);
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#9, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
                assert {:subsumption 0} y#0 != null;
                assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
            }

            if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
                 == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
               && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                 == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
            {
                assert {:subsumption 0} y#0 != null;
                assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                assert $Is(i#2, Tclass._System.nat());
                ##e#10 := i#2;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#10, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(i#2);
            }

            assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
               && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
                   == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                 ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
                   && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                       == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                     ==> Power2.__default.Pow2#canCall(i#2)));
            assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
                 == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
               && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                 == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
               && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                 == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2);
            // Begin Comprehension WF check
            havoc k#6;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#6))
                {
                    assert {:subsumption 0} x'#0 != null;
                    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
                }

                if (INTERNAL_le_boogie(0, k#6)
                   && INTERNAL_lt_boogie(k#6, _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))))
                {
                    assert {:subsumption 0} x'#0 != null;
                    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
                    assert _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)) != null;
                    assert {:subsumption 0} 0 <= k#6
                       && k#6 < _System.array.Length(_module.Mode.c(read($Heap, x'#0, _module.Qubits.m)));
                }
            }

            // End Comprehension WF check
            assume (forall k#7: int :: 
              { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
              INTERNAL_le_boogie(0, k#7)
                   && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)))
                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType));
            assume (forall k#7: int :: 
              { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
              INTERNAL_le_boogie(0, k#7)
                   && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)))
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(k#7), $Box(LitInt(1)))));
            // Begin Comprehension WF check
            havoc k#8;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#8))
                {
                    assert $Is(i#2, Tclass._System.nat());
                    ##e#11 := i#2;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##e#11, Tclass._System.nat(), $Heap);
                    assume Power2.__default.Pow2#canCall(i#2);
                }

                if (INTERNAL_le_boogie(0, k#8)
                   && INTERNAL_lt_boogie(k#8, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2)))
                {
                    assert {:subsumption 0} y#0 != null;
                    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                    assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
                    assert {:subsumption 0} 0 <= k#8
                       && k#8 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
                    ##b#2 := a#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##b#2, TInt, $Heap);
                    assert $Is(k#8, Tclass._System.nat());
                    ##e#12 := k#8;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##e#12, Tclass._System.nat(), $Heap);
                    assume Power.__default.Pow#canCall(a#0, k#8);
                    assert {:subsumption 0} N#0 != 0;
                }
            }

            // End Comprehension WF check
            assume (forall k#9: int :: 
              { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#9) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
              (INTERNAL_le_boogie(0, k#9) ==> Power2.__default.Pow2#canCall(i#2))
                 && (INTERNAL_le_boogie(0, k#9)
                     && INTERNAL_lt_boogie(k#9, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))
                   ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)
                     && Power.__default.Pow#canCall(a#0, k#9)));
            assume (forall k#9: int :: 
              { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#9) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
              INTERNAL_le_boogie(0, k#9)
                   && INTERNAL_lt_boogie(k#9, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#9), N#0)), 
                    $Box(LitInt(1)))));
            assume false;
        }

        assume true;
        if (i#2 == i#2#hi)
        {
            break;
        }

        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(513,21)
        assume true;
        assert x'#0 != null;
        assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
        assume true;
        x'dof#1_0 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m));
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(514,22)
        assume true;
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assume true;
        olddof#1_0 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
        // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(515,25)
        assume true;
        // TrCallStmt: Adding lhs with type Qubits
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert x#0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert $Is(LitInt(1), Tclass._System.nat());
        n##1_0 := LitInt(1);
        assert (forall<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc) && $o == x#0 ==> $_Frame[$o, $f]);
        // ProcessCallStmt: Make the call
        call $rhs##1_0 := Call$$_module.Qubits.SplitPlus(x#0, n##1_0);
        // TrCallStmt: After ProcessCallStmt
        q#1_0 := $rhs##1_0;
        defass#q#1_0 := true;
        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(516,5)
        if (INTERNAL_le_boogie(0, i#2))
        {
            assert {:subsumption 0} y#0 != null;
        }

        assume true;
        assert {:subsumption 0} INTERNAL_le_boogie(0, i#2);
        assert {:subsumption 0} INTERNAL_le_boogie(i#2, INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1));
        assume INTERNAL_le_boogie(0, i#2)
           && INTERNAL_le_boogie(i#2, INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1));
        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(517,5)
        assert {:subsumption 0} y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert $Is(i#2, Tclass._System.nat());
        ##e#1_0 := i#2;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1_0, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(i#2);
        if (_module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
           == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))
        {
            assert $Is(i#2, Tclass._System.nat());
            ##e#1_1 := i#2;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_1, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(i#2);
            assert {:subsumption 0} y#0 != null;
            assert $Is(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1), 
              Tclass._System.nat());
            ##e#1_2 := INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_2, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1));
        }

        assume Power2.__default.Pow2#canCall(i#2)
           && (_module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2)
             ==> Power2.__default.Pow2#canCall(i#2)
               && Power2.__default.Pow2#canCall(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1)));
        if (*)
        {
            // ----- assert statement proof ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(517,5)
            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(518,27)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert $Is(i#2, Tclass._System.nat());
            n1##1_0_0 := i#2;
            assert y#0 != null;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert $Is(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1), 
              Tclass._System.nat());
            n2##1_0_0 := INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1);
            // ProcessCallStmt: Make the call
            call Call$$_module.__default.LemmaLePow2Covariant(n1##1_0_0, n2##1_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(519,7)
            assert $Is(i#2, Tclass._System.nat());
            ##e#1_0_0 := i#2;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_0_0, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(i#2);
            assert {:subsumption 0} y#0 != null;
            assert $Is(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1), 
              Tclass._System.nat());
            ##e#1_0_1 := INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_0_1, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1));
            assume Power2.__default.Pow2#canCall(i#2)
               && Power2.__default.Pow2#canCall(INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1));
            assert {:subsumption 0} INTERNAL_le_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#2), 
              Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, 
                INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1)));
            assume INTERNAL_le_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2), 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, 
                INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1)));
            assert {:subsumption 0} _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#2);
            assert {:subsumption 0} INTERNAL_le_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#2), 
              Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, 
                INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1)));
            assume false;
        }

        assume _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
             == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2)
           && INTERNAL_le_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2), 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, 
              INTERNAL_sub_boogie(read($Heap, y#0, _module.Qubits.card), 1)));
        // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(521,33)
        assume true;
        // TrCallStmt: Adding lhs with type array<(nat, int)>
        // TrCallStmt: Before ProcessCallStmt
        assert defass#q#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        x##1_0 := q#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        y##1_0 := y#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert $Is(i#2, Tclass._System.nat());
        i##1_0 := i#2;
        assume true;
        // ProcessCallStmt: CheckSubrange
        a##1_0 := a#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        N##1_0 := N#0;
        assert (forall<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc) && $o == y##1_0 ==> $_Frame[$o, $f]);
        // ProcessCallStmt: Make the call
        call $rhs##1_1 := Call$$_module.__default.ControlledOracle(x##1_0, y##1_0, i##1_0, a##1_0, N##1_0);
        // TrCallStmt: After ProcessCallStmt
        oldy#1_0 := $rhs##1_1;
        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(522,5)
        // Begin Comprehension WF check
        havoc k#1_0;
        if (true)
        {
            if (INTERNAL_le_boogie(0, k#1_0))
            {
                assert $Is(i#2, Tclass._System.nat());
                ##e#1_3 := i#2;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#1_3, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(i#2);
            }

            if (INTERNAL_le_boogie(0, k#1_0)
               && INTERNAL_lt_boogie(k#1_0, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2)))
            {
                assert {:subsumption 0} y#0 != null;
                assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
                assert {:subsumption 0} 0 <= k#1_0
                   && k#1_0 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
                ##b#1_0 := a#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##b#1_0, TInt, $Heap);
                assert $Is(k#1_0, Tclass._System.nat());
                ##e#1_4 := k#1_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#1_4, Tclass._System.nat(), $Heap);
                assume Power.__default.Pow#canCall(a#0, k#1_0);
                assert {:subsumption 0} N#0 != 0;
            }
        }

        // End Comprehension WF check
        assume (forall k#1_1: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_1) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_1))): DatatypeType } 
          (INTERNAL_le_boogie(0, k#1_1) ==> Power2.__default.Pow2#canCall(i#2))
             && (INTERNAL_le_boogie(0, k#1_1)
                 && INTERNAL_lt_boogie(k#1_1, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))
               ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_1))): DatatypeType)
                 && Power.__default.Pow#canCall(a#0, k#1_1)));
        assert {:subsumption 0} (forall k#1_1: int :: 
          { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1_1) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1_1)
               && INTERNAL_lt_boogie(k#1_1, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#2))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_1))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1_1), N#0)), 
                $Box(LitInt(1)))));
        assume (forall k#1_1: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_1) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1_1)
               && INTERNAL_lt_boogie(k#1_1, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_1))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_1), N#0)), 
                $Box(LitInt(1)))));
        // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(523,20)
        // TrCallStmt: Before ProcessCallStmt
        assert $Is(i#2, Tclass._System.nat());
        ##e#1_5 := i#2;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1_5, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(i#2);
        assume Power2.__default.Pow2#canCall(i#2);
        // ProcessCallStmt: CheckSubrange
        dof##1_0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2);
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assume true;
        // ProcessCallStmt: CheckSubrange
        c'##1_0 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m));
        assume true;
        // ProcessCallStmt: CheckSubrange
        a##1_1 := a#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        N##1_1 := N#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert $Is(i#2, Tclass._System.nat());
        i##1_1 := i#2;
        // ProcessCallStmt: Make the call
        call Call$$_module.__default.LemmaShorOracle(dof##1_0, c'##1_0, a##1_1, N##1_1, i##1_1);
        // TrCallStmt: After ProcessCallStmt
        // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(524,17)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert x'#0 != null;
        assert defass#q#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        q##1_0 := q#1_0;
        assert (forall<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc) && $o == x'#0 ==> $_Frame[$o, $f]);
        // ProcessCallStmt: Make the call
        call Call$$_module.Qubits.CatPlusCH(x'#0, q##1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(525,5)
        // Begin Comprehension WF check
        havoc k#1_2;
        if (true)
        {
            if (INTERNAL_le_boogie(0, k#1_2))
            {
                assert $Is(i#2, Tclass._System.nat());
                ##e#1_6 := i#2;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#1_6, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(i#2);
            }

            if (INTERNAL_le_boogie(0, k#1_2)
               && INTERNAL_lt_boogie(k#1_2, 
                INTERNAL_mul_boogie(2, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))))
            {
                assert {:subsumption 0} y#0 != null;
                assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
                assert {:subsumption 0} 0 <= k#1_2
                   && k#1_2 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
                ##b#1_1 := a#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##b#1_1, TInt, $Heap);
                assert $Is(k#1_2, Tclass._System.nat());
                ##e#1_7 := k#1_2;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#1_7, Tclass._System.nat(), $Heap);
                assume Power.__default.Pow#canCall(a#0, k#1_2);
                assert {:subsumption 0} N#0 != 0;
            }
        }

        // End Comprehension WF check
        assume (forall k#1_3: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_3) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_3))): DatatypeType } 
          (INTERNAL_le_boogie(0, k#1_3) ==> Power2.__default.Pow2#canCall(i#2))
             && (INTERNAL_le_boogie(0, k#1_3)
                 && INTERNAL_lt_boogie(k#1_3, 
                  INTERNAL_mul_boogie(2, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2)))
               ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_3))): DatatypeType)
                 && Power.__default.Pow#canCall(a#0, k#1_3)));
        assert {:subsumption 0} (forall k#1_3: int :: 
          { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1_3) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_3))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1_3)
               && INTERNAL_lt_boogie(k#1_3, 
                INTERNAL_mul_boogie(2, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, i#2)))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_3))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1_3), N#0)), 
                $Box(LitInt(1)))));
        assume (forall k#1_3: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_3) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_3))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1_3)
               && INTERNAL_lt_boogie(k#1_3, 
                INTERNAL_mul_boogie(2, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2)))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_3))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_3), N#0)), 
                $Box(LitInt(1)))));
        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(526,5)
        assert {:subsumption 0} x'#0 != null;
        assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
        assert {:subsumption 0} x'#0 != null;
        ##e#1_8 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1_8, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
           == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
        {
            assert {:subsumption 0} x'#0 != null;
            ##e#1_9 := read($Heap, x'#0, _module.Qubits.card);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_9, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
            assert {:subsumption 0} y#0 != null;
            assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        }

        if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
             == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
           && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
             == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
        {
            assert {:subsumption 0} y#0 != null;
            assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
            assert $Is(INTERNAL_add_boogie(i#2, 1), Tclass._System.nat());
            ##e#1_10 := INTERNAL_add_boogie(i#2, 1);
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#1_10, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(INTERNAL_add_boogie(i#2, 1));
        }

        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
           && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
             ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
               && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                   == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                 ==> Power2.__default.Pow2#canCall(INTERNAL_add_boogie(i#2, 1))));
        if (*)
        {
            // ----- assert statement proof ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(526,5)
            // ----- reveal statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(527,7)
            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(527,18)
            // TrCallStmt: Before ProcessCallStmt
            // ProcessCallStmt: Make the call
            call Call$$Power2.__default.reveal__Pow2();
            // TrCallStmt: After ProcessCallStmt
            assert {:subsumption 0} _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
            assert {:subsumption 0} Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
               == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
            assert {:subsumption 0} _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
               == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, INTERNAL_add_boogie(i#2, 1));
            assume false;
        }

        assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
             == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
           && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
             == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
           && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
             == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, INTERNAL_add_boogie(i#2, 1));
        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(529,5)
        // Begin Comprehension WF check
        havoc k#1_4;
        if (true)
        {
            if (INTERNAL_le_boogie(0, k#1_4))
            {
                assert $Is(INTERNAL_add_boogie(i#2, 1), Tclass._System.nat());
                ##e#1_11 := INTERNAL_add_boogie(i#2, 1);
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#1_11, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(INTERNAL_add_boogie(i#2, 1));
            }

            if (INTERNAL_le_boogie(0, k#1_4)
               && INTERNAL_lt_boogie(k#1_4, 
                Power2.__default.Pow2(StartFuel_Power2._default.Pow2, INTERNAL_add_boogie(i#2, 1))))
            {
                assert {:subsumption 0} y#0 != null;
                assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
                assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
                assert {:subsumption 0} 0 <= k#1_4
                   && k#1_4 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
                ##b#1_2 := a#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##b#1_2, TInt, $Heap);
                assert $Is(k#1_4, Tclass._System.nat());
                ##e#1_12 := k#1_4;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#1_12, Tclass._System.nat(), $Heap);
                assume Power.__default.Pow#canCall(a#0, k#1_4);
                assert {:subsumption 0} N#0 != 0;
            }
        }

        // End Comprehension WF check
        assume (forall k#1_5: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_5) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_5))): DatatypeType } 
          (INTERNAL_le_boogie(0, k#1_5)
               ==> Power2.__default.Pow2#canCall(INTERNAL_add_boogie(i#2, 1)))
             && (INTERNAL_le_boogie(0, k#1_5)
                 && INTERNAL_lt_boogie(k#1_5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, INTERNAL_add_boogie(i#2, 1)))
               ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_5))): DatatypeType)
                 && Power.__default.Pow#canCall(a#0, k#1_5)));
        assert {:subsumption 0} (forall k#1_5: int :: 
          { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1_5) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_5))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1_5)
               && INTERNAL_lt_boogie(k#1_5, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, INTERNAL_add_boogie(i#2, 1)))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_5))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#1_5), N#0)), 
                $Box(LitInt(1)))));
        assume (forall k#1_5: int :: 
          { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_5) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_5))): DatatypeType } 
          INTERNAL_le_boogie(0, k#1_5)
               && INTERNAL_lt_boogie(k#1_5, 
                Power2.__default.Pow2(StartFuel_Power2._default.Pow2, INTERNAL_add_boogie(i#2, 1)))
             ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#1_5))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#1_5), N#0)), 
                $Box(LitInt(1)))));
        i#2 := i#2 + 1;
        assume n#0 == read($Heap, y#0, _module.Qubits.card)
             && INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0)
           ==> 
          INTERNAL_le_boogie(0, i#2) && INTERNAL_le_boogie(i#2, len_x#0)
           ==> 
          i#2 == read($Heap, x'#0, _module.Qubits.card)
           ==> 
          read($Heap, y#0, _module.Qubits.card)
               == read(old($Heap), y#0, _module.Qubits.card)
             && read(old($Heap), y#0, _module.Qubits.card) == len_x#0
           ==> 
          _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> _module.Qubits.Wf#canCall($Heap, x#0)
             && (_module.Qubits.Wf($Heap, x#0)
               ==> 
              (forall i#4: int :: 
                { $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#4))): int } 
                INTERNAL_le_boogie(0, i#4)
                     && INTERNAL_lt_boogie(i#4, _System.array.Length(_module.Mode.h(read($Heap, x#0, _module.Qubits.m))))
                   ==> $Unbox(read($Heap, _module.Mode.h(read($Heap, x#0, _module.Qubits.m)), IndexField(i#4))): int
                     == LitInt(1))
               ==> 
              INTERNAL_add_boogie(i#2, read($Heap, x#0, _module.Qubits.card)) == len_x#0
               ==> 
              _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
               ==> _module.Qubits.Wf#canCall($Heap, x'#0)
                 && (_module.Qubits.Wf($Heap, x'#0)
                   ==> 
                  _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
                   ==> _module.Qubits.Wf#canCall($Heap, y#0)
                     && (_module.Qubits.Wf($Heap, y#0)
                       ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
                         && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
                             == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                           ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
                             && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                                 == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                               ==> Power2.__default.Pow2#canCall(i#2)))
                         && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
                               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                             && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
                               == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                             && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
                               == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2)
                           ==> (forall k#7: int :: 
                              { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
                                { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
                              INTERNAL_le_boogie(0, k#7)
                                   && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)))
                                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType))
                             && ((forall k#7: int :: 
                                { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
                                  { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
                                INTERNAL_le_boogie(0, k#7)
                                     && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)))
                                   ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType, 
                                    #_System._tuple#2._#Make2($Box(k#7), $Box(LitInt(1)))))
                               ==> (forall k#9: int :: 
                                { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#9) } 
                                  { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
                                (INTERNAL_le_boogie(0, k#9) ==> Power2.__default.Pow2#canCall(i#2))
                                   && (INTERNAL_le_boogie(0, k#9)
                                       && INTERNAL_lt_boogie(k#9, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, i#2))
                                     ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)
                                       && Power.__default.Pow#canCall(a#0, k#9))))))));
    }

    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(531,3)
    assert {:subsumption 0} x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert {:subsumption 0} x'#0 != null;
    ##e#13 := read($Heap, x'#0, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#13, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
    {
        assert {:subsumption 0} x'#0 != null;
        ##e#14 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#14, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assert {:subsumption 0} y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    }

    if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
    {
        assert {:subsumption 0} y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert {:subsumption 0} y#0 != null;
        ##e#15 := read($Heap, y#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#15, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card));
    }

    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
       && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
           == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
           && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
               == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
             ==> Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card))));
    assert {:subsumption 0} _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
    assert {:subsumption 0} Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
    assert {:subsumption 0} _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
    assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
       && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
}



procedure CheckWellformed$$_module.__default.Sample(_module._default.Sample$T: Ty, 
    a#0: ref
       where $Is(a#0, Tclass._System.array(_module._default.Sample$T))
         && $IsAlloc(a#0, Tclass._System.array(_module._default.Sample$T), $Heap), 
    len#0: int where INTERNAL_le_boogie(0, len#0))
   returns (i#0: int where INTERNAL_le_boogie(0, i#0), 
    x#0: Box
       where $IsBox(x#0, _module._default.Sample$T)
         && $IsAllocBox(x#0, _module._default.Sample$T, $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.Sample(_module._default.Sample$T: Ty, a#0: ref, len#0: int)
   returns (i#0: int, x#0: Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: Sample, CheckWellformed$$_module.__default.Sample
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assert a#0 != null;
    if (INTERNAL_ge_boogie(_System.array.Length(a#0), len#0))
    {
    }

    assume INTERNAL_ge_boogie(_System.array.Length(a#0), len#0)
       && INTERNAL_gt_boogie(len#0, 0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
    assume $HeapSucc(old($Heap), $Heap);
    havoc i#0, x#0;
    if (INTERNAL_le_boogie(0, i#0))
    {
    }

    assume INTERNAL_le_boogie(0, i#0) && INTERNAL_lt_boogie(i#0, len#0);
    assert a#0 != null;
    assert 0 <= i#0 && i#0 < _System.array.Length(a#0);
    assume x#0 == read($Heap, a#0, IndexField(i#0));
}



procedure Call$$_module.__default.Sample(_module._default.Sample$T: Ty, 
    a#0: ref
       where $Is(a#0, Tclass._System.array(_module._default.Sample$T))
         && $IsAlloc(a#0, Tclass._System.array(_module._default.Sample$T), $Heap), 
    len#0: int where INTERNAL_le_boogie(0, len#0))
   returns (i#0: int where INTERNAL_le_boogie(0, i#0), 
    x#0: Box
       where $IsBox(x#0, _module._default.Sample$T)
         && $IsAllocBox(x#0, _module._default.Sample$T, $Heap));
  // user-defined preconditions
  requires INTERNAL_ge_boogie(_System.array.Length(a#0), len#0);
  requires INTERNAL_gt_boogie(len#0, 0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures INTERNAL_le_boogie(0, i#0);
  ensures INTERNAL_lt_boogie(i#0, len#0);
  ensures x#0 == read($Heap, a#0, IndexField(i#0));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure CheckWellformed$$_module.__default.RewriteMod(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    m#0: int where INTERNAL_le_boogie(0, m#0))
   returns (g#0: ref
       where $Is(g#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(g#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    x0#0: int where INTERNAL_le_boogie(0, x0#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.RewriteMod(a#0: int, N#0: int, x#0: ref, m#0: int) returns (g#0: ref, r#0: int, x0#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var k#0: int;
  var k#2: int;
  var ##b#0: int;
  var ##e#0: int;
  var ##b#1: int;
  var ##e#1: int;
  var k#4: int;
  var ##b#2: int;
  var ##e#2: int;
  var k#6: int;
  var k#7: int;
  var k#9: int;

    // AddMethodImpl: RewriteMod, CheckWellformed$$_module.__default.RewriteMod
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_ge_boogie(N#0, 2);
    assert x#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x#0);
    assume _module.Qubits.Wf($Heap, x#0);
    assert x#0 != null;
    assume _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(k#0, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#0
           && k#0 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType);
        assume INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType)): int, 
          0);
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0)
             && INTERNAL_lt_boogie(k#0, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
           ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType)): int, 
            0);
    }

    assume (forall k#1: int :: 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
      INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)): int, 
          0));
    havoc k#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#2);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(k#2, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#2
           && k#2 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType);
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        ##e#0 := $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType)): int;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, 
          $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType)): int);
        assert N#0 != 0;
        assume INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
              a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType)): int), 
            N#0)
           == m#0;
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#2)
             && INTERNAL_lt_boogie(k#2, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
           ==> INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                a#0, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType)): int), 
              N#0)
             == m#0;
    }

    assume (forall k#3: int :: 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
      INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
              a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)): int), 
            N#0)
           == m#0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
    assume $HeapSucc(old($Heap), $Heap);
    havoc g#0, r#0, x0#0;
    if (INTERNAL_le_boogie(0, x0#0))
    {
    }

    if (INTERNAL_le_boogie(0, x0#0) && INTERNAL_lt_boogie(x0#0, r#0))
    {
    }

    assume INTERNAL_le_boogie(0, x0#0)
       && INTERNAL_lt_boogie(x0#0, r#0)
       && INTERNAL_lt_boogie(r#0, N#0);
    ##b#1 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#1, TInt, $Heap);
    ##e#1 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
    assume Power.__default.Pow#canCall(a#0, r#0);
    assert N#0 != 0;
    assume INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, r#0), N#0)
       == LitInt(1);
    havoc k#4;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#4);
        assume INTERNAL_lt_boogie(k#4, N#0);
        if (*)
        {
            ##b#2 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#2, TInt, $Heap);
            assert $Is(k#4, Tclass._System.nat());
            ##e#2 := k#4;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#2, Tclass._System.nat(), $Heap);
            assume Power.__default.Pow#canCall(a#0, k#4);
            assert N#0 != 0;
            assume INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#4), N#0)
               == LitInt(1);
            assume INTERNAL_le_boogie(r#0, k#4);
        }
        else
        {
            assume INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#4), N#0)
                 == LitInt(1)
               ==> INTERNAL_le_boogie(r#0, k#4);
        }
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#4) && INTERNAL_lt_boogie(k#4, N#0)
           ==> 
          INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#4), N#0)
             == LitInt(1)
           ==> INTERNAL_le_boogie(r#0, k#4);
    }

    assume (forall k#5: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
      INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, N#0)
         ==> 
        INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5), N#0)
           == LitInt(1)
         ==> INTERNAL_le_boogie(r#0, k#5));
    assert x#0 != null;
    assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
    assert g#0 != null;
    assume _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
       == _System.array.Length(g#0);
    havoc k#6;
    assume true;
    assume INTERNAL_le_boogie(0, k#6);
    assert x#0 != null;
    assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
    assume INTERNAL_lt_boogie(k#6, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
    assert x#0 != null;
    assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
    assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
    assert 0 <= k#6
       && k#6 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
    assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType);
    assume $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType)): int
       == x0#0;
    havoc k#7;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#7);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#7
           && k#7 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType);
        assume INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType)): int, 
          x0#0);
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#7)
             && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
           ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType)): int, 
            x0#0);
    }

    assume (forall k#8: int :: 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#8))): DatatypeType } 
      INTERNAL_le_boogie(0, k#8)
           && INTERNAL_lt_boogie(k#8, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#8))): DatatypeType)): int, 
          x0#0));
    havoc k#9;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#9);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(k#9, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#9
           && k#9 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType);
        assert g#0 != null;
        assert 0 <= k#9 && k#9 < _System.array.Length(g#0);
        assume $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)): int
           == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#9))): int, r#0));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#9)
             && INTERNAL_lt_boogie(k#9, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
           ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)): int
             == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#9))): int, r#0));
    }

    assume (forall k#10: int :: 
      { $Unbox(read($Heap, g#0, IndexField(k#10))): int } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#10))): DatatypeType } 
      INTERNAL_le_boogie(0, k#10)
           && INTERNAL_lt_boogie(k#10, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#10))): DatatypeType)): int
           == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#10))): int, r#0)));
}



procedure Call$$_module.__default.RewriteMod(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    m#0: int where INTERNAL_le_boogie(0, m#0))
   returns (g#0: ref
       where $Is(g#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(g#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    x0#0: int where INTERNAL_le_boogie(0, x0#0));
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))));
  requires _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
  requires (forall k#1: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)): int, 
        0));
  requires (forall k#3: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, 
            a#0, 
            $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)): int), 
          N#0)
         == m#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures INTERNAL_le_boogie(0, x0#0);
  ensures INTERNAL_lt_boogie(x0#0, r#0);
  ensures INTERNAL_lt_boogie(r#0, N#0);
  free ensures Power.__default.Pow#canCall(a#0, r#0);
  ensures INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, r#0), N#0)
     == LitInt(1);
  free ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
    INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, N#0)
       ==> Power.__default.Pow#canCall(a#0, k#5));
  free ensures (forall k#5: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5) } 
    INTERNAL_le_boogie(0, k#5) && INTERNAL_lt_boogie(k#5, N#0)
       ==> 
      INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#5), N#0)
         == LitInt(1)
       ==> INTERNAL_le_boogie(r#0, k#5));
  free ensures true;
  ensures _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
     == _System.array.Length(g#0);
  free ensures (forall k#11: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#11))): DatatypeType } 
    INTERNAL_le_boogie(0, k#11)
         && INTERNAL_lt_boogie(k#11, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#11))): DatatypeType));
  free ensures (exists k#11: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#11))): DatatypeType } 
    INTERNAL_le_boogie(0, k#11)
       && INTERNAL_lt_boogie(k#11, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       && $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#11))): DatatypeType)): int
         == x0#0);
  free ensures (forall k#8: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#8))): DatatypeType } 
    INTERNAL_le_boogie(0, k#8)
         && INTERNAL_lt_boogie(k#8, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#8))): DatatypeType));
  ensures (forall k#8: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#8))): DatatypeType } 
    INTERNAL_le_boogie(0, k#8)
         && INTERNAL_lt_boogie(k#8, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#8))): DatatypeType)): int, 
        x0#0));
  free ensures (forall k#10: int :: 
    { $Unbox(read($Heap, g#0, IndexField(k#10))): int } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#10))): DatatypeType } 
    INTERNAL_le_boogie(0, k#10)
         && INTERNAL_lt_boogie(k#10, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#10))): DatatypeType));
  ensures (forall k#10: int :: 
    { $Unbox(read($Heap, g#0, IndexField(k#10))): int } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#10))): DatatypeType } 
    INTERNAL_le_boogie(0, k#10)
         && INTERNAL_lt_boogie(k#10, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#10))): DatatypeType)): int
         == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#10))): int, r#0)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure CheckWellformed$$_module.__default.Shor2(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap))
   returns (m#0: int where INTERNAL_le_boogie(0, m#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    g#0: ref
       where $Is(g#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(g#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    x0#0: int where INTERNAL_le_boogie(0, x0#0));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.Shor2(a#0: int, N#0: int, n#0: int, y#0: ref, x'#0: ref)
   returns (m#0: int, x#0: ref, r#0: int, g#0: ref, x0#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##e#0: int;
  var ##e#1: int;
  var ##e#2: int;
  var k#0: int;
  var ##e#3: int;
  var k#2: int;
  var ##e#4: int;
  var ##b#0: int;
  var ##e#5: int;
  var k#4: int;
  var ##b#1: int;
  var ##e#6: int;
  var k#6: int;
  var ##b#2: int;
  var ##e#7: int;

    // AddMethodImpl: Shor2, CheckWellformed$$_module.__default.Shor2
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_ge_boogie(N#0, 2);
    assert x'#0 != null;
    if (n#0 == read($Heap, x'#0, _module.Qubits.card))
    {
        assert x'#0 != null;
        assert y#0 != null;
    }

    if (n#0 == read($Heap, x'#0, _module.Qubits.card)
       && read($Heap, x'#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card))
    {
        assert y#0 != null;
    }

    assume n#0 == read($Heap, x'#0, _module.Qubits.card)
       && read($Heap, x'#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card)
       && INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
    assert x'#0 != null;
    assume _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert y#0 != null;
    assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert x'#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x'#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x'#0);
    assume _module.Qubits.Wf($Heap, x'#0);
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert x'#0 != null;
    ##e#0 := read($Heap, x'#0, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
    {
        assert x'#0 != null;
        ##e#1 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    }

    if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
    {
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert y#0 != null;
        ##e#2 := read($Heap, y#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#2, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card));
    }

    assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
       && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assert x'#0 != null;
        ##e#3 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#3, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assume INTERNAL_lt_boogie(k#0, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)));
        assert x'#0 != null;
        assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)) != null;
        assert 0 <= k#0
           && k#0 < _System.array.Length(_module.Mode.c(read($Heap, x'#0, _module.Qubits.m)));
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(k#0), $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0)
             && INTERNAL_lt_boogie(k#0, 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(k#0), $Box(LitInt(1))));
    }

    assume (forall k#1: int :: 
      { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
      INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))));
    havoc k#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#2);
        assert x'#0 != null;
        ##e#4 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#4, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assume INTERNAL_lt_boogie(k#2, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)));
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= k#2
           && k#2 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        assert $Is(k#2, Tclass._System.nat());
        ##e#5 := k#2;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#5, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#2);
        assert N#0 != 0;
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#2), N#0)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#2)
             && INTERNAL_lt_boogie(k#2, 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#2), N#0)), 
              $Box(LitInt(1))));
    }

    assume (forall k#3: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
      INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3), N#0)), 
            $Box(LitInt(1)))));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
    assume $HeapSucc(old($Heap), $Heap);
    havoc m#0, x#0, r#0, g#0, x0#0;
    assume x#0 != null && !read(old($Heap), x#0, alloc);
    assume INTERNAL_ge_boogie(r#0, 1);
    assert x#0 != null;
    assume _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
    assert x#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x#0);
    assume _module.Qubits.Wf($Heap, x#0);
    assert x#0 != null;
    assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
    assert g#0 != null;
    assume _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
       == _System.array.Length(g#0);
    havoc k#4;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#4);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(k#4, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#4
           && k#4 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType);
        assume INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType)): int, 
          0);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#4
           && k#4 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType);
        ##b#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#1, TInt, $Heap);
        ##e#6 := $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType)): int;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#6, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, 
          $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType)): int);
        assert N#0 != 0;
        assume INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
              a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType)): int), 
            N#0)
           == m#0;
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#4)
             && INTERNAL_lt_boogie(k#4, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
           ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType)): int, 
              0)
             && INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                  a#0, 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#4))): DatatypeType)): int), 
                N#0)
               == m#0;
    }

    assume (forall k#5: int :: 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
      INTERNAL_le_boogie(0, k#5)
           && INTERNAL_lt_boogie(k#5, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int, 
            0)
           && INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                a#0, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int), 
              N#0)
             == m#0);
    havoc k#6;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#6);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(k#6, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#6
           && k#6 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType);
        assert g#0 != null;
        assert 0 <= k#6 && k#6 < _System.array.Length(g#0);
        assume $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType)): int
           == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#6))): int, r#0));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#6)
             && INTERNAL_lt_boogie(k#6, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
           ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#6))): DatatypeType)): int
             == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#6))): int, r#0));
    }

    assume (forall k#7: int :: 
      { $Unbox(read($Heap, g#0, IndexField(k#7))): int } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
      INTERNAL_le_boogie(0, k#7)
           && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType)): int
           == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#7))): int, r#0)));
    ##b#2 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#2, TInt, $Heap);
    ##e#7 := x0#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#7, Tclass._System.nat(), $Heap);
    assume Power.__default.Pow#canCall(a#0, x0#0);
    assert N#0 != 0;
    assume INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, x0#0), N#0)
       == m#0;
}



procedure Call$$_module.__default.Shor2(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap))
   returns (m#0: int where INTERNAL_le_boogie(0, m#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    g#0: ref
       where $Is(g#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(g#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    x0#0: int where INTERNAL_le_boogie(0, x0#0));
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires n#0 == read($Heap, x'#0, _module.Qubits.card);
  requires read($Heap, x'#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  requires _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, x'#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, x'#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#2 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#2) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#2 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#2) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, tmp#1))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, _System.array.Length(c#2)))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  requires _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
  requires Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
     == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
  requires _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
  requires (forall k#1: int :: 
    { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, 
          Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))));
  requires (forall k#3: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#3) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, 
          Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#3), N#0)), 
          $Box(LitInt(1)))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures x#0 != null && !read(old($Heap), x#0, alloc);
  free ensures true;
  ensures INTERNAL_ge_boogie(r#0, 1);
  free ensures _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x#0);
  ensures _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, x#0)
     && 
    _module.Qubits.Wf($Heap, x#0)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, x#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, x#0, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))))));
  free ensures true;
  ensures _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
     == _System.array.Length(g#0);
  free ensures (forall k#5: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)
         && (INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int, 
            0)
           ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)
             && Power.__default.Pow#canCall(a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int)));
  free ensures (forall k#5: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int, 
          0)
         && INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
              a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int), 
            N#0)
           == m#0);
  free ensures (forall k#7: int :: 
    { $Unbox(read($Heap, g#0, IndexField(k#7))): int } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
    INTERNAL_le_boogie(0, k#7)
         && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType));
  ensures (forall k#7: int :: 
    { $Unbox(read($Heap, g#0, IndexField(k#7))): int } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
    INTERNAL_le_boogie(0, k#7)
         && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType)): int
         == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#7))): int, r#0)));
  free ensures Power.__default.Pow#canCall(a#0, x0#0);
  ensures INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, x0#0), N#0)
     == m#0;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.__default.Shor2(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap), 
    x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap))
   returns (m#0: int where INTERNAL_le_boogie(0, m#0), 
    defass#x#0: bool, 
    x#0: ref
       where defass#x#0
         ==> $Is(x#0, Tclass._module.Qubits())
           && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    g#0: ref
       where $Is(g#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(g#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    x0#0: int where INTERNAL_le_boogie(0, x0#0), 
    $_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires n#0 == read($Heap, x'#0, _module.Qubits.card);
  requires read($Heap, x'#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  requires _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, x'#0)
     && 
    _module.Qubits.Wf($Heap, x'#0)
     && (var tmp#3 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
         then (var b#7 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
          _System.array.Length(b#7) == read($Heap, x'#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           then (var h#7 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#7) == read($Heap, x'#0, _module.Qubits.card))
           else (var c#7 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#7 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#7, tmp#3)
                 && INTERNAL_le_boogie(dof#7, _System.array.Length(c#7))
                 && INTERNAL_le_boogie(dof#7, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))))));
  free requires _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#4 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#9 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#9) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#9 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#9) == read($Heap, y#0, _module.Qubits.card))
           else (var c#9 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#9 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#9, tmp#4)
                 && INTERNAL_le_boogie(dof#9, _System.array.Length(c#9))
                 && INTERNAL_le_boogie(dof#9, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  requires _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
  requires Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
     == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
  requires _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
  free requires (forall k#1: int :: 
    { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))));
  free requires (forall k#3: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3), N#0)), 
          $Box(LitInt(1)))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures x#0 != null && !read(old($Heap), x#0, alloc);
  free ensures true;
  ensures INTERNAL_ge_boogie(r#0, 1);
  free ensures _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x#0);
  ensures _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var b#10 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(b#10) == read($Heap, x#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var h#10 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#10) == read($Heap, x#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, tmp#5))));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, _System.array.Length(c#10)))));
  ensures _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#5 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#10 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#10 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#10, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))));
  free ensures true;
  ensures _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
     == _System.array.Length(g#0);
  free ensures (forall k#5: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)
         && (INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int, 
            0)
           ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)
             && Power.__default.Pow#canCall(a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int)));
  ensures (forall k#5: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int, 
          0)
         && INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, 
              a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#5))): DatatypeType)): int), 
            N#0)
           == m#0);
  free ensures (forall k#7: int :: 
    { $Unbox(read($Heap, g#0, IndexField(k#7))): int } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
    INTERNAL_le_boogie(0, k#7)
         && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType));
  ensures (forall k#7: int :: 
    { $Unbox(read($Heap, g#0, IndexField(k#7))): int } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType } 
    INTERNAL_le_boogie(0, k#7)
         && INTERNAL_lt_boogie(k#7, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#7))): DatatypeType)): int
         == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#7))): int, r#0)));
  free ensures Power.__default.Pow#canCall(a#0, x0#0);
  ensures INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, x0#0), N#0)
     == m#0;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.__default.Shor2(a#0: int, N#0: int, n#0: int, y#0: ref, x'#0: ref)
   returns (m#0: int, 
    defass#x#0: bool, 
    x#0: ref, 
    r#0: int, 
    g#0: ref, 
    x0#0: int, 
    $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var M#0: int where INTERNAL_le_boogie(0, M#0);
  var ##e#8: int;
  var idx#0: int;
  var mod#0: DatatypeType
     where $Is(mod#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt))
       && $IsAlloc(mod#0, Tclass._System.Tuple2(Tclass._System.nat(), TInt), $Heap);
  var $rhs##0: int;
  var $rhs##1: DatatypeType;
  var a##0: ref;
  var len##0: int;
  var $tmp##0: Box;
  var ##e#9: int;
  var ##b#3: int;
  var ##e#10: int;
  var j#0: int;
  var tmp#6: ref
     where $Is(tmp#6, Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)))
       && $IsAlloc(tmp#6, 
        Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), TInt)), 
        $Heap);
  var $rhs#0: int;
  var $rhs#1: ref;
  var $nw: ref;
  var i#0: int;
  var i#0#lo: int;
  var i#0#hi: int;
  var ##e#11: int;
  var $PreLoopHeap$loop#0: Heap;
  var preLoop$loop#0$defass#x#0: bool;
  var $w$loop#0: bool;
  var k#8: int;
  var ##e#12: int;
  var k#10: int;
  var k#12: int;
  var ##b#4: int;
  var ##e#13: int;
  var $rhs#0_0_0: DatatypeType;
  var $rhs#2: int;
  var $rhs#3: DatatypeType;
  var k#14: int;
  var ##b#5: int;
  var ##e#14: int;
  var $rhs##2: ref;
  var $rhs##3: int;
  var $rhs##4: int;
  var a##1: int;
  var N##0: int;
  var x##0: ref;
  var m##0: int;

    // AddMethodImpl: Shor2, Impl$$_module.__default.Shor2
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(575,9)
    assume true;
    ##e#8 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#8, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(n#0);
    assume Power2.__default.Pow2#canCall(n#0);
    M#0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(577,25)
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Adding lhs with type (nat, int)
    // TrCallStmt: Before ProcessCallStmt
    assert y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m));
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assume true;
    // ProcessCallStmt: CheckSubrange
    len##0 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m));
    // ProcessCallStmt: Make the call
    call $rhs##0, $tmp##0 := Call$$_module.__default.Sample(Tclass._System.Tuple2(Tclass._System.nat(), TInt), a##0, len##0);
    havoc $rhs##1;
    assume $rhs##1 == $Unbox($tmp##0): DatatypeType;
    // TrCallStmt: After ProcessCallStmt
    idx#0 := $rhs##0;
    mod#0 := $rhs##1;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(578,5)
    assume true;
    assume _System.Tuple2.___hMake2_q(mod#0);
    assume _System.Tuple2.___hMake2_q(mod#0);
    m#0 := $Unbox(_System.Tuple2._0(mod#0)): int;
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(581,3)
    assert {:subsumption 0} y#0 != null;
    assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
    assert {:subsumption 0} 0 <= idx#0
       && idx#0 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
    assume $IsA#_System.Tuple2(mod#0)
       && $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(idx#0))): DatatypeType);
    assert _System.Tuple2#Equal(mod#0, 
      $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(idx#0))): DatatypeType);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(582,3)
    if (INTERNAL_le_boogie(0, idx#0))
    {
        assert {:subsumption 0} x'#0 != null;
        ##e#9 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#9, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    }

    assume INTERNAL_le_boogie(0, idx#0)
       ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    assert {:subsumption 0} INTERNAL_le_boogie(0, idx#0);
    assert {:subsumption 0} INTERNAL_lt_boogie(idx#0, 
      Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)));
    assume INTERNAL_le_boogie(0, idx#0)
       && INTERNAL_lt_boogie(idx#0, 
        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)));
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(583,3)
    ##b#3 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#3, TInt, $Heap);
    assert $Is(idx#0, Tclass._System.nat());
    ##e#10 := idx#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#10, Tclass._System.nat(), $Heap);
    assume Power.__default.Pow#canCall(a#0, idx#0);
    assert {:subsumption 0} N#0 != 0;
    assume $IsA#_System.Tuple2(mod#0) && Power.__default.Pow#canCall(a#0, idx#0);
    assert {:subsumption 0} _System.Tuple2#Equal(mod#0, 
      #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, idx#0), N#0)), 
        $Box(LitInt(1))));
    assume _System.Tuple2#Equal(mod#0, 
      #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, idx#0), N#0)), 
        $Box(LitInt(1))));
    // ----- update statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(584,14)
    assume true;
    assume true;
    assume true;
    $rhs#0 := LitInt(0);
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert 0 <= _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m));
    havoc $nw;
    assume $nw != null
       && dtype($nw)
         == Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), TInt));
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw)
       == _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m));
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    $rhs#1 := $nw;
    j#0 := $rhs#0;
    tmp#6 := $rhs#1;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(585,5)
    assume true;
    assume _System.Tuple2.___hMake2_q(mod#0);
    assume _System.Tuple2.___hMake2_q(mod#0);
    m#0 := $Unbox(_System.Tuple2._0(mod#0)): int;
    // ----- for-loop statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(586,3)
    i#0#lo := LitInt(0);
    assert x'#0 != null;
    ##e#11 := read($Heap, x'#0, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#11, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    i#0#hi := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
    assert i#0#lo <= i#0#hi;
    i#0 := i#0#lo;
    $PreLoopHeap$loop#0 := $Heap;
    preLoop$loop#0$defass#x#0 := defass#x#0;
    havoc $w$loop#0;
    while (true)
      free invariant i#0#lo <= i#0 && i#0 <= i#0#hi;
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0 ==> INTERNAL_le_boogie(0, j#0);
      invariant $w$loop#0 ==> INTERNAL_le_boogie(j#0, i#0);
      free invariant $w$loop#0 ==> _System.Tuple2.___hMake2_q(mod#0);
      invariant $w$loop#0 ==> m#0 == $Unbox(_System.Tuple2._0(mod#0)): int;
      free invariant $w$loop#0
         ==> (forall k#9: int :: 
          { INTERNAL_ge_boogie(k#9, 0) } 
            { INTERNAL_lt_boogie(k#9, 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))) } 
            { INTERNAL_le_boogie(0, k#9) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
          (INTERNAL_le_boogie(0, k#9)
               ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
             && (INTERNAL_le_boogie(0, k#9)
                 && INTERNAL_lt_boogie(k#9, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
               ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)));
      invariant $w$loop#0
         ==> (forall k#9: int :: 
          { INTERNAL_ge_boogie(k#9, 0) } 
            { INTERNAL_lt_boogie(k#9, 
              Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))) } 
            { INTERNAL_le_boogie(0, k#9) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
          INTERNAL_le_boogie(0, k#9)
               && INTERNAL_lt_boogie(k#9, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
             ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)): int
                 == k#9
               && INTERNAL_ge_boogie(k#9, 0));
      free invariant $w$loop#0
         ==> (forall k#9: int :: 
          { INTERNAL_ge_boogie(k#9, 0) } 
            { INTERNAL_lt_boogie(k#9, 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))) } 
            { INTERNAL_le_boogie(0, k#9) } 
            { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
          INTERNAL_le_boogie(0, k#9)
               && INTERNAL_lt_boogie(k#9, 
                Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
             ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)): int
                 == k#9
               && INTERNAL_ge_boogie(k#9, 0));
      free invariant $w$loop#0
         ==> (forall k#11: int :: 
          { $Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType } 
          INTERNAL_le_boogie(0, k#11) && INTERNAL_lt_boogie(k#11, j#0)
             ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType));
      invariant $w$loop#0
         ==> (forall k#11: int :: 
          { $Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType } 
          INTERNAL_le_boogie(0, k#11) && INTERNAL_lt_boogie(k#11, j#0)
             ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType)): int, 
              0));
      free invariant $w$loop#0
         ==> (forall k#13: int :: 
          { $Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType } 
          INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, j#0)
             ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)): int));
      invariant $w$loop#0
         ==> (forall k#13: int :: 
          { $Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType } 
          INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, j#0)
             ==> INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, 
                  a#0, 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)): int), 
                N#0)
               == m#0);
      free invariant $w$loop#0
         ==> (forall k#13: int :: 
          { $Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType } 
          INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, j#0)
             ==> INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                  a#0, 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)): int), 
                N#0)
               == m#0);
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && read(old($Heap), $o, alloc)
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o]);
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
        { read($Heap, $o, $f) } 
        $o != null && read($PreLoopHeap$loop#0, $o, alloc)
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant preLoop$loop#0$defass#x#0 ==> defass#x#0;
      free invariant true;
    {
        if (!$w$loop#0)
        {
            if (INTERNAL_le_boogie(0, j#0))
            {
            }

            assume true;
            assume INTERNAL_le_boogie(0, j#0) && INTERNAL_le_boogie(j#0, i#0);
            assume _System.Tuple2.___hMake2_q(mod#0);
            assume _System.Tuple2.___hMake2_q(mod#0);
            assume m#0 == $Unbox(_System.Tuple2._0(mod#0)): int;
            // Begin Comprehension WF check
            havoc k#8;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#8))
                {
                    assert {:subsumption 0} x'#0 != null;
                    ##e#12 := read($Heap, x'#0, _module.Qubits.card);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##e#12, Tclass._System.nat(), $Heap);
                    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
                }

                if (INTERNAL_le_boogie(0, k#8)
                   && INTERNAL_lt_boogie(k#8, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))
                {
                    assert {:subsumption 0} x'#0 != null;
                    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
                    assert _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)) != null;
                    assert {:subsumption 0} 0 <= k#8
                       && k#8 < _System.array.Length(_module.Mode.c(read($Heap, x'#0, _module.Qubits.m)));
                    assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#8))): DatatypeType);
                    if ($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#8))): DatatypeType)): int
                       == k#8)
                    {
                    }
                }
            }

            // End Comprehension WF check
            assume (forall k#9: int :: 
              { INTERNAL_ge_boogie(k#9, 0) } 
                { INTERNAL_lt_boogie(k#9, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))) } 
                { INTERNAL_le_boogie(0, k#9) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
              (INTERNAL_le_boogie(0, k#9)
                   ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
                 && (INTERNAL_le_boogie(0, k#9)
                     && INTERNAL_lt_boogie(k#9, 
                      Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
                   ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)));
            assume (forall k#9: int :: 
              { INTERNAL_ge_boogie(k#9, 0) } 
                { INTERNAL_lt_boogie(k#9, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))) } 
                { INTERNAL_le_boogie(0, k#9) } 
                { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
              INTERNAL_le_boogie(0, k#9)
                   && INTERNAL_lt_boogie(k#9, 
                    Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
                 ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)): int
                     == k#9
                   && INTERNAL_ge_boogie(k#9, 0));
            // Begin Comprehension WF check
            havoc k#10;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#10))
                {
                }

                if (INTERNAL_le_boogie(0, k#10) && INTERNAL_lt_boogie(k#10, j#0))
                {
                    assert tmp#6 != null;
                    assert {:subsumption 0} 0 <= k#10 && k#10 < _System.array.Length(tmp#6);
                    assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, tmp#6, IndexField(k#10))): DatatypeType);
                }
            }

            // End Comprehension WF check
            assume (forall k#11: int :: 
              { $Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType } 
              INTERNAL_le_boogie(0, k#11) && INTERNAL_lt_boogie(k#11, j#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType));
            assume (forall k#11: int :: 
              { $Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType } 
              INTERNAL_le_boogie(0, k#11) && INTERNAL_lt_boogie(k#11, j#0)
                 ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType)): int, 
                  0));
            // Begin Comprehension WF check
            havoc k#12;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#12))
                {
                }

                if (INTERNAL_le_boogie(0, k#12) && INTERNAL_lt_boogie(k#12, j#0))
                {
                    assert tmp#6 != null;
                    assert {:subsumption 0} 0 <= k#12 && k#12 < _System.array.Length(tmp#6);
                    assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, tmp#6, IndexField(k#12))): DatatypeType);
                    ##b#4 := a#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##b#4, TInt, $Heap);
                    ##e#13 := $Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#12))): DatatypeType)): int;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##e#13, Tclass._System.nat(), $Heap);
                    assume Power.__default.Pow#canCall(a#0, 
                      $Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#12))): DatatypeType)): int);
                    assert {:subsumption 0} N#0 != 0;
                }
            }

            // End Comprehension WF check
            assume (forall k#13: int :: 
              { $Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType } 
              INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, j#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)
                   && Power.__default.Pow#canCall(a#0, 
                    $Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)): int));
            assume (forall k#13: int :: 
              { $Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType } 
              INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, j#0)
                 ==> INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                      a#0, 
                      $Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)): int), 
                    N#0)
                   == m#0);
            assume false;
        }

        assume true;
        if (i#0 == i#0#hi)
        {
            break;
        }

        // ----- if statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(593,5)
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= i#0
           && i#0 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#0))): DatatypeType);
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#0))): DatatypeType);
        if ($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(i#0))): DatatypeType)): int
           == m#0)
        {
            // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(595,14)
            assert tmp#6 != null;
            assert 0 <= j#0 && j#0 < _System.array.Length(tmp#6);
            assume true;
            assert $_Frame[tmp#6, IndexField(j#0)];
            assert x'#0 != null;
            assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
            assert _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)) != null;
            assert 0 <= i#0
               && i#0 < _System.array.Length(_module.Mode.c(read($Heap, x'#0, _module.Qubits.m)));
            assume true;
            $rhs#0_0_0 := $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(i#0))): DatatypeType;
            $Heap := update($Heap, tmp#6, IndexField(j#0), $Box($rhs#0_0_0));
            assume $IsGoodHeap($Heap);
            // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(596,9)
            assume true;
            assume true;
            j#0 := INTERNAL_add_boogie(j#0, 1);
        }
        else
        {
        }

        i#0 := i#0 + 1;
        assume INTERNAL_le_boogie(0, j#0) && INTERNAL_le_boogie(j#0, i#0)
           ==> _System.Tuple2.___hMake2_q(mod#0)
             && (m#0 == $Unbox(_System.Tuple2._0(mod#0)): int
               ==> (forall k#9: int :: 
                  { INTERNAL_ge_boogie(k#9, 0) } 
                    { INTERNAL_lt_boogie(k#9, 
                      Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))) } 
                    { INTERNAL_le_boogie(0, k#9) } 
                    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
                  (INTERNAL_le_boogie(0, k#9)
                       ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
                     && (INTERNAL_le_boogie(0, k#9)
                         && INTERNAL_lt_boogie(k#9, 
                          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
                       ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)))
                 && ((forall k#9: int :: 
                    { INTERNAL_ge_boogie(k#9, 0) } 
                      { INTERNAL_lt_boogie(k#9, 
                        Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))) } 
                      { INTERNAL_le_boogie(0, k#9) } 
                      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType } 
                    INTERNAL_le_boogie(0, k#9)
                         && INTERNAL_lt_boogie(k#9, 
                          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
                       ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#9))): DatatypeType)): int
                           == k#9
                         && INTERNAL_ge_boogie(k#9, 0))
                   ==> (forall k#11: int :: 
                      { $Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType } 
                      INTERNAL_le_boogie(0, k#11) && INTERNAL_lt_boogie(k#11, j#0)
                         ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType))
                     && ((forall k#11: int :: 
                        { $Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType } 
                        INTERNAL_le_boogie(0, k#11) && INTERNAL_lt_boogie(k#11, j#0)
                           ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#11))): DatatypeType)): int, 
                            0))
                       ==> (forall k#13: int :: 
                        { $Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType } 
                        INTERNAL_le_boogie(0, k#13) && INTERNAL_lt_boogie(k#13, j#0)
                           ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)
                             && Power.__default.Pow#canCall(a#0, 
                              $Unbox(_System.Tuple2._0($Unbox(read($Heap, tmp#6, IndexField(k#13))): DatatypeType)): int)))));
    }

    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(599,5)
    assume true;
    // ----- init call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(599,19)
    // TrCallStmt: Before ProcessCallStmt
    // ProcessCallStmt: Make the call
    call $nw := Call$$_module.Qubits.EmptyCH();
    // TrCallStmt: After ProcessCallStmt
    x#0 := $nw;
    defass#x#0 := true;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(600,10)
    assert defass#x#0;
    assert x#0 != null;
    assume true;
    assert $_Frame[x#0, _module.Qubits.card];
    assert y#0 != null;
    assume true;
    $rhs#2 := read($Heap, y#0, _module.Qubits.card);
    $Heap := update($Heap, x#0, _module.Qubits.card, $rhs#2);
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(601,7)
    assert defass#x#0;
    assert x#0 != null;
    assume true;
    assert $_Frame[x#0, _module.Qubits.m];
    assert $Is(j#0, Tclass._System.nat());
    assume true;
    $rhs#3 := #_module.Mode.CH(j#0, tmp#6);
    $Heap := update($Heap, x#0, _module.Qubits.m, $rhs#3);
    assume $IsGoodHeap($Heap);
    // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(602,3)
    // Begin Comprehension WF check
    havoc k#14;
    if (true)
    {
        if (INTERNAL_le_boogie(0, k#14))
        {
            assert defass#x#0;
            assert {:subsumption 0} x#0 != null;
            assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        }

        if (INTERNAL_le_boogie(0, k#14)
           && INTERNAL_lt_boogie(k#14, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))))
        {
            assert defass#x#0;
            assert {:subsumption 0} x#0 != null;
            assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
            assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
            assert {:subsumption 0} 0 <= k#14
               && k#14 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#14))): DatatypeType);
            if (INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#14))): DatatypeType)): int, 
              0))
            {
                assert defass#x#0;
                assert {:subsumption 0} x#0 != null;
                assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
                assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
                assert {:subsumption 0} 0 <= k#14
                   && k#14 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
                assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#14))): DatatypeType);
                ##b#5 := a#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##b#5, TInt, $Heap);
                ##e#14 := $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#14))): DatatypeType)): int;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#14, Tclass._System.nat(), $Heap);
                assume Power.__default.Pow#canCall(a#0, 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#14))): DatatypeType)): int);
                assert {:subsumption 0} N#0 != 0;
            }
        }
    }

    // End Comprehension WF check
    assume (forall k#15: int :: 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType } 
      INTERNAL_le_boogie(0, k#15)
           && INTERNAL_lt_boogie(k#15, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType)
           && (INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType)): int, 
              0)
             ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType)
               && Power.__default.Pow#canCall(a#0, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType)): int)));
    assert {:subsumption 0} (forall k#15: int :: 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType } 
      INTERNAL_le_boogie(0, k#15)
           && INTERNAL_lt_boogie(k#15, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType)): int, 
            0)
           && INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, 
                a#0, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType)): int), 
              N#0)
             == m#0);
    assume (forall k#15: int :: 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType } 
      INTERNAL_le_boogie(0, k#15)
           && INTERNAL_lt_boogie(k#15, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType)): int, 
            0)
           && INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                a#0, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#15))): DatatypeType)): int), 
              N#0)
             == m#0);
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(603,25)
    assume true;
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type array<nat>
    // TrCallStmt: Adding lhs with type nat
    // TrCallStmt: Adding lhs with type nat
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##1 := a#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    N##0 := N#0;
    assert defass#x#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    x##0 := x#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    m##0 := m#0;
    // ProcessCallStmt: Make the call
    call $rhs##2, $rhs##3, $rhs##4 := Call$$_module.__default.RewriteMod(a##1, N##0, x##0, m##0);
    // TrCallStmt: After ProcessCallStmt
    g#0 := $rhs##2;
    r#0 := $rhs##3;
    x0#0 := $rhs##4;
    assert defass#x#0;
}



procedure CheckWellformed$$_module.__default.Shor3(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    x0#0: int where INTERNAL_le_boogie(0, x0#0), 
    g#0: ref
       where $Is(g#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(g#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    m#0: int where INTERNAL_le_boogie(0, m#0))
   returns (alpha#0: ref
       where $Is(alpha#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat())))
         && $IsAlloc(alpha#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat())), 
          $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.Shor3(a#0: int, N#0: int, n#0: int, x#0: ref, x0#0: int, g#0: ref, r#0: int, m#0: int)
   returns (alpha#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##e#0: int;
  var k#0: int;
  var ##b#0: int;
  var ##e#1: int;
  var k#2: int;
  var ##b#1: int;
  var ##e#2: int;
  var ##e#3: int;
  var ##e#4: int;
  var ##e#5: int;
  var k#4: int;
  var ##e#6: int;
  var ##e#7: int;

    // AddMethodImpl: Shor3, CheckWellformed$$_module.__default.Shor3
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_ge_boogie(N#0, 2);
    if (INTERNAL_lt_boogie(0, r#0))
    {
    }

    assume INTERNAL_lt_boogie(0, r#0) && INTERNAL_le_boogie(r#0, N#0);
    assert x#0 != null;
    assume n#0 == read($Heap, x#0, _module.Qubits.card);
    assert x#0 != null;
    assume _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
    assert x#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x#0);
    assume _module.Qubits.Wf($Heap, x#0);
    assert x#0 != null;
    assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
    assert g#0 != null;
    if (_module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
       == _System.array.Length(g#0))
    {
        assert g#0 != null;
        ##e#0 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(n#0);
        assert r#0 != 0;
    }

    assume _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
         == _System.array.Length(g#0)
       && _System.array.Length(g#0)
         == INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0);
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(k#0, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#0
           && k#0 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType);
        assume INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType)): int, 
          0);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#0
           && k#0 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType);
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        ##e#1 := $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType)): int;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, 
          $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType)): int);
        assert N#0 != 0;
        assume INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
              a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType)): int), 
            N#0)
           == m#0;
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0)
             && INTERNAL_lt_boogie(k#0, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
           ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType)): int, 
              0)
             && INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                  a#0, 
                  $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType)): int), 
                N#0)
               == m#0;
    }

    assume (forall k#1: int :: 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
      INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)): int, 
            0)
           && INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
                a#0, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)): int), 
              N#0)
             == m#0);
    havoc k#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#2);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assume INTERNAL_lt_boogie(k#2, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)));
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
        assert 0 <= k#2
           && k#2 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
        assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType);
        assert g#0 != null;
        assert 0 <= k#2 && k#2 < _System.array.Length(g#0);
        assume $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType)): int
           == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#2))): int, r#0));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#2)
             && INTERNAL_lt_boogie(k#2, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
           ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType)): int
             == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#2))): int, r#0));
    }

    assume (forall k#3: int :: 
      { $Unbox(read($Heap, g#0, IndexField(k#3))): int } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
      INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
         ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)): int
           == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#3))): int, r#0)));
    ##b#1 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#1, TInt, $Heap);
    ##e#2 := x0#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#2, Tclass._System.nat(), $Heap);
    assume Power.__default.Pow#canCall(a#0, x0#0);
    assert N#0 != 0;
    assume INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, x0#0), N#0)
       == m#0;
    ##e#3 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#3, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(n#0);
    assert r#0 != 0;
    assume INTERNAL_mod_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
       == LitInt(0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
    assume $HeapSucc(old($Heap), $Heap);
    havoc alpha#0;
    assert alpha#0 != null;
    ##e#4 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#4, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(n#0);
    assume _System.array.Length(alpha#0)
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
    ##e#5 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#5, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(n#0);
    assert r#0 != 0;
    assume INTERNAL_gt_boogie(INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0), 
      0);
    havoc k#4;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#4);
        ##e#6 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#6, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(n#0);
        assume INTERNAL_lt_boogie(k#4, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0));
        if (*)
        {
            ##e#7 := n#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#7, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(n#0);
            assert r#0 != 0;
            assert INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
               != 0;
            assume INTERNAL_mod_boogie(k#4, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
               == LitInt(0);
            assert alpha#0 != null;
            assert 0 <= k#4 && k#4 < _System.array.Length(alpha#0);
            assume _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#4))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(k#4), $Box(LitInt(1))));
        }
        else
        {
            assume INTERNAL_mod_boogie(k#4, 
                  INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                 == LitInt(0)
               ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#4))): DatatypeType, 
                #_System._tuple#2._#Make2($Box(k#4), $Box(LitInt(1))));
        }
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#4)
             && INTERNAL_lt_boogie(k#4, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0))
           ==> 
          INTERNAL_mod_boogie(k#4, 
              INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
             == LitInt(0)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#4))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(k#4), $Box(LitInt(1))));
    }

    assume (forall k#5: int :: 
      { #_System._tuple#2._#Make2($Box(k#5), $Box(1)) } 
        { $Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType } 
      INTERNAL_le_boogie(0, k#5)
           && INTERNAL_lt_boogie(k#5, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0))
         ==> 
        INTERNAL_mod_boogie(k#5, 
            INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
           == LitInt(0)
         ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(k#5), $Box(LitInt(1)))));
}



procedure Call$$_module.__default.Shor3(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    x0#0: int where INTERNAL_le_boogie(0, x0#0), 
    g#0: ref
       where $Is(g#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(g#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    m#0: int where INTERNAL_le_boogie(0, m#0))
   returns (alpha#0: ref
       where $Is(alpha#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat())))
         && $IsAlloc(alpha#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat())), 
          $Heap));
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires INTERNAL_lt_boogie(0, r#0);
  requires INTERNAL_le_boogie(r#0, N#0);
  requires n#0 == read($Heap, x#0, _module.Qubits.card);
  requires _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))));
  requires _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
     == _System.array.Length(g#0);
  requires _System.array.Length(g#0)
     == INTERNAL_div_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0);
  requires (forall k#1: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)): int, 
          0)
         && INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, 
              a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)): int), 
            N#0)
           == m#0);
  requires (forall k#3: int :: 
    { $Unbox(read($Heap, g#0, IndexField(k#3))): int } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)): int
         == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#3))): int, r#0)));
  requires INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, x0#0), N#0)
     == m#0;
  requires INTERNAL_mod_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0)
     == LitInt(0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Power2.__default.Pow2#canCall(n#0);
  ensures _System.array.Length(alpha#0)
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0);
  free ensures Power2.__default.Pow2#canCall(n#0);
  ensures INTERNAL_gt_boogie(INTERNAL_div_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0), 
    0);
  free ensures (forall k#5: int :: 
    { #_System._tuple#2._#Make2($Box(k#5), $Box(1)) } 
      { $Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#5) ==> Power2.__default.Pow2#canCall(n#0))
       && (INTERNAL_le_boogie(0, k#5)
           && INTERNAL_lt_boogie(k#5, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0))
         ==> Power2.__default.Pow2#canCall(n#0)
           && (INTERNAL_mod_boogie(k#5, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
               == LitInt(0)
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType))));
  free ensures (forall k#5: int :: 
    { #_System._tuple#2._#Make2($Box(k#5), $Box(1)) } 
      { $Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0))
       ==> 
      INTERNAL_mod_boogie(k#5, 
          INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
         == LitInt(0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(k#5), $Box(LitInt(1)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.__default.Shor3(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    x0#0: int where INTERNAL_le_boogie(0, x0#0), 
    g#0: ref
       where $Is(g#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(g#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    r#0: int where INTERNAL_le_boogie(0, r#0), 
    m#0: int where INTERNAL_le_boogie(0, m#0))
   returns (alpha#0: ref
       where $Is(alpha#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat())))
         && $IsAlloc(alpha#0, 
          Tclass._System.array(Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat())), 
          $Heap), 
    $_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires INTERNAL_lt_boogie(0, r#0);
  requires INTERNAL_le_boogie(r#0, N#0);
  requires n#0 == read($Heap, x#0, _module.Qubits.card);
  requires _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, x#0)
     && 
    _module.Qubits.Wf($Heap, x#0)
     && (var tmp#1 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
         then (var b#3 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
          _System.array.Length(b#3) == read($Heap, x#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           then (var h#3 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#3) == read($Heap, x#0, _module.Qubits.card))
           else (var c#3 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#3 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#3, tmp#1)
                 && INTERNAL_le_boogie(dof#3, _System.array.Length(c#3))
                 && INTERNAL_le_boogie(dof#3, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))))));
  requires _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
     == _System.array.Length(g#0);
  requires _System.array.Length(g#0)
     == INTERNAL_div_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0);
  free requires (forall k#1: int :: 
    { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> INTERNAL_ge_boogie($Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)): int, 
          0)
         && INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, 
              a#0, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)): int), 
            N#0)
           == m#0);
  requires (forall k#3: int :: 
    { $Unbox(read($Heap, g#0, IndexField(k#3))): int } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)))
       ==> $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)): int
         == INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(k#3))): int, r#0)));
  requires INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, x0#0), N#0)
     == m#0;
  requires INTERNAL_mod_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0)
     == LitInt(0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Power2.__default.Pow2#canCall(n#0);
  ensures _System.array.Length(alpha#0)
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0);
  free ensures Power2.__default.Pow2#canCall(n#0);
  ensures INTERNAL_gt_boogie(INTERNAL_div_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0), 
    0);
  free ensures (forall k#5: int :: 
    { #_System._tuple#2._#Make2($Box(k#5), $Box(1)) } 
      { $Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#5) ==> Power2.__default.Pow2#canCall(n#0))
       && (INTERNAL_le_boogie(0, k#5)
           && INTERNAL_lt_boogie(k#5, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0))
         ==> Power2.__default.Pow2#canCall(n#0)
           && (INTERNAL_mod_boogie(k#5, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
               == LitInt(0)
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType))));
  ensures (forall k#5: int :: 
    { #_System._tuple#2._#Make2($Box(k#5), $Box(1)) } 
      { $Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType } 
    INTERNAL_le_boogie(0, k#5)
         && INTERNAL_lt_boogie(k#5, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0))
       ==> 
      INTERNAL_mod_boogie(k#5, 
          INTERNAL_div_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0))
         == LitInt(0)
       ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#5))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(k#5), $Box(LitInt(1)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



function Tclass.Exp.IExp() : Ty;

const unique Tagclass.Exp.IExp: TyTag;

// Tclass.Exp.IExp Tag
axiom Tag(Tclass.Exp.IExp()) == Tagclass.Exp.IExp
   && TagFamily(Tclass.Exp.IExp()) == tytagFamily$IExp;

// Box/unbox axiom for Tclass.Exp.IExp
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.Exp.IExp()) } 
  $IsBox(bx, Tclass.Exp.IExp())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass.Exp.IExp()));

axiom FDim(Exp.IExp.value) == 0
   && FieldOfDecl(class.Exp.IExp?, field$value) == Exp.IExp.value
   && !$IsGhostField(Exp.IExp.value);

axiom FDim(Exp.IExp.Repr) == 0
   && FieldOfDecl(class.Exp.IExp?, field$Repr) == Exp.IExp.Repr
   && $IsGhostField(Exp.IExp.Repr);

implementation Impl$$_module.__default.Shor3(a#0: int, N#0: int, n#0: int, x#0: ref, x0#0: int, g#0: ref, r#0: int, m#0: int)
   returns (alpha#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var x##0: int;
  var ##e#8: int;
  var y##0: int;
  var ##e#9: int;
  var $lambdaHeap#0: Heap;
  var i#0: int;
  var $_Frame#l0: <beta>[ref,Field beta]bool;
  var lambdaResult#0: DatatypeType;
  var $nw: ref;
  var i#1: int;
  var i#1#lo: int;
  var i#1#hi: int;
  var ##e#10: int;
  var i#1#x: int;
  var $PreLoopHeap$loop#0: Heap;
  var $w$loop#0: bool;
  var ##e#11: int;
  var k#6: int;
  var ##e#12: int;
  var k#0_0: int;
  var ##e#0_0: int;
  var defass#stub#0_0: bool;
  var stub#0_0: ref
     where defass#stub#0_0
       ==> $Is(stub#0_0, Tclass.Exp.IExp()) && $IsAlloc(stub#0_0, Tclass.Exp.IExp(), $Heap);
  var N##0_0: int;
  var idx##0_0: int;
  var phases#0_0: ref
     where $Is(phases#0_0, Tclass._System.array(Tclass.Exp.IExp()))
       && $IsAlloc(phases#0_0, Tclass._System.array(Tclass.Exp.IExp()), $Heap);
  var $lambdaHeap#0_0: Heap;
  var _v4#0_0: int;
  var $_Frame#l0_0: <beta>[ref,Field beta]bool;
  var lambdaResult#0_0: ref;
  var j#0_0: int;
  var j#0_0#lo: int;
  var j#0_0#hi: int;
  var j#0_0#x: int;
  var $PreLoopHeap$loop#0_0: Heap;
  var preLoop$loop#0_0$defass#stub#0_0: bool;
  var $w$loop#0_0: bool;
  var k#0_2: int;
  var ##e#0_1: int;
  var k#0_4: int;
  var ##e#0_2: int;
  var x##0_0_0: int;
  var y##0_0_0: int;
  var prod#0_0_0: int where INTERNAL_le_boogie(0, prod#0_0_0);
  var $rhs#0_0_0: ref;
  var N##0_0_0: int;
  var ##e#0_0_0: int;
  var idx##0_0_0: int;
  var idx##0_0_1: int;
  var x##0_0_1_0_0: int;
  var y##0_0_1_0_0: int;
  var z##0_0_1_0_0: int;
  var x##0_0_1_1_0: int;
  var y##0_0_1_1_0: int;
  var x##0_0: int;
  var ##e#0_3: int;
  var y##0_0: int;
  var ##e#0_4: int;
  var ##e#0_1_0: int;
  var x##0_1_0_0: int;
  var y##0_1_0_0: int;
  var ##e#0_1_0_0: int;
  var z##0_1_0_0: int;
  var $rhs#0_1_0: DatatypeType;
  var ##e#0_1_1: int;
  var $rhs#0_2_0: DatatypeType;
  var ##e#0_2_0: int;
  var ##e#0_5: int;

    // AddMethodImpl: Shor3, Impl$$_module.__default.Shor3
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(625,24)
    // TrCallStmt: Before ProcessCallStmt
    ##e#8 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#8, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(n#0);
    assume Power2.__default.Pow2#canCall(n#0);
    // ProcessCallStmt: CheckSubrange
    x##0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    y##0 := r#0;
    // ProcessCallStmt: Make the call
    call Call$$_module.__default.LemmaDividedDivGtZero(x##0, y##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(626,9)
    assume true;
    ##e#9 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#9, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(n#0);
    assert 0 <= Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#0;
        assume $IsGoodHeap($lambdaHeap#0);
        assume $Heap == $lambdaHeap#0 || $HeapSucc($Heap, $lambdaHeap#0);
        havoc i#0;
        if (INTERNAL_le_boogie(0, i#0))
        {
            $_Frame#l0 := (lambda<alpha> $o: ref, $f: Field alpha :: 
              $o != null && read($lambdaHeap#0, $o, alloc) ==> false);
            assert $Is(LitInt(0), Tclass._System.nat());
            assume lambdaResult#0 == #_System._tuple#2._#Make2($Box(i#0), $Box(LitInt(0)));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#0, 
              Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat()));
        }

        assume false;
    }

    // End Comprehension WF check
    havoc $nw;
    assume $nw != null
       && dtype($nw)
         == Tclass._System.array?(Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat()));
    assume !read($Heap, $nw, alloc);
    assume _System.array.Length($nw)
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
    assert {:subsumption 0} (forall arrayinit#0#i0#0: int :: 
      0 <= arrayinit#0#i0#0
           && arrayinit#0#i0#0 < Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0)
         ==> Requires1(Tclass._System.nat(), 
          Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat()), 
          $Heap, 
          Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                Handle1((lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                    $Box(#_System._tuple#2._#Make2($l#0#i#0, $Box(LitInt(0))))), 
                  (lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                    $IsBox($l#0#i#0, Tclass._System.nat())), 
                  (lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
              $LS($LZ))), 
          $Box(arrayinit#0#i0#0)));
    assume (forall arrayinit#0#i0#0: int :: 
      { read($Heap, $nw, IndexField(arrayinit#0#i0#0)) } 
      0 <= arrayinit#0#i0#0
           && arrayinit#0#i0#0 < Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0)
         ==> $Unbox(read($Heap, $nw, IndexField(arrayinit#0#i0#0))): DatatypeType
           == $Unbox(Apply1(Tclass._System.nat(), 
              Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat()), 
              $Heap, 
              Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                    Handle1((lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                        $Box(#_System._tuple#2._#Make2($l#0#i#0, $Box(LitInt(0))))), 
                      (lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                        $IsBox($l#0#i#0, Tclass._System.nat())), 
                      (lambda $l#0#heap#0: Heap, $l#0#i#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0#i0#0))): DatatypeType);
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    alpha#0 := $nw;
    // ----- for-loop statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(628,3)
    i#1#lo := LitInt(0);
    ##e#10 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#10, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(n#0);
    i#1#hi := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
    assert i#1#lo <= i#1#hi;
    havoc i#1#x;
    assume i#1#lo <= i#1#x && i#1#x <= i#1#hi;
    assert $Is(i#1#x, Tclass._System.nat());
    i#1 := i#1#lo;
    $PreLoopHeap$loop#0 := $Heap;
    havoc $w$loop#0;
    while (true)
      free invariant i#1#lo <= i#1 && i#1 <= i#1#hi;
      free invariant $w$loop#0 ==> INTERNAL_le_boogie(0, i#1) ==> Power2.__default.Pow2#canCall(n#0);
      invariant $w$loop#0 ==> INTERNAL_le_boogie(0, i#1);
      invariant $w$loop#0
         ==> INTERNAL_le_boogie(i#1, Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0));
      free invariant $w$loop#0
         ==> (forall k#7: int :: 
          { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
            { $Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType } 
          INTERNAL_le_boogie(0, k#7) && INTERNAL_lt_boogie(k#7, i#1)
             ==> Power2.__default.Pow2#canCall(n#0)
               && (INTERNAL_mod_boogie(k#7, 
                    INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                   == LitInt(0)
                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType)));
      invariant $w$loop#0
         ==> (forall k#7: int :: 
          { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
            { $Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType } 
          INTERNAL_le_boogie(0, k#7) && INTERNAL_lt_boogie(k#7, i#1)
             ==> 
            INTERNAL_mod_boogie(k#7, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0))
               == LitInt(0)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(k#7), $Box(LitInt(1)))));
      free invariant $w$loop#0
         ==> (forall k#7: int :: 
          { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
            { $Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType } 
          INTERNAL_le_boogie(0, k#7) && INTERNAL_lt_boogie(k#7, i#1)
             ==> 
            INTERNAL_mod_boogie(k#7, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
               == LitInt(0)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(k#7), $Box(LitInt(1)))));
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && read(old($Heap), $o, alloc)
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o]);
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
        { read($Heap, $o, $f) } 
        $o != null && read($PreLoopHeap$loop#0, $o, alloc)
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant true;
    {
        if (!$w$loop#0)
        {
            if (INTERNAL_le_boogie(0, i#1))
            {
                ##e#11 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#11, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(n#0);
            }

            assume INTERNAL_le_boogie(0, i#1) ==> Power2.__default.Pow2#canCall(n#0);
            assume INTERNAL_le_boogie(0, i#1)
               && INTERNAL_le_boogie(i#1, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0));
            // Begin Comprehension WF check
            havoc k#6;
            if (true)
            {
                if (INTERNAL_le_boogie(0, k#6))
                {
                }

                if (INTERNAL_le_boogie(0, k#6) && INTERNAL_lt_boogie(k#6, i#1))
                {
                    ##e#12 := n#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##e#12, Tclass._System.nat(), $Heap);
                    assume Power2.__default.Pow2#canCall(n#0);
                    assert {:subsumption 0} r#0 != 0;
                    assert {:subsumption 0} INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
                       != 0;
                    if (INTERNAL_mod_boogie(k#6, 
                        INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                       == LitInt(0))
                    {
                        assert alpha#0 != null;
                        assert {:subsumption 0} 0 <= k#6 && k#6 < _System.array.Length(alpha#0);
                    }
                }
            }

            // End Comprehension WF check
            assume (forall k#7: int :: 
              { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
                { $Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType } 
              INTERNAL_le_boogie(0, k#7) && INTERNAL_lt_boogie(k#7, i#1)
                 ==> Power2.__default.Pow2#canCall(n#0)
                   && (INTERNAL_mod_boogie(k#7, 
                        INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                       == LitInt(0)
                     ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType)));
            assume (forall k#7: int :: 
              { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
                { $Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType } 
              INTERNAL_le_boogie(0, k#7) && INTERNAL_lt_boogie(k#7, i#1)
                 ==> 
                INTERNAL_mod_boogie(k#7, 
                    INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                   == LitInt(0)
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(k#7), $Box(LitInt(1)))));
            assume false;
        }

        assume true;
        if (i#1 == i#1#hi)
        {
            break;
        }

        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(632,5)
        // Begin Comprehension WF check
        havoc k#0_0;
        if (true)
        {
            if (INTERNAL_le_boogie(0, k#0_0))
            {
            }

            if (INTERNAL_le_boogie(0, k#0_0) && INTERNAL_lt_boogie(k#0_0, i#1))
            {
                ##e#0_0 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#0_0, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(n#0);
                assert {:subsumption 0} r#0 != 0;
                assert {:subsumption 0} INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
                   != 0;
                if (INTERNAL_mod_boogie(k#0_0, 
                    INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                   == LitInt(0))
                {
                    assert alpha#0 != null;
                    assert {:subsumption 0} 0 <= k#0_0 && k#0_0 < _System.array.Length(alpha#0);
                }
            }
        }

        // End Comprehension WF check
        assume (forall k#0_1: int :: 
          { #_System._tuple#2._#Make2($Box(k#0_1), $Box(1)) } 
            { $Unbox(read($Heap, alpha#0, IndexField(k#0_1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#0_1) && INTERNAL_lt_boogie(k#0_1, i#1)
             ==> Power2.__default.Pow2#canCall(n#0)
               && (INTERNAL_mod_boogie(k#0_1, 
                    INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                   == LitInt(0)
                 ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#0_1))): DatatypeType)));
        assert {:subsumption 0} (forall k#0_1: int :: 
          { #_System._tuple#2._#Make2($Box(k#0_1), $Box(1)) } 
            { $Unbox(read($Heap, alpha#0, IndexField(k#0_1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#0_1) && INTERNAL_lt_boogie(k#0_1, i#1)
             ==> 
            INTERNAL_mod_boogie(k#0_1, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0))
               == LitInt(0)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#0_1))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(k#0_1), $Box(LitInt(1)))));
        assume (forall k#0_1: int :: 
          { #_System._tuple#2._#Make2($Box(k#0_1), $Box(1)) } 
            { $Unbox(read($Heap, alpha#0, IndexField(k#0_1))): DatatypeType } 
          INTERNAL_le_boogie(0, k#0_1) && INTERNAL_lt_boogie(k#0_1, i#1)
             ==> 
            INTERNAL_mod_boogie(k#0_1, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
               == LitInt(0)
             ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#0_1))): DatatypeType, 
              #_System._tuple#2._#Make2($Box(k#0_1), $Box(LitInt(1)))));
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(633,14)
        assume true;
        // ----- init call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(633,26)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert $Is(LitInt(2), Tclass._System.nat());
        N##0_0 := LitInt(2);
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert $Is(LitInt(0), Tclass._System.nat());
        idx##0_0 := LitInt(0);
        // ProcessCallStmt: Make the call
        call $nw := Call$$Exp.IExp.mkRoU(N##0_0, idx##0_0);
        // TrCallStmt: After ProcessCallStmt
        stub#0_0 := $nw;
        defass#stub#0_0 := true;
        // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(634,16)
        assume true;
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        assert 0 <= _module.Mode.dof(read($Heap, x#0, _module.Qubits.m));
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_0;
            assume $IsGoodHeap($lambdaHeap#0_0);
            assume $Heap == $lambdaHeap#0_0 || $HeapSucc($Heap, $lambdaHeap#0_0);
            havoc _v4#0_0;
            if (INTERNAL_le_boogie(0, _v4#0_0))
            {
                $_Frame#l0_0 := (lambda<alpha> $o: ref, $f: Field alpha :: 
                  $o != null && read($lambdaHeap#0_0, $o, alloc) ==> false);
                assert defass#stub#0_0;
                assume lambdaResult#0_0 == stub#0_0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_0, Tclass.Exp.IExp());
            }

            assume false;
        }

        // End Comprehension WF check
        havoc $nw;
        assume $nw != null && dtype($nw) == Tclass._System.array?(Tclass.Exp.IExp());
        assume !read($Heap, $nw, alloc);
        assume _System.array.Length($nw)
           == _module.Mode.dof(read($Heap, x#0, _module.Qubits.m));
        assert {:subsumption 0} (forall arrayinit#0_0#i0#0: int :: 
          0 <= arrayinit#0_0#i0#0
               && arrayinit#0_0#i0#0 < _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
             ==> Requires1(Tclass._System.nat(), 
              Tclass.Exp.IExp(), 
              $Heap, 
              Lit(AtLayer((lambda $l#0_0#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0#heap#0: Heap, $l#0_0#_v4#0: Box :: $Box(stub#0_0)), 
                      (lambda $l#0_0#heap#0: Heap, $l#0_0#_v4#0: Box :: 
                        $IsBox($l#0_0#_v4#0, Tclass._System.nat())), 
                      (lambda $l#0_0#heap#0: Heap, $l#0_0#_v4#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(arrayinit#0_0#i0#0)));
        assume (forall arrayinit#0_0#i0#0: int :: 
          { read($Heap, $nw, IndexField(arrayinit#0_0#i0#0)) } 
          0 <= arrayinit#0_0#i0#0
               && arrayinit#0_0#i0#0 < _module.Mode.dof(read($Heap, x#0, _module.Qubits.m))
             ==> $Unbox(read($Heap, $nw, IndexField(arrayinit#0_0#i0#0))): ref
               == $Unbox(Apply1(Tclass._System.nat(), 
                  Tclass.Exp.IExp(), 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_0#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0#heap#0: Heap, $l#0_0#_v4#0: Box :: $Box(stub#0_0)), 
                          (lambda $l#0_0#heap#0: Heap, $l#0_0#_v4#0: Box :: 
                            $IsBox($l#0_0#_v4#0, Tclass._System.nat())), 
                          (lambda $l#0_0#heap#0: Heap, $l#0_0#_v4#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(arrayinit#0_0#i0#0))): ref);
        $Heap := update($Heap, $nw, alloc, true);
        assume $IsGoodHeap($Heap);
        assume $IsHeapAnchor($Heap);
        phases#0_0 := $nw;
        // ----- for-loop statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(635,5)
        j#0_0#lo := LitInt(0);
        assert x#0 != null;
        assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
        j#0_0#hi := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m));
        assert j#0_0#lo <= j#0_0#hi;
        havoc j#0_0#x;
        assume j#0_0#lo <= j#0_0#x && j#0_0#x <= j#0_0#hi;
        assert $Is(j#0_0#x, Tclass._System.nat());
        j#0_0 := j#0_0#lo;
        $PreLoopHeap$loop#0_0 := $Heap;
        preLoop$loop#0_0$defass#stub#0_0 := defass#stub#0_0;
        havoc $w$loop#0_0;
        while (true)
          free invariant j#0_0#lo <= j#0_0 && j#0_0 <= j#0_0#hi;
          free invariant $w$loop#0_0
             ==> (forall k#0_3: int :: 
              { #_System._tuple#2._#Make2($Box(k#0_3), $Box(1)) } 
                { $Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType } 
              INTERNAL_le_boogie(0, k#0_3) && INTERNAL_lt_boogie(k#0_3, i#1)
                 ==> Power2.__default.Pow2#canCall(n#0)
                   && (INTERNAL_mod_boogie(k#0_3, 
                        INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                       == LitInt(0)
                     ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType)));
          invariant $w$loop#0_0
             ==> (forall k#0_3: int :: 
              { #_System._tuple#2._#Make2($Box(k#0_3), $Box(1)) } 
                { $Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType } 
              INTERNAL_le_boogie(0, k#0_3) && INTERNAL_lt_boogie(k#0_3, i#1)
                 ==> 
                INTERNAL_mod_boogie(k#0_3, 
                    INTERNAL_div_boogie(Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0), r#0))
                   == LitInt(0)
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(k#0_3), $Box(LitInt(1)))));
          free invariant $w$loop#0_0
             ==> (forall k#0_3: int :: 
              { #_System._tuple#2._#Make2($Box(k#0_3), $Box(1)) } 
                { $Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType } 
              INTERNAL_le_boogie(0, k#0_3) && INTERNAL_lt_boogie(k#0_3, i#1)
                 ==> 
                INTERNAL_mod_boogie(k#0_3, 
                    INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                   == LitInt(0)
                 ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType, 
                  #_System._tuple#2._#Make2($Box(k#0_3), $Box(LitInt(1)))));
          free invariant $w$loop#0_0
             ==> (forall k#0_5: int :: 
              { $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref } 
              INTERNAL_le_boogie(0, k#0_5) && INTERNAL_lt_boogie(k#0_5, j#0_0)
                 ==> 
                Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                 ==> Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                   && Power2.__default.Pow2#canCall(n#0));
          invariant $w$loop#0_0
             ==> (forall k#0_5: int :: 
              { $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref } 
              INTERNAL_le_boogie(0, k#0_5) && INTERNAL_lt_boogie(k#0_5, j#0_0)
                 ==> Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                   && Exp.ExpMode.N(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0));
          free invariant $w$loop#0_0
             ==> (forall k#0_5: int :: 
              { $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref } 
              INTERNAL_le_boogie(0, k#0_5) && INTERNAL_lt_boogie(k#0_5, j#0_0)
                 ==> Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                   && Exp.ExpMode.N(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                     == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0));
          free invariant (forall $o: ref :: 
            { $Heap[$o] } 
            $o != null && read(old($Heap), $o, alloc)
               ==> $Heap[$o] == $PreLoopHeap$loop#0_0[$o]);
          free invariant $HeapSucc($PreLoopHeap$loop#0_0, $Heap);
          free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
            { read($Heap, $o, $f) } 
            $o != null && read($PreLoopHeap$loop#0_0, $o, alloc)
               ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0_0, $o, $f) || $_Frame[$o, $f]);
          free invariant preLoop$loop#0_0$defass#stub#0_0 ==> defass#stub#0_0;
          free invariant true;
        {
            if (!$w$loop#0_0)
            {
                // Begin Comprehension WF check
                havoc k#0_2;
                if (true)
                {
                    if (INTERNAL_le_boogie(0, k#0_2))
                    {
                    }

                    if (INTERNAL_le_boogie(0, k#0_2) && INTERNAL_lt_boogie(k#0_2, i#1))
                    {
                        ##e#0_1 := n#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##e#0_1, Tclass._System.nat(), $Heap);
                        assume Power2.__default.Pow2#canCall(n#0);
                        assert {:subsumption 0} r#0 != 0;
                        assert {:subsumption 0} INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
                           != 0;
                        if (INTERNAL_mod_boogie(k#0_2, 
                            INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                           == LitInt(0))
                        {
                            assert alpha#0 != null;
                            assert {:subsumption 0} 0 <= k#0_2 && k#0_2 < _System.array.Length(alpha#0);
                        }
                    }
                }

                // End Comprehension WF check
                assume (forall k#0_3: int :: 
                  { #_System._tuple#2._#Make2($Box(k#0_3), $Box(1)) } 
                    { $Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType } 
                  INTERNAL_le_boogie(0, k#0_3) && INTERNAL_lt_boogie(k#0_3, i#1)
                     ==> Power2.__default.Pow2#canCall(n#0)
                       && (INTERNAL_mod_boogie(k#0_3, 
                            INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                           == LitInt(0)
                         ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType)));
                assume (forall k#0_3: int :: 
                  { #_System._tuple#2._#Make2($Box(k#0_3), $Box(1)) } 
                    { $Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType } 
                  INTERNAL_le_boogie(0, k#0_3) && INTERNAL_lt_boogie(k#0_3, i#1)
                     ==> 
                    INTERNAL_mod_boogie(k#0_3, 
                        INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                       == LitInt(0)
                     ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType, 
                      #_System._tuple#2._#Make2($Box(k#0_3), $Box(LitInt(1)))));
                // Begin Comprehension WF check
                havoc k#0_4;
                if (true)
                {
                    if (INTERNAL_le_boogie(0, k#0_4))
                    {
                    }

                    if (INTERNAL_le_boogie(0, k#0_4) && INTERNAL_lt_boogie(k#0_4, j#0_0))
                    {
                        assert phases#0_0 != null;
                        assert {:subsumption 0} 0 <= k#0_4 && k#0_4 < _System.array.Length(phases#0_0);
                        assert {:subsumption 0} $Unbox(read($Heap, phases#0_0, IndexField(k#0_4))): ref != null;
                        if (Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_4))): ref, Exp.IExp.value)))
                        {
                            assert phases#0_0 != null;
                            assert {:subsumption 0} 0 <= k#0_4 && k#0_4 < _System.array.Length(phases#0_0);
                            assert {:subsumption 0} $Unbox(read($Heap, phases#0_0, IndexField(k#0_4))): ref != null;
                            assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_4))): ref, Exp.IExp.value));
                            ##e#0_2 := n#0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##e#0_2, Tclass._System.nat(), $Heap);
                            assume Power2.__default.Pow2#canCall(n#0);
                        }
                    }
                }

                // End Comprehension WF check
                assume (forall k#0_5: int :: 
                  { $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref } 
                  INTERNAL_le_boogie(0, k#0_5) && INTERNAL_lt_boogie(k#0_5, j#0_0)
                     ==> 
                    Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                     ==> Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                       && Power2.__default.Pow2#canCall(n#0));
                assume (forall k#0_5: int :: 
                  { $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref } 
                  INTERNAL_le_boogie(0, k#0_5) && INTERNAL_lt_boogie(k#0_5, j#0_0)
                     ==> Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                       && Exp.ExpMode.N(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0));
                assume false;
            }

            assume true;
            if (j#0_0 == j#0_0#hi)
            {
                break;
            }

            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(640,26)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            x##0_0_0 := i#1;
            assert x#0 != null;
            assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
            assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
            assert 0 <= j#0_0
               && j#0_0 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(j#0_0))): DatatypeType);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(j#0_0))): DatatypeType);
            // ProcessCallStmt: CheckSubrange
            y##0_0_0 := $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(j#0_0))): DatatypeType)): int;
            // ProcessCallStmt: Make the call
            call Call$$Mul.__default.LemmaMulNonnegative(x##0_0_0, y##0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(641,22)
            assume true;
            assert x#0 != null;
            assert _module.Mode.CH_q(read($Heap, x#0, _module.Qubits.m));
            assert _module.Mode.c(read($Heap, x#0, _module.Qubits.m)) != null;
            assert 0 <= j#0_0
               && j#0_0 < _System.array.Length(_module.Mode.c(read($Heap, x#0, _module.Qubits.m)));
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(j#0_0))): DatatypeType);
            assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(j#0_0))): DatatypeType);
            assert $Is(INTERNAL_mul_boogie(i#1, 
                $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(j#0_0))): DatatypeType)): int), 
              Tclass._System.nat());
            prod#0_0_0 := INTERNAL_mul_boogie(i#1, 
              $Unbox(_System.Tuple2._0($Unbox(read($Heap, _module.Mode.c(read($Heap, x#0, _module.Qubits.m)), IndexField(j#0_0))): DatatypeType)): int);
            // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(642,17)
            assert phases#0_0 != null;
            assert 0 <= j#0_0 && j#0_0 < _System.array.Length(phases#0_0);
            assume true;
            assert $_Frame[phases#0_0, IndexField(j#0_0)];
            // ----- init call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(642,29)
            // TrCallStmt: Before ProcessCallStmt
            ##e#0_0_0 := n#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_0_0, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(n#0);
            assume Power2.__default.Pow2#canCall(n#0);
            // ProcessCallStmt: CheckSubrange
            N##0_0_0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            idx##0_0_0 := prod#0_0_0;
            // ProcessCallStmt: Make the call
            call $nw := Call$$Exp.IExp.mkRoU(N##0_0_0, idx##0_0_0);
            // TrCallStmt: After ProcessCallStmt
            $rhs#0_0_0 := $nw;
            $Heap := update($Heap, phases#0_0, IndexField(j#0_0), $Box($rhs#0_0_0));
            assume $IsGoodHeap($Heap);
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(643,7)
            assert phases#0_0 != null;
            assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(phases#0_0);
            assert {:subsumption 0} $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref != null;
            assume true;
            assert Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
            // ----- calc statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
            // Assume Fuel Constant
            if (*)
            {
                // ----- assert wf[initial] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                assert phases#0_0 != null;
                assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(phases#0_0);
                assert {:subsumption 0} $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref != null;
                assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
                assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                assume phases#0_0 != null;
                assume {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(phases#0_0);
                assume {:subsumption 0} $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref != null;
                assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
                assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
                // ----- Hint0 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                assert g#0 != null;
                assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ----- assert line0 == line1 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                assert {:subsumption 0} Exp.ExpMode.idx(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value))
                   == INTERNAL_mul_boogie(i#1, 
                    INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(j#0_0))): int, r#0)));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                assume g#0 != null;
                assume {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ----- Hint1 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(647,37)
                // TrCallStmt: Before ProcessCallStmt
                // ProcessCallStmt: Make the call
                call Call$$Mul.__default.LemmaMulIsDistributiveAuto();
                // TrCallStmt: After ProcessCallStmt
                // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                assert g#0 != null;
                assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ----- assert line1 == line2 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(644,7)
                assert {:subsumption 0} INTERNAL_mul_boogie(i#1, 
                    INTERNAL_add_boogie(x0#0, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(j#0_0))): int, r#0)))
                   == INTERNAL_add_boogie(INTERNAL_mul_boogie(i#1, x0#0), 
                    INTERNAL_mul_boogie(i#1, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(j#0_0))): int, r#0)));
                assume false;
            }

            assume Exp.ExpMode.idx(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value))
               == INTERNAL_add_boogie(INTERNAL_mul_boogie(i#1, x0#0), 
                INTERNAL_mul_boogie(i#1, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(j#0_0))): int, r#0)));
            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(653,30)
            // TrCallStmt: Before ProcessCallStmt
            // ProcessCallStmt: Make the call
            call Call$$Mul.__default.LemmaMulNonnegativeAuto();
            // TrCallStmt: After ProcessCallStmt
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(654,7)
            assert g#0 != null;
            assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
            assume true;
            assert INTERNAL_ge_boogie(INTERNAL_add_boogie(INTERNAL_mul_boogie(i#1, x0#0), 
                INTERNAL_mul_boogie(i#1, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(j#0_0))): int, r#0))), 
              INTERNAL_mul_boogie(i#1, x0#0));
            // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(655,20)
            // TrCallStmt: Before ProcessCallStmt
            assert phases#0_0 != null;
            assert 0 <= j#0_0 && j#0_0 < _System.array.Length(phases#0_0);
            assume true;
            assert $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref != null;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert $Is(INTERNAL_mul_boogie(i#1, x0#0), Tclass._System.nat());
            idx##0_0_1 := INTERNAL_mul_boogie(i#1, x0#0);
            assert (forall<alpha> $o: ref, $f: Field alpha :: 
              $o != null
                   && read($Heap, $o, alloc)
                   && read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.Repr)[$Box($o)]
                 ==> $_Frame[$o, $f]);
            // ProcessCallStmt: Make the call
            call Call$$Exp.IExp.Div($Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, idx##0_0_1);
            // TrCallStmt: After ProcessCallStmt
            // ----- calc statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
            // Assume Fuel Constant
            if (*)
            {
                // ----- assert wf[initial] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assert phases#0_0 != null;
                assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(phases#0_0);
                assert {:subsumption 0} $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref != null;
                assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
                assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assume phases#0_0 != null;
                assume {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(phases#0_0);
                assume {:subsumption 0} $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref != null;
                assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
                assume Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value));
                // ----- Hint0 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assert g#0 != null;
                assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ----- assert line0 == line1 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assert {:subsumption 0} Exp.ExpMode.idx(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value))
                   == INTERNAL_mul_boogie(i#1, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(j#0_0))): int, r#0));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assume g#0 != null;
                assume {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ----- Hint1 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(659,32)
                // TrCallStmt: Before ProcessCallStmt
                assert g#0 != null;
                assert 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                x##0_0_1_1_0 := $Unbox(read($Heap, g#0, IndexField(j#0_0))): int;
                assume true;
                // ProcessCallStmt: CheckSubrange
                y##0_0_1_1_0 := r#0;
                // ProcessCallStmt: Make the call
                call Call$$Mul.__default.LemmaMulIsCommutative(x##0_0_1_1_0, y##0_0_1_1_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assert g#0 != null;
                assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ----- assert line1 == line2 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assert {:subsumption 0} INTERNAL_mul_boogie(i#1, INTERNAL_mul_boogie($Unbox(read($Heap, g#0, IndexField(j#0_0))): int, r#0))
                   == INTERNAL_mul_boogie(i#1, INTERNAL_mul_boogie(r#0, $Unbox(read($Heap, g#0, IndexField(j#0_0))): int));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assume g#0 != null;
                assume {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ----- Hint2 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(661,32)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                x##0_0_1_0_0 := i#1;
                assume true;
                // ProcessCallStmt: CheckSubrange
                y##0_0_1_0_0 := r#0;
                assert g#0 != null;
                assert 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                z##0_0_1_0_0 := $Unbox(read($Heap, g#0, IndexField(j#0_0))): int;
                // ProcessCallStmt: Make the call
                call Call$$Mul.__default.LemmaMulIsAssociative(x##0_0_1_0_0, y##0_0_1_0_0, z##0_0_1_0_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- assert wf[rhs] ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assert g#0 != null;
                assert {:subsumption 0} 0 <= j#0_0 && j#0_0 < _System.array.Length(g#0);
                assume true;
                // ----- assert line2 == line3 ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(656,7)
                assert {:subsumption 0} INTERNAL_mul_boogie(i#1, INTERNAL_mul_boogie(r#0, $Unbox(read($Heap, g#0, IndexField(j#0_0))): int))
                   == INTERNAL_mul_boogie(INTERNAL_mul_boogie(i#1, r#0), $Unbox(read($Heap, g#0, IndexField(j#0_0))): int);
                assume false;
            }

            assume Exp.ExpMode.idx(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(j#0_0))): ref, Exp.IExp.value))
               == INTERNAL_mul_boogie(INTERNAL_mul_boogie(i#1, r#0), $Unbox(read($Heap, g#0, IndexField(j#0_0))): int);
            j#0_0 := j#0_0 + 1;
            assume (forall k#0_3: int :: 
                { #_System._tuple#2._#Make2($Box(k#0_3), $Box(1)) } 
                  { $Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType } 
                INTERNAL_le_boogie(0, k#0_3) && INTERNAL_lt_boogie(k#0_3, i#1)
                   ==> Power2.__default.Pow2#canCall(n#0)
                     && (INTERNAL_mod_boogie(k#0_3, 
                          INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                         == LitInt(0)
                       ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType)))
               && ((forall k#0_3: int :: 
                  { #_System._tuple#2._#Make2($Box(k#0_3), $Box(1)) } 
                    { $Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType } 
                  INTERNAL_le_boogie(0, k#0_3) && INTERNAL_lt_boogie(k#0_3, i#1)
                     ==> 
                    INTERNAL_mod_boogie(k#0_3, 
                        INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                       == LitInt(0)
                     ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(k#0_3))): DatatypeType, 
                      #_System._tuple#2._#Make2($Box(k#0_3), $Box(LitInt(1)))))
                 ==> (forall k#0_5: int :: 
                  { $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref } 
                  INTERNAL_le_boogie(0, k#0_5) && INTERNAL_lt_boogie(k#0_5, j#0_0)
                     ==> 
                    Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                     ==> Exp.ExpMode.RoU_q(read($Heap, $Unbox(read($Heap, phases#0_0, IndexField(k#0_5))): ref, Exp.IExp.value))
                       && Power2.__default.Pow2#canCall(n#0)));
        }

        // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(666,26)
        // TrCallStmt: Before ProcessCallStmt
        ##e#0_3 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0_3, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(n#0);
        assume Power2.__default.Pow2#canCall(n#0);
        // ProcessCallStmt: CheckSubrange
        x##0_0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        y##0_0 := r#0;
        // ProcessCallStmt: Make the call
        call Call$$_module.__default.LemmaDividedDivGtZero(x##0_0, y##0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- if statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(667,5)
        ##e#0_4 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0_4, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(n#0);
        assert r#0 != 0;
        assert INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
           != 0;
        assume Power2.__default.Pow2#canCall(n#0);
        if (INTERNAL_mod_boogie(i#1, 
            INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
           == LitInt(0))
        {
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(668,7)
            ##e#0_1_0 := n#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_1_0, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(n#0);
            assert {:subsumption 0} Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0) != 0;
            assume Power2.__default.Pow2#canCall(n#0);
            if (*)
            {
                // ----- assert statement proof ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(668,7)
                // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(668,58)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                x##0_1_0_0 := i#1;
                ##e#0_1_0_0 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##e#0_1_0_0, Tclass._System.nat(), $Heap);
                assume Power2.__default.Pow2#canCall(n#0);
                assume Power2.__default.Pow2#canCall(n#0);
                // ProcessCallStmt: CheckSubrange
                y##0_1_0_0 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                z##0_1_0_0 := r#0;
                // ProcessCallStmt: Make the call
                call Call$$_module.__default.LemmaDivModAux(x##0_1_0_0, y##0_1_0_0, z##0_1_0_0);
                // TrCallStmt: After ProcessCallStmt
                assert {:subsumption 0} INTERNAL_mod_boogie(INTERNAL_mul_boogie(i#1, r#0), 
                    Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, n#0))
                   == LitInt(0);
                assume false;
            }

            assume INTERNAL_mod_boogie(INTERNAL_mul_boogie(i#1, r#0), 
                Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0))
               == LitInt(0);
            // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(669,16)
            assert alpha#0 != null;
            assert 0 <= i#1 && i#1 < _System.array.Length(alpha#0);
            assume true;
            assert $_Frame[alpha#0, IndexField(i#1)];
            assume true;
            assert $Is(#_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(1))), 
              Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat()));
            $rhs#0_1_0 := #_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(1)));
            $Heap := update($Heap, alpha#0, IndexField(i#1), $Box($rhs#0_1_0));
            assume $IsGoodHeap($Heap);
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(670,7)
            ##e#0_1_1 := n#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_1_1, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(n#0);
            assert {:subsumption 0} r#0 != 0;
            assert {:subsumption 0} INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
               != 0;
            if (INTERNAL_mod_boogie(i#1, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
               == LitInt(0))
            {
                assert alpha#0 != null;
                assert {:subsumption 0} 0 <= i#1 && i#1 < _System.array.Length(alpha#0);
                assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType);
            }

            assume Power2.__default.Pow2#canCall(n#0)
               && (INTERNAL_mod_boogie(i#1, 
                    INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                   == LitInt(0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType));
            assert {:subsumption 0} INTERNAL_mod_boogie(i#1, 
                  INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                 == LitInt(0)
               ==> $Unbox(_System.Tuple2._1($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType)): int
                 == LitInt(1);
            assume INTERNAL_mod_boogie(i#1, 
                  INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                 == LitInt(0)
               ==> $Unbox(_System.Tuple2._1($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType)): int
                 == LitInt(1);
        }
        else
        {
            // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(672,16)
            assert alpha#0 != null;
            assert 0 <= i#1 && i#1 < _System.array.Length(alpha#0);
            assume true;
            assert $_Frame[alpha#0, IndexField(i#1)];
            assume true;
            assert $Is(#_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(0))), 
              Tclass._System.Tuple2(Tclass._System.nat(), Tclass._System.nat()));
            $rhs#0_2_0 := #_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(0)));
            $Heap := update($Heap, alpha#0, IndexField(i#1), $Box($rhs#0_2_0));
            assume $IsGoodHeap($Heap);
            // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(673,7)
            ##e#0_2_0 := n#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##e#0_2_0, Tclass._System.nat(), $Heap);
            assume Power2.__default.Pow2#canCall(n#0);
            assert {:subsumption 0} r#0 != 0;
            assert {:subsumption 0} INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
               != 0;
            if (INTERNAL_mod_boogie(i#1, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
               == LitInt(0))
            {
                assert alpha#0 != null;
                assert {:subsumption 0} 0 <= i#1 && i#1 < _System.array.Length(alpha#0);
                assume _System.Tuple2.___hMake2_q($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType);
            }

            assume Power2.__default.Pow2#canCall(n#0)
               && (INTERNAL_mod_boogie(i#1, 
                    INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                   == LitInt(0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType));
            assert {:subsumption 0} INTERNAL_mod_boogie(i#1, 
                  INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                 == LitInt(0)
               ==> $Unbox(_System.Tuple2._1($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType)): int
                 == LitInt(1);
            assume INTERNAL_mod_boogie(i#1, 
                  INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                 == LitInt(0)
               ==> $Unbox(_System.Tuple2._1($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType)): int
                 == LitInt(1);
        }

        // ----- assert statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(676,5)
        ##e#0_5 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#0_5, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(n#0);
        assert {:subsumption 0} r#0 != 0;
        assert {:subsumption 0} INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0)
           != 0;
        if (INTERNAL_mod_boogie(i#1, 
            INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
           == LitInt(0))
        {
            assert alpha#0 != null;
            assert {:subsumption 0} 0 <= i#1 && i#1 < _System.array.Length(alpha#0);
        }

        assume Power2.__default.Pow2#canCall(n#0)
           && (INTERNAL_mod_boogie(i#1, 
                INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
               == LitInt(0)
             ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType));
        assert {:subsumption 0} INTERNAL_mod_boogie(i#1, 
              INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
             == LitInt(0)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(1))));
        assume INTERNAL_mod_boogie(i#1, 
              INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
             == LitInt(0)
           ==> _System.Tuple2#Equal($Unbox(read($Heap, alpha#0, IndexField(i#1))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(i#1), $Box(LitInt(1))));
        i#1 := i#1 + 1;
        assume (INTERNAL_le_boogie(0, i#1) ==> Power2.__default.Pow2#canCall(n#0))
           && (INTERNAL_le_boogie(0, i#1)
               && INTERNAL_le_boogie(i#1, Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0))
             ==> (forall k#7: int :: 
              { #_System._tuple#2._#Make2($Box(k#7), $Box(1)) } 
                { $Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType } 
              INTERNAL_le_boogie(0, k#7) && INTERNAL_lt_boogie(k#7, i#1)
                 ==> Power2.__default.Pow2#canCall(n#0)
                   && (INTERNAL_mod_boogie(k#7, 
                        INTERNAL_div_boogie(Power2.__default.Pow2(StartFuel_Power2._default.Pow2, n#0), r#0))
                       == LitInt(0)
                     ==> $IsA#_System.Tuple2($Unbox(read($Heap, alpha#0, IndexField(k#7))): DatatypeType))));
    }
}



procedure CheckWellformed$$_module.__default.LemmaDividedDivGtZero(x#0: int where INTERNAL_le_boogie(0, x#0), 
    y#0: int where INTERNAL_le_boogie(0, y#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.LemmaDividedDivGtZero(x#0: int, y#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: LemmaDividedDivGtZero, CheckWellformed$$_module.__default.LemmaDividedDivGtZero
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_gt_boogie(y#0, 0);
    assume INTERNAL_gt_boogie(x#0, 0);
    assert y#0 != 0;
    assume INTERNAL_mod_boogie(x#0, y#0) == LitInt(0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    assert y#0 != 0;
    assume INTERNAL_gt_boogie(INTERNAL_div_boogie(x#0, y#0), 0);
}



procedure Call$$_module.__default.LemmaDividedDivGtZero(x#0: int where INTERNAL_le_boogie(0, x#0), 
    y#0: int where INTERNAL_le_boogie(0, y#0));
  // user-defined preconditions
  requires INTERNAL_gt_boogie(y#0, 0);
  requires INTERNAL_gt_boogie(x#0, 0);
  requires INTERNAL_mod_boogie(x#0, y#0) == LitInt(0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures INTERNAL_gt_boogie(INTERNAL_div_boogie(x#0, y#0), 0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure CheckWellformed$$_module.__default.LemmaDivModAux(x#0: int where INTERNAL_le_boogie(0, x#0), 
    y#0: int where INTERNAL_le_boogie(0, y#0), 
    z#0: int where INTERNAL_le_boogie(0, z#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.LemmaDivModAux(x#0: int, y#0: int, z#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: LemmaDivModAux, CheckWellformed$$_module.__default.LemmaDivModAux
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume INTERNAL_gt_boogie(y#0, 0);
    assume INTERNAL_gt_boogie(z#0, 0);
    assert z#0 != 0;
    assume INTERNAL_mod_boogie(y#0, z#0) == LitInt(0);
    assert z#0 != 0;
    assume INTERNAL_gt_boogie(INTERNAL_div_boogie(y#0, z#0), 0);
    assert z#0 != 0;
    assert INTERNAL_div_boogie(y#0, z#0) != 0;
    assume INTERNAL_mod_boogie(x#0, INTERNAL_div_boogie(y#0, z#0)) == LitInt(0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    assert y#0 != 0;
    assume INTERNAL_mod_boogie(INTERNAL_mul_boogie(x#0, z#0), y#0) == LitInt(0);
}



procedure Call$$_module.__default.LemmaDivModAux(x#0: int where INTERNAL_le_boogie(0, x#0), 
    y#0: int where INTERNAL_le_boogie(0, y#0), 
    z#0: int where INTERNAL_le_boogie(0, z#0));
  // user-defined preconditions
  requires INTERNAL_gt_boogie(y#0, 0);
  requires INTERNAL_gt_boogie(z#0, 0);
  requires INTERNAL_mod_boogie(y#0, z#0) == LitInt(0);
  requires INTERNAL_gt_boogie(INTERNAL_div_boogie(y#0, z#0), 0);
  requires INTERNAL_mod_boogie(x#0, INTERNAL_div_boogie(y#0, z#0)) == LitInt(0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures INTERNAL_mod_boogie(INTERNAL_mul_boogie(x#0, z#0), y#0) == LitInt(0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure CheckWellformed$$_module.__default.Shor(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap))
   returns (x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.__default.Shor(a#0: int, N#0: int, n#0: int, x#0: ref, y#0: ref) returns (x'#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var i#0: int;
  var i#2: int;
  var ##e#0: int;
  var ##e#1: int;
  var ##e#2: int;
  var k#0: int;
  var ##e#3: int;
  var k#2: int;
  var ##e#4: int;
  var ##b#0: int;
  var ##e#5: int;

    // AddMethodImpl: Shor, CheckWellformed$$_module.__default.Shor
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == x#0
           || $o == y#0
           || $o == _module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
    assume INTERNAL_ge_boogie(N#0, 2);
    assume x#0 != y#0;
    assert x#0 != null;
    assert y#0 != null;
    assume !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
    assert x#0 != null;
    if (n#0 == read($Heap, x#0, _module.Qubits.card))
    {
        assert x#0 != null;
        assert y#0 != null;
    }

    if (n#0 == read($Heap, x#0, _module.Qubits.card)
       && read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card))
    {
        assert y#0 != null;
    }

    assume n#0 == read($Heap, x#0, _module.Qubits.card)
       && read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card)
       && INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
    assert x#0 != null;
    assume _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
    assert y#0 != null;
    assume _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
    assert x#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x#0);
    assume _module.Qubits.Wf($Heap, x#0);
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    // Begin Comprehension WF check
    havoc i#0;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#0))
        {
        }

        if (INTERNAL_le_boogie(0, i#0) && INTERNAL_lt_boogie(i#0, n#0))
        {
            assert x#0 != null;
            assert _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, x#0, _module.Qubits.m)) != null;
            assert 0 <= i#0
               && i#0 < _System.array.Length(_module.Mode.b(read($Heap, x#0, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume (forall i#1: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
      INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
           == LitInt(0));
    // Begin Comprehension WF check
    havoc i#2;
    if (true)
    {
        if (INTERNAL_le_boogie(0, i#2))
        {
        }

        if (INTERNAL_le_boogie(0, i#2) && INTERNAL_lt_boogie(i#2, n#0))
        {
            assert y#0 != null;
            assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
            assert _module.Mode.b(read($Heap, y#0, _module.Qubits.m)) != null;
            assert 0 <= i#2
               && i#2 < _System.array.Length(_module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
        }
    }

    // End Comprehension WF check
    assume (forall i#3: int :: 
      { $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int } 
      INTERNAL_le_boogie(0, i#3) && INTERNAL_lt_boogie(i#3, n#0)
         ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int
           == LitInt(0));
    assert y#0 != null;
    assert _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && read(old($Heap), $o, alloc)
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == x#0
           || $o == y#0
           || $o == _module.Mode.b(read(old($Heap), y#0, _module.Qubits.m)));
    assume $HeapSucc(old($Heap), $Heap);
    havoc x'#0;
    assume x'#0 != null && !read(old($Heap), x'#0, alloc);
    assert x'#0 != null;
    assume _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert y#0 != null;
    assume _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    assert x'#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(x'#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, x'#0);
    assume _module.Qubits.Wf($Heap, x'#0);
    assert y#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAlloc(y#0, Tclass._module.Qubits?(), $Heap);
    assume _module.Qubits.Wf#canCall($Heap, y#0);
    assume _module.Qubits.Wf($Heap, y#0);
    assert x'#0 != null;
    assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
    assert x'#0 != null;
    ##e#0 := read($Heap, x'#0, _module.Qubits.card);
    // assume allocatedness for argument to function
    assume $IsAlloc(##e#0, Tclass._System.nat(), $Heap);
    assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
    if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
       == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
    {
        assert x'#0 != null;
        ##e#1 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#1, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
    }

    if (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)))
    {
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert y#0 != null;
        ##e#2 := read($Heap, y#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#2, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card));
    }

    assume _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       && Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
         == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
       && _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
    havoc k#0;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#0);
        assert x'#0 != null;
        ##e#3 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#3, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assume INTERNAL_lt_boogie(k#0, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)));
        assert x'#0 != null;
        assert _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)) != null;
        assert 0 <= k#0
           && k#0 < _System.array.Length(_module.Mode.c(read($Heap, x'#0, _module.Qubits.m)));
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(k#0), $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#0)
             && INTERNAL_lt_boogie(k#0, 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#0))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(k#0), $Box(LitInt(1))));
    }

    assume (forall k#1: int :: 
      { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
      INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))));
    havoc k#2;
    assume true;
    if (*)
    {
        assume INTERNAL_le_boogie(0, k#2);
        assert x'#0 != null;
        ##e#4 := read($Heap, x'#0, _module.Qubits.card);
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#4, Tclass._System.nat(), $Heap);
        assume Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card));
        assume INTERNAL_lt_boogie(k#2, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)));
        assert y#0 != null;
        assert _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
        assert _module.Mode.c(read($Heap, y#0, _module.Qubits.m)) != null;
        assert 0 <= k#2
           && k#2 < _System.array.Length(_module.Mode.c(read($Heap, y#0, _module.Qubits.m)));
        ##b#0 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#0, TInt, $Heap);
        assert $Is(k#2, Tclass._System.nat());
        ##e#5 := k#2;
        // assume allocatedness for argument to function
        assume $IsAlloc(##e#5, Tclass._System.nat(), $Heap);
        assume Power.__default.Pow#canCall(a#0, k#2);
        assert N#0 != 0;
        assume _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#2), N#0)), 
            $Box(LitInt(1))));
    }
    else
    {
        assume INTERNAL_le_boogie(0, k#2)
             && INTERNAL_lt_boogie(k#2, 
              Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
           ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#2))): DatatypeType, 
            #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#2), N#0)), 
              $Box(LitInt(1))));
    }

    assume (forall k#3: int :: 
      { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3) } 
        { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
      INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
          #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3), N#0)), 
            $Box(LitInt(1)))));
}



procedure Call$$_module.__default.Shor(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap))
   returns (x'#0: ref
       where $Is(x'#0, Tclass._module.Qubits())
         && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap));
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires x#0 != y#0;
  requires !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
  requires n#0 == read($Heap, x#0, _module.Qubits.card);
  requires read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var b#0 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(b#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var h#0 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#0) == read($Heap, x#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, tmp#0))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, _System.array.Length(c#0)))));
  requires _module.Qubits.Wf#canCall($Heap, x#0)
     ==> _module.Qubits.Wf($Heap, x#0)
       || (var tmp#0 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           ==> (var c#0 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#0 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#0, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#2 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#2) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#2 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#2) == read($Heap, y#0, _module.Qubits.card)));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, tmp#1))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, _System.array.Length(c#2)))));
  requires _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#1 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#2 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#2 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#2, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  requires (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(0));
  requires (forall i#3: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int } 
    INTERNAL_le_boogie(0, i#3) && INTERNAL_lt_boogie(i#3, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int
         == LitInt(0));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures x'#0 != null && !read(old($Heap), x'#0, alloc);
  free ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
     ==> 
    _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x'#0)
       && (_module.Qubits.Wf($Heap, x'#0) ==> _module.Qubits.Wf#canCall($Heap, y#0));
  ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  ensures _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  free ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     && 
    _module.Qubits.Wf($Heap, x'#0)
     && (var tmp#2 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
         then (var b#5 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
          _System.array.Length(b#5) == read($Heap, x'#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           then (var h#5 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#5) == read($Heap, x'#0, _module.Qubits.card))
           else (var c#5 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#5 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#5, tmp#2)
                 && INTERNAL_le_boogie(dof#5, _System.array.Length(c#5))
                 && INTERNAL_le_boogie(dof#5, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))))));
  free ensures _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#3 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#7 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#7) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#7 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#7) == read($Heap, y#0, _module.Qubits.card))
           else (var c#7 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#7 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#7, tmp#3)
                 && INTERNAL_le_boogie(dof#7, _System.array.Length(c#7))
                 && INTERNAL_le_boogie(dof#7, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  free ensures Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
     && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
         && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
             == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
           ==> Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card))));
  ensures _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
  ensures Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
     == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
  free ensures (forall k#1: int :: 
    { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#1)
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
       && (INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)));
  free ensures (forall k#1: int :: 
    { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))));
  free ensures (forall k#3: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#3)
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
       && (INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)
           && Power.__default.Pow#canCall(a#0, k#3)));
  free ensures (forall k#3: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, 
          Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3), N#0)), 
          $Box(LitInt(1)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == x#0
         || $o == y#0
         || $o == _module.Mode.b(read(old($Heap), y#0, _module.Qubits.m)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.__default.Shor(a#0: int where INTERNAL_le_boogie(0, a#0), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    n#0: int where INTERNAL_le_boogie(0, n#0), 
    x#0: ref
       where $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap), 
    y#0: ref
       where $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap))
   returns (defass#x'#0: bool, 
    x'#0: ref
       where defass#x'#0
         ==> $Is(x'#0, Tclass._module.Qubits())
           && $IsAlloc(x'#0, Tclass._module.Qubits(), $Heap), 
    $_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 2);
  requires x#0 != y#0;
  requires !_module.Mode#Equal(read($Heap, x#0, _module.Qubits.m), read($Heap, y#0, _module.Qubits.m));
  requires n#0 == read($Heap, x#0, _module.Qubits.card);
  requires read($Heap, x#0, _module.Qubits.card) == read($Heap, y#0, _module.Qubits.card);
  requires INTERNAL_gt_boogie(read($Heap, y#0, _module.Qubits.card), 0);
  requires _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m));
  requires _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m));
  free requires _module.Qubits.Wf#canCall($Heap, x#0)
     && 
    _module.Qubits.Wf($Heap, x#0)
     && (var tmp#4 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, x#0, _module.Qubits.m))
         then (var b#9 := _module.Mode.b(read($Heap, x#0, _module.Qubits.m)); 
          _System.array.Length(b#9) == read($Heap, x#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, x#0, _module.Qubits.m))
           then (var h#9 := _module.Mode.h(read($Heap, x#0, _module.Qubits.m)); 
            _System.array.Length(h#9) == read($Heap, x#0, _module.Qubits.card))
           else (var c#9 := _module.Mode.c(read($Heap, x#0, _module.Qubits.m)); 
            (var dof#9 := _module.Mode.dof(read($Heap, x#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#9, tmp#4)
                 && INTERNAL_le_boogie(dof#9, _System.array.Length(c#9))
                 && INTERNAL_le_boogie(dof#9, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x#0, _module.Qubits.card))))))));
  free requires _module.Qubits.Wf#canCall($Heap, y#0)
     && 
    _module.Qubits.Wf($Heap, y#0)
     && (var tmp#5 := Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
      (if _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
         then (var b#11 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
          _System.array.Length(b#11) == read($Heap, y#0, _module.Qubits.card))
         else (if _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           then (var h#11 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#11) == read($Heap, y#0, _module.Qubits.card))
           else (var c#11 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#11 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#11, tmp#5)
                 && INTERNAL_le_boogie(dof#11, _System.array.Length(c#11))
                 && INTERNAL_le_boogie(dof#11, 
                  Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))))));
  requires (forall i#1: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int } 
    INTERNAL_le_boogie(0, i#1) && INTERNAL_lt_boogie(i#1, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, x#0, _module.Qubits.m)), IndexField(i#1))): int
         == LitInt(0));
  requires (forall i#3: int :: 
    { $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int } 
    INTERNAL_le_boogie(0, i#3) && INTERNAL_lt_boogie(i#3, n#0)
       ==> $Unbox(read($Heap, _module.Mode.b(read($Heap, y#0, _module.Qubits.m)), IndexField(i#3))): int
         == LitInt(0));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures x'#0 != null && !read(old($Heap), x'#0, alloc);
  free ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m))
     ==> 
    _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m))
     ==> _module.Qubits.Wf#canCall($Heap, x'#0)
       && (_module.Qubits.Wf($Heap, x'#0) ==> _module.Qubits.Wf#canCall($Heap, y#0));
  ensures _module.Mode.CH_q(read($Heap, x'#0, _module.Qubits.m));
  ensures _module.Mode.CH_q(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var b#12 := _module.Mode.b(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(b#12) == read($Heap, x'#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var h#12 := _module.Mode.h(read($Heap, x'#0, _module.Qubits.m)); 
            _System.array.Length(h#12) == read($Heap, x'#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#12 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#12 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#12, tmp#6))));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#12 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#12 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#12, _System.array.Length(c#12)))));
  ensures _module.Qubits.Wf#canCall($Heap, x'#0)
     ==> _module.Qubits.Wf($Heap, x'#0)
       || (var tmp#6 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, x'#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, x'#0, _module.Qubits.m))
           ==> (var c#12 := _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)); 
            (var dof#12 := _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#12, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        _module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var b#14 := _module.Mode.b(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(b#14) == read($Heap, y#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          _module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var h#14 := _module.Mode.h(read($Heap, y#0, _module.Qubits.m)); 
            _System.array.Length(h#14) == read($Heap, y#0, _module.Qubits.card)));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#14 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#14 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#14, tmp#7))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#14 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#14 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#14, _System.array.Length(c#14)))));
  ensures _module.Qubits.Wf#canCall($Heap, y#0)
     ==> _module.Qubits.Wf($Heap, y#0)
       || (var tmp#7 := Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card)); 
        !_module.Mode.Nor_q(read($Heap, y#0, _module.Qubits.m))
           ==> 
          !_module.Mode.Had_q(read($Heap, y#0, _module.Qubits.m))
           ==> (var c#14 := _module.Mode.c(read($Heap, y#0, _module.Qubits.m)); 
            (var dof#14 := _module.Mode.dof(read($Heap, y#0, _module.Qubits.m)); 
              INTERNAL_le_boogie(dof#14, 
                Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card))))));
  free ensures Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
     && (_module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
         == Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
       ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card))
         && (Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
             == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
           ==> Power2.__default.Pow2#canCall(read($Heap, y#0, _module.Qubits.card))));
  ensures _module.Mode.dof(read($Heap, x'#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card));
  ensures Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card))
     == _module.Mode.dof(read($Heap, y#0, _module.Qubits.m));
  ensures _module.Mode.dof(read($Heap, y#0, _module.Qubits.m))
     == Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, y#0, _module.Qubits.card));
  free ensures (forall k#1: int :: 
    { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#1)
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
       && (INTERNAL_le_boogie(0, k#1)
           && INTERNAL_lt_boogie(k#1, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType)));
  ensures (forall k#1: int :: 
    { #_System._tuple#2._#Make2($Box(k#1), $Box(1)) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType } 
    INTERNAL_le_boogie(0, k#1)
         && INTERNAL_lt_boogie(k#1, 
          Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, x'#0, _module.Qubits.m)), IndexField(k#1))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(k#1), $Box(LitInt(1)))));
  free ensures (forall k#3: int :: 
    { Power.__default.Pow(StartFuel_Power._default.Pow, a#0, k#3) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    (INTERNAL_le_boogie(0, k#3)
         ==> Power2.__default.Pow2#canCall(read($Heap, x'#0, _module.Qubits.card)))
       && (INTERNAL_le_boogie(0, k#3)
           && INTERNAL_lt_boogie(k#3, 
            Power2.__default.Pow2(StartFuel_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
         ==> $IsA#_System.Tuple2($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType)
           && Power.__default.Pow#canCall(a#0, k#3)));
  ensures (forall k#3: int :: 
    { Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#3) } 
      { $Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType } 
    INTERNAL_le_boogie(0, k#3)
         && INTERNAL_lt_boogie(k#3, 
          Power2.__default.Pow2(StartFuelAssert_Power2._default.Pow2, read($Heap, x'#0, _module.Qubits.card)))
       ==> _System.Tuple2#Equal($Unbox(read($Heap, _module.Mode.c(read($Heap, y#0, _module.Qubits.m)), IndexField(k#3))): DatatypeType, 
        #_System._tuple#2._#Make2($Box(INTERNAL_mod_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, a#0, k#3), N#0)), 
          $Box(LitInt(1)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == x#0
         || $o == y#0
         || $o == _module.Mode.b(read(old($Heap), y#0, _module.Qubits.m)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.__default.Shor(a#0: int, N#0: int, n#0: int, x#0: ref, y#0: ref)
   returns (defass#x'#0: bool, x'#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $rhs##0: ref;
  var a##0: int;
  var N##0: int;
  var n##0: int;
  var x##0: ref;
  var y##0: ref;
  var a##1: int;
  var N##1: int;
  var n##1: int;
  var x##1: ref;
  var y##1: ref;
  var x'##0: ref;

    // AddMethodImpl: Shor, Impl$$_module.__default.Shor
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc)
         ==> $o == x#0
           || $o == y#0
           || $o == _module.Mode.b(read($Heap, y#0, _module.Qubits.m)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(705,14)
    assume true;
    // TrCallStmt: Adding lhs with type Qubits
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := a#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    N##0 := N#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    n##0 := n#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    x##0 := x#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    y##0 := y#0;
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && read($Heap, $o, alloc)
           && (
            $o == x##0
             || $o == y##0
             || $o == _module.Mode.b(read($Heap, y##0, _module.Qubits.m)))
         ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call $rhs##0 := Call$$_module.__default.Shor0(a##0, N##0, n##0, x##0, y##0);
    // TrCallStmt: After ProcessCallStmt
    x'#0 := $rhs##0;
    defass#x'#0 := true;
    // ----- call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(706,8)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##1 := a#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    N##1 := N#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    n##1 := n#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    x##1 := x#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    y##1 := y#0;
    assert defass#x'#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    x'##0 := x'#0;
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && read($Heap, $o, alloc)
           && ($o == x##1 || $o == y##1 || $o == x'##0)
         ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call Call$$_module.__default.Shor1(a##1, N##1, n##1, x##1, y##1, x'##0);
    // TrCallStmt: After ProcessCallStmt
    assert defass#x'#0;
}



procedure CheckWellformed$$_module.__default.Test();
  free requires 3 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$_module.__default.Test();
  modifies $Heap, $Tick;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.__default.Test() returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.__default.Test() returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var n#0: int;
  var defass#x#0: bool;
  var x#0: ref
     where defass#x#0
       ==> $Is(x#0, Tclass._module.Qubits())
         && $IsAlloc(x#0, Tclass._module.Qubits(), $Heap);
  var $nw: ref;
  var n##0: int;
  var defass#y#0: bool;
  var y#0: ref
     where defass#y#0
       ==> $Is(y#0, Tclass._module.Qubits())
         && $IsAlloc(y#0, Tclass._module.Qubits(), $Heap);
  var n##1: int;

    // AddMethodImpl: Test, Impl$$_module.__default.Test
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MulInternals._default.MulPos)
       == StartFuel_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuelAssert_MulInternals._default.MulPos)
       == StartFuelAssert_MulInternals._default.MulPos;
    assume AsFuelBottom(StartFuel_ModInternals._default.ModRecursive)
       == StartFuel_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuelAssert_ModInternals._default.ModRecursive)
       == StartFuelAssert_ModInternals._default.ModRecursive;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivPos)
       == StartFuel_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivPos)
       == StartFuelAssert_DivInternals._default.DivPos;
    assume AsFuelBottom(StartFuel_DivInternals._default.DivRecursive)
       == StartFuel_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuelAssert_DivInternals._default.DivRecursive)
       == StartFuelAssert_DivInternals._default.DivRecursive;
    assume AsFuelBottom(StartFuel_Power._default.Pow) == StartFuel_Power._default.Pow;
    assume AsFuelBottom(StartFuelAssert_Power._default.Pow)
       == StartFuelAssert_Power._default.Pow;
    assume AsFuelBottom(StartFuel_Power2._default.Pow2) == StartFuel_Power2._default.Pow2;
    assume AsFuelBottom(StartFuelAssert_Power2._default.Pow2)
       == StartFuelAssert_Power2._default.Pow2;
    assume AsFuelBottom(StartFuel_B2N._default.b2nAux) == StartFuel_B2N._default.b2nAux;
    assume AsFuelBottom(StartFuelAssert_B2N._default.b2nAux)
       == StartFuelAssert_B2N._default.b2nAux;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(711,9)
    assume true;
    assume true;
    n#0 := LitInt(10);
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(712,9)
    assume true;
    // ----- init call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(712,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert $Is(n#0, Tclass._System.nat());
    n##0 := n#0;
    // ProcessCallStmt: Make the call
    call $nw := Call$$_module.Qubits.Prepare0(n##0);
    // TrCallStmt: After ProcessCallStmt
    x#0 := $nw;
    defass#x#0 := true;
    // ----- assignment statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(713,9)
    assume true;
    // ----- init call statement ----- /home/mzhu/qdafny/natprof/examples/Shor-compiled.dfy(713,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert $Is(n#0, Tclass._System.nat());
    n##1 := n#0;
    // ProcessCallStmt: Make the call
    call $nw := Call$$_module.Qubits.Prepare0(n##1);
    // TrCallStmt: After ProcessCallStmt
    y#0 := $nw;
    defass#y#0 := true;
}



const unique class.GeneralInternals.__default: ClassName;

function Tclass.GeneralInternals.__default() : Ty;

const unique Tagclass.GeneralInternals.__default: TyTag;

// Tclass.GeneralInternals.__default Tag
axiom Tag(Tclass.GeneralInternals.__default()) == Tagclass.GeneralInternals.__default
   && TagFamily(Tclass.GeneralInternals.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.GeneralInternals.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.GeneralInternals.__default()) } 
  $IsBox(bx, Tclass.GeneralInternals.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass.GeneralInternals.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.GeneralInternals.__default()) } 
  $Is($o, Tclass.GeneralInternals.__default())
     <==> $o == null || dtype($o) == Tclass.GeneralInternals.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.GeneralInternals.__default(), $h) } 
  $IsAlloc($o, Tclass.GeneralInternals.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for GeneralInternals._default.IsLe
function GeneralInternals.__default.IsLe(x#0: int, y#0: int) : bool;

function GeneralInternals.__default.IsLe#canCall(x#0: int, y#0: int) : bool;

// consequence axiom for GeneralInternals.__default.IsLe
axiom true
   ==> (forall x#0: int, y#0: int :: 
    { GeneralInternals.__default.IsLe(x#0, y#0) } 
    true ==> true);

function GeneralInternals.__default.IsLe#requires(int, int) : bool;

// #requires axiom for GeneralInternals.__default.IsLe
axiom (forall x#0: int, y#0: int :: 
  { GeneralInternals.__default.IsLe#requires(x#0, y#0) } 
  GeneralInternals.__default.IsLe#requires(x#0, y#0) == true);

// definition axiom for GeneralInternals.__default.IsLe (revealed)
axiom true
   ==> (forall x#0: int, y#0: int :: 
    { GeneralInternals.__default.IsLe(x#0, y#0) } 
    true
       ==> GeneralInternals.__default.IsLe(x#0, y#0) == INTERNAL_le_boogie(x#0, y#0));

// definition axiom for GeneralInternals.__default.IsLe for all literals (revealed)
axiom true
   ==> (forall x#0: int, y#0: int :: 
    {:weight 3} { GeneralInternals.__default.IsLe(LitInt(x#0), LitInt(y#0)) } 
    true
       ==> GeneralInternals.__default.IsLe(LitInt(x#0), LitInt(y#0))
         == INTERNAL_le_boogie(x#0, y#0));

const unique class.MulInternalsNonlinear.__default: ClassName;

function Tclass.MulInternalsNonlinear.__default() : Ty;

const unique Tagclass.MulInternalsNonlinear.__default: TyTag;

// Tclass.MulInternalsNonlinear.__default Tag
axiom Tag(Tclass.MulInternalsNonlinear.__default())
     == Tagclass.MulInternalsNonlinear.__default
   && TagFamily(Tclass.MulInternalsNonlinear.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.MulInternalsNonlinear.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.MulInternalsNonlinear.__default()) } 
  $IsBox(bx, Tclass.MulInternalsNonlinear.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass.MulInternalsNonlinear.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.MulInternalsNonlinear.__default()) } 
  $Is($o, Tclass.MulInternalsNonlinear.__default())
     <==> $o == null || dtype($o) == Tclass.MulInternalsNonlinear.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.MulInternalsNonlinear.__default(), $h) } 
  $IsAlloc($o, Tclass.MulInternalsNonlinear.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

const unique class.MulInternals.__default: ClassName;

function Tclass.MulInternals.__default() : Ty;

const unique Tagclass.MulInternals.__default: TyTag;

// Tclass.MulInternals.__default Tag
axiom Tag(Tclass.MulInternals.__default()) == Tagclass.MulInternals.__default
   && TagFamily(Tclass.MulInternals.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.MulInternals.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.MulInternals.__default()) } 
  $IsBox(bx, Tclass.MulInternals.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass.MulInternals.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.MulInternals.__default()) } 
  $Is($o, Tclass.MulInternals.__default())
     <==> $o == null || dtype($o) == Tclass.MulInternals.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.MulInternals.__default(), $h) } 
  $IsAlloc($o, Tclass.MulInternals.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for MulInternals._default.MulPos
function MulInternals.__default.MulPos($ly: LayerType, x#0: int, y#0: int) : int;

function MulInternals.__default.MulPos#canCall(x#0: int, y#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, x#0: int, y#0: int :: 
  { MulInternals.__default.MulPos($LS($ly), x#0, y#0) } 
  MulInternals.__default.MulPos($LS($ly), x#0, y#0)
     == MulInternals.__default.MulPos($ly, x#0, y#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, x#0: int, y#0: int :: 
  { MulInternals.__default.MulPos(AsFuelBottom($ly), x#0, y#0) } 
  MulInternals.__default.MulPos($ly, x#0, y#0)
     == MulInternals.__default.MulPos($LZ, x#0, y#0));

// consequence axiom for MulInternals.__default.MulPos
axiom true
   ==> (forall $ly: LayerType, x#0: int, y#0: int :: 
    { MulInternals.__default.MulPos($ly, x#0, y#0) } 
    MulInternals.__default.MulPos#canCall(x#0, y#0) || INTERNAL_ge_boogie(x#0, 0)
       ==> true);

function MulInternals.__default.MulPos#requires(LayerType, int, int) : bool;

// #requires axiom for MulInternals.__default.MulPos
axiom (forall $ly: LayerType, x#0: int, y#0: int :: 
  { MulInternals.__default.MulPos#requires($ly, x#0, y#0) } 
  MulInternals.__default.MulPos#requires($ly, x#0, y#0)
     == INTERNAL_ge_boogie(x#0, 0));

// definition axiom for MulInternals.__default.MulPos (revealed)
axiom true
   ==> (forall $ly: LayerType, x#0: int, y#0: int :: 
    { MulInternals.__default.MulPos($LS($ly), x#0, y#0) } 
    MulInternals.__default.MulPos#canCall(x#0, y#0) || INTERNAL_ge_boogie(x#0, 0)
       ==> (x#0 != LitInt(0)
           ==> MulInternals.__default.MulPos#canCall(INTERNAL_sub_boogie(x#0, 1), y#0))
         && MulInternals.__default.MulPos($LS($ly), x#0, y#0)
           == (if x#0 == LitInt(0)
             then 0
             else INTERNAL_add_boogie(y#0, MulInternals.__default.MulPos($ly, INTERNAL_sub_boogie(x#0, 1), y#0))));

// definition axiom for MulInternals.__default.MulPos for all literals (revealed)
axiom true
   ==> (forall $ly: LayerType, x#0: int, y#0: int :: 
    {:weight 3} { MulInternals.__default.MulPos($LS($ly), LitInt(x#0), LitInt(y#0)) } 
    MulInternals.__default.MulPos#canCall(LitInt(x#0), LitInt(y#0))
         || INTERNAL_ge_boogie(x#0, 0)
       ==> (LitInt(x#0) != LitInt(0)
           ==> MulInternals.__default.MulPos#canCall(LitInt(INTERNAL_sub_boogie(x#0, 1)), LitInt(y#0)))
         && MulInternals.__default.MulPos($LS($ly), LitInt(x#0), LitInt(y#0))
           == (if LitInt(x#0) == LitInt(0)
             then 0
             else INTERNAL_add_boogie(y#0, 
              MulInternals.__default.MulPos($LS($ly), LitInt(INTERNAL_sub_boogie(x#0, 1)), LitInt(y#0)))));

// function declaration for MulInternals._default.MulRecursive
function MulInternals.__default.MulRecursive(x#0: int, y#0: int) : int;

function MulInternals.__default.MulRecursive#canCall(x#0: int, y#0: int) : bool;

// consequence axiom for MulInternals.__default.MulRecursive
axiom true
   ==> (forall x#0: int, y#0: int :: 
    { MulInternals.__default.MulRecursive(x#0, y#0) } 
    true ==> true);

function MulInternals.__default.MulRecursive#requires(int, int) : bool;

// #requires axiom for MulInternals.__default.MulRecursive
axiom (forall x#0: int, y#0: int :: 
  { MulInternals.__default.MulRecursive#requires(x#0, y#0) } 
  MulInternals.__default.MulRecursive#requires(x#0, y#0) == true);

// definition axiom for MulInternals.__default.MulRecursive (revealed)
axiom true
   ==> (forall x#0: int, y#0: int :: 
    { MulInternals.__default.MulRecursive(x#0, y#0) } 
    true
       ==> (INTERNAL_ge_boogie(x#0, 0) ==> MulInternals.__default.MulPos#canCall(x#0, y#0))
         && (!INTERNAL_ge_boogie(x#0, 0)
           ==> MulInternals.__default.MulPos#canCall(INTERNAL_mul_boogie(-1, x#0), y#0))
         && MulInternals.__default.MulRecursive(x#0, y#0)
           == (if INTERNAL_ge_boogie(x#0, 0)
             then MulInternals.__default.MulPos(StartFuel_MulInternals._default.MulPos, x#0, y#0)
             else INTERNAL_mul_boogie(-1, 
              MulInternals.__default.MulPos(StartFuel_MulInternals._default.MulPos, INTERNAL_mul_boogie(-1, x#0), y#0))));

// definition axiom for MulInternals.__default.MulRecursive for all literals (revealed)
axiom true
   ==> (forall x#0: int, y#0: int :: 
    {:weight 3} { MulInternals.__default.MulRecursive(LitInt(x#0), LitInt(y#0)) } 
    true
       ==> (INTERNAL_ge_boogie(x#0, 0)
           ==> MulInternals.__default.MulPos#canCall(LitInt(x#0), LitInt(y#0)))
         && (!INTERNAL_ge_boogie(x#0, 0)
           ==> MulInternals.__default.MulPos#canCall(LitInt(INTERNAL_mul_boogie(-1, x#0)), LitInt(y#0)))
         && MulInternals.__default.MulRecursive(LitInt(x#0), LitInt(y#0))
           == (if INTERNAL_ge_boogie(x#0, 0)
             then MulInternals.__default.MulPos(StartFuel_MulInternals._default.MulPos, LitInt(x#0), LitInt(y#0))
             else INTERNAL_mul_boogie(-1, 
              MulInternals.__default.MulPos(StartFuel_MulInternals._default.MulPos, 
                LitInt(INTERNAL_mul_boogie(-1, x#0)), 
                LitInt(y#0)))));

// function declaration for MulInternals._default.MulAuto
function MulInternals.__default.MulAuto() : bool;

function MulInternals.__default.MulAuto#canCall() : bool;

// consequence axiom for MulInternals.__default.MulAuto
axiom true ==> true ==> true;

function MulInternals.__default.MulAuto#requires() : bool;

// #requires axiom for MulInternals.__default.MulAuto
axiom MulInternals.__default.MulAuto#requires() == true;

// definition axiom for MulInternals.__default.MulAuto (revealed)
axiom true
   ==> 
  true
   ==> MulInternals.__default.MulAuto()
     == (
      (forall x#0: int, y#0: int :: 
        { INTERNAL_mul_boogie(x#0, y#0) } 
        true ==> INTERNAL_mul_boogie(x#0, y#0) == INTERNAL_mul_boogie(y#0, x#0))
       && (forall x#1: int, y#1: int, z#0: int :: 
        { INTERNAL_mul_boogie(INTERNAL_add_boogie(x#1, y#1), z#0) } 
        true
           ==> INTERNAL_mul_boogie(INTERNAL_add_boogie(x#1, y#1), z#0)
             == INTERNAL_add_boogie(INTERNAL_mul_boogie(x#1, z#0), INTERNAL_mul_boogie(y#1, z#0)))
       && (forall x#2: int, y#2: int, z#1: int :: 
        { INTERNAL_mul_boogie(INTERNAL_sub_boogie(x#2, y#2), z#1) } 
        true
           ==> INTERNAL_mul_boogie(INTERNAL_sub_boogie(x#2, y#2), z#1)
             == INTERNAL_sub_boogie(INTERNAL_mul_boogie(x#2, z#1), INTERNAL_mul_boogie(y#2, z#1))));

// definition axiom for MulInternals.__default.MulAuto for all literals (revealed)
axiom true
   ==> 
  true
   ==> MulInternals.__default.MulAuto()
     == (
      (forall x#3: int, y#3: int :: 
        { INTERNAL_mul_boogie(x#3, y#3) } 
        true ==> INTERNAL_mul_boogie(x#3, y#3) == INTERNAL_mul_boogie(y#3, x#3))
       && (forall x#4: int, y#4: int, z#2: int :: 
        { INTERNAL_mul_boogie(INTERNAL_add_boogie(x#4, y#4), z#2) } 
        true
           ==> INTERNAL_mul_boogie(INTERNAL_add_boogie(x#4, y#4), z#2)
             == INTERNAL_add_boogie(INTERNAL_mul_boogie(x#4, z#2), INTERNAL_mul_boogie(y#4, z#2)))
       && (forall x#5: int, y#5: int, z#3: int :: 
        { INTERNAL_mul_boogie(INTERNAL_sub_boogie(x#5, y#5), z#3) } 
        true
           ==> INTERNAL_mul_boogie(INTERNAL_sub_boogie(x#5, y#5), z#3)
             == INTERNAL_sub_boogie(INTERNAL_mul_boogie(x#5, z#3), INTERNAL_mul_boogie(y#5, z#3))));

const unique class.Mul.__default: ClassName;

function Tclass.Mul.__default() : Ty;

const unique Tagclass.Mul.__default: TyTag;

// Tclass.Mul.__default Tag
axiom Tag(Tclass.Mul.__default()) == Tagclass.Mul.__default
   && TagFamily(Tclass.Mul.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.Mul.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.Mul.__default()) } 
  $IsBox(bx, Tclass.Mul.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass.Mul.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.Mul.__default()) } 
  $Is($o, Tclass.Mul.__default())
     <==> $o == null || dtype($o) == Tclass.Mul.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.Mul.__default(), $h) } 
  $IsAlloc($o, Tclass.Mul.__default(), $h) <==> $o == null || read($h, $o, alloc));

procedure CheckWellformed$$Mul.__default.LemmaMulIsAssociative(x#0: int, y#0: int, z#0: int);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$Mul.__default.LemmaMulIsAssociative(x#0: int, y#0: int, z#0: int);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures INTERNAL_mul_boogie(x#0, INTERNAL_mul_boogie(y#0, z#0))
     == INTERNAL_mul_boogie(INTERNAL_mul_boogie(x#0, y#0), z#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure CheckWellformed$$Mul.__default.LemmaMulIsCommutative(x#0: int, y#0: int);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$Mul.__default.LemmaMulIsCommutative(x#0: int, y#0: int);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures INTERNAL_mul_boogie(x#0, y#0) == INTERNAL_mul_boogie(y#0, x#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure CheckWellformed$$Mul.__default.LemmaMulIsDistributiveAuto();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$Mul.__default.LemmaMulIsDistributiveAuto();
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures (forall x#0: int, y#0: int, z#0: int :: 
    { INTERNAL_mul_boogie(x#0, INTERNAL_add_boogie(y#0, z#0)) } 
    true
       ==> INTERNAL_mul_boogie(x#0, INTERNAL_add_boogie(y#0, z#0))
         == INTERNAL_add_boogie(INTERNAL_mul_boogie(x#0, y#0), INTERNAL_mul_boogie(x#0, z#0)));
  free ensures true;
  ensures (forall x#1: int, y#1: int, z#1: int :: 
    { INTERNAL_mul_boogie(x#1, INTERNAL_sub_boogie(y#1, z#1)) } 
    true
       ==> INTERNAL_mul_boogie(x#1, INTERNAL_sub_boogie(y#1, z#1))
         == INTERNAL_sub_boogie(INTERNAL_mul_boogie(x#1, y#1), INTERNAL_mul_boogie(x#1, z#1)));
  free ensures true;
  ensures (forall x#2: int, y#2: int, z#2: int :: 
    { INTERNAL_mul_boogie(INTERNAL_add_boogie(y#2, z#2), x#2) } 
    true
       ==> INTERNAL_mul_boogie(INTERNAL_add_boogie(y#2, z#2), x#2)
         == INTERNAL_add_boogie(INTERNAL_mul_boogie(y#2, x#2), INTERNAL_mul_boogie(z#2, x#2)));
  free ensures true;
  ensures (forall x#3: int, y#3: int, z#3: int :: 
    { INTERNAL_mul_boogie(INTERNAL_sub_boogie(y#3, z#3), x#3) } 
    true
       ==> INTERNAL_mul_boogie(INTERNAL_sub_boogie(y#3, z#3), x#3)
         == INTERNAL_sub_boogie(INTERNAL_mul_boogie(y#3, x#3), INTERNAL_mul_boogie(z#3, x#3)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure CheckWellformed$$Mul.__default.LemmaMulNonnegative(x#0: int, y#0: int);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$Mul.__default.LemmaMulNonnegative(x#0: int, y#0: int);
  // user-defined preconditions
  requires INTERNAL_le_boogie(0, x#0);
  requires INTERNAL_le_boogie(0, y#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures INTERNAL_le_boogie(0, INTERNAL_mul_boogie(x#0, y#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure CheckWellformed$$Mul.__default.LemmaMulNonnegativeAuto();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$Mul.__default.LemmaMulNonnegativeAuto();
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures (forall x#0: int, y#0: int :: 
    { INTERNAL_mul_boogie(x#0, y#0) } 
    true
       ==> 
      INTERNAL_le_boogie(0, x#0) && INTERNAL_le_boogie(0, y#0)
       ==> INTERNAL_le_boogie(0, INTERNAL_mul_boogie(x#0, y#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



const unique class.ModInternalsNonlinear.__default: ClassName;

function Tclass.ModInternalsNonlinear.__default() : Ty;

const unique Tagclass.ModInternalsNonlinear.__default: TyTag;

// Tclass.ModInternalsNonlinear.__default Tag
axiom Tag(Tclass.ModInternalsNonlinear.__default())
     == Tagclass.ModInternalsNonlinear.__default
   && TagFamily(Tclass.ModInternalsNonlinear.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.ModInternalsNonlinear.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.ModInternalsNonlinear.__default()) } 
  $IsBox(bx, Tclass.ModInternalsNonlinear.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass.ModInternalsNonlinear.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.ModInternalsNonlinear.__default()) } 
  $Is($o, Tclass.ModInternalsNonlinear.__default())
     <==> $o == null || dtype($o) == Tclass.ModInternalsNonlinear.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.ModInternalsNonlinear.__default(), $h) } 
  $IsAlloc($o, Tclass.ModInternalsNonlinear.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

const unique class.DivInternalsNonlinear.__default: ClassName;

function Tclass.DivInternalsNonlinear.__default() : Ty;

const unique Tagclass.DivInternalsNonlinear.__default: TyTag;

// Tclass.DivInternalsNonlinear.__default Tag
axiom Tag(Tclass.DivInternalsNonlinear.__default())
     == Tagclass.DivInternalsNonlinear.__default
   && TagFamily(Tclass.DivInternalsNonlinear.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.DivInternalsNonlinear.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.DivInternalsNonlinear.__default()) } 
  $IsBox(bx, Tclass.DivInternalsNonlinear.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass.DivInternalsNonlinear.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.DivInternalsNonlinear.__default()) } 
  $Is($o, Tclass.DivInternalsNonlinear.__default())
     <==> $o == null || dtype($o) == Tclass.DivInternalsNonlinear.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.DivInternalsNonlinear.__default(), $h) } 
  $IsAlloc($o, Tclass.DivInternalsNonlinear.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

const unique class.ModInternals.__default: ClassName;

function Tclass.ModInternals.__default() : Ty;

const unique Tagclass.ModInternals.__default: TyTag;

// Tclass.ModInternals.__default Tag
axiom Tag(Tclass.ModInternals.__default()) == Tagclass.ModInternals.__default
   && TagFamily(Tclass.ModInternals.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.ModInternals.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.ModInternals.__default()) } 
  $IsBox(bx, Tclass.ModInternals.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass.ModInternals.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.ModInternals.__default()) } 
  $Is($o, Tclass.ModInternals.__default())
     <==> $o == null || dtype($o) == Tclass.ModInternals.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.ModInternals.__default(), $h) } 
  $IsAlloc($o, Tclass.ModInternals.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for ModInternals._default.ModRecursive
function ModInternals.__default.ModRecursive($ly: LayerType, x#0: int, d#0: int) : int;

function ModInternals.__default.ModRecursive#canCall(x#0: int, d#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { ModInternals.__default.ModRecursive($LS($ly), x#0, d#0) } 
  ModInternals.__default.ModRecursive($LS($ly), x#0, d#0)
     == ModInternals.__default.ModRecursive($ly, x#0, d#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { ModInternals.__default.ModRecursive(AsFuelBottom($ly), x#0, d#0) } 
  ModInternals.__default.ModRecursive($ly, x#0, d#0)
     == ModInternals.__default.ModRecursive($LZ, x#0, d#0));

// consequence axiom for ModInternals.__default.ModRecursive
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    { ModInternals.__default.ModRecursive($ly, x#0, d#0) } 
    ModInternals.__default.ModRecursive#canCall(x#0, d#0)
         || INTERNAL_gt_boogie(d#0, 0)
       ==> true);

function ModInternals.__default.ModRecursive#requires(LayerType, int, int) : bool;

// #requires axiom for ModInternals.__default.ModRecursive
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { ModInternals.__default.ModRecursive#requires($ly, x#0, d#0) } 
  ModInternals.__default.ModRecursive#requires($ly, x#0, d#0)
     == INTERNAL_gt_boogie(d#0, 0));

// definition axiom for ModInternals.__default.ModRecursive (revealed)
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    { ModInternals.__default.ModRecursive($LS($ly), x#0, d#0) } 
    ModInternals.__default.ModRecursive#canCall(x#0, d#0)
         || INTERNAL_gt_boogie(d#0, 0)
       ==> (INTERNAL_lt_boogie(x#0, 0)
           ==> ModInternals.__default.ModRecursive#canCall(INTERNAL_add_boogie(d#0, x#0), d#0))
         && (!INTERNAL_lt_boogie(x#0, 0)
           ==> 
          !INTERNAL_lt_boogie(x#0, d#0)
           ==> ModInternals.__default.ModRecursive#canCall(INTERNAL_sub_boogie(x#0, d#0), d#0))
         && ModInternals.__default.ModRecursive($LS($ly), x#0, d#0)
           == (if INTERNAL_lt_boogie(x#0, 0)
             then ModInternals.__default.ModRecursive($ly, INTERNAL_add_boogie(d#0, x#0), d#0)
             else (if INTERNAL_lt_boogie(x#0, d#0)
               then x#0
               else ModInternals.__default.ModRecursive($ly, INTERNAL_sub_boogie(x#0, d#0), d#0))));

// definition axiom for ModInternals.__default.ModRecursive for all literals (revealed)
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    {:weight 3} { ModInternals.__default.ModRecursive($LS($ly), LitInt(x#0), LitInt(d#0)) } 
    ModInternals.__default.ModRecursive#canCall(LitInt(x#0), LitInt(d#0))
         || Lit(INTERNAL_gt_boogie(d#0, 0))
       ==> (Lit(INTERNAL_lt_boogie(x#0, 0))
           ==> ModInternals.__default.ModRecursive#canCall(LitInt(INTERNAL_add_boogie(d#0, x#0)), LitInt(d#0)))
         && (!Lit(INTERNAL_lt_boogie(x#0, 0))
           ==> 
          !Lit(INTERNAL_lt_boogie(x#0, d#0))
           ==> ModInternals.__default.ModRecursive#canCall(LitInt(INTERNAL_sub_boogie(x#0, d#0)), LitInt(d#0)))
         && ModInternals.__default.ModRecursive($LS($ly), LitInt(x#0), LitInt(d#0))
           == (if INTERNAL_lt_boogie(x#0, 0)
             then ModInternals.__default.ModRecursive($LS($ly), LitInt(INTERNAL_add_boogie(d#0, x#0)), LitInt(d#0))
             else (if INTERNAL_lt_boogie(x#0, d#0)
               then x#0
               else ModInternals.__default.ModRecursive($LS($ly), LitInt(INTERNAL_sub_boogie(x#0, d#0)), LitInt(d#0)))));

// function declaration for ModInternals._default.ModAuto
function ModInternals.__default.ModAuto(n#0: int) : bool;

function ModInternals.__default.ModAuto#canCall(n#0: int) : bool;

// consequence axiom for ModInternals.__default.ModAuto
axiom true
   ==> (forall n#0: int :: 
    { ModInternals.__default.ModAuto(n#0) } 
    ModInternals.__default.ModAuto#canCall(n#0) || INTERNAL_gt_boogie(n#0, 0)
       ==> true);

function ModInternals.__default.ModAuto#requires(int) : bool;

// #requires axiom for ModInternals.__default.ModAuto
axiom (forall n#0: int :: 
  { ModInternals.__default.ModAuto#requires(n#0) } 
  ModInternals.__default.ModAuto#requires(n#0) == INTERNAL_gt_boogie(n#0, 0));

// definition axiom for ModInternals.__default.ModAuto (revealed)
axiom true
   ==> (forall n#0: int :: 
    { ModInternals.__default.ModAuto(n#0) } 
    ModInternals.__default.ModAuto#canCall(n#0) || INTERNAL_gt_boogie(n#0, 0)
       ==> ModInternals.__default.ModAuto(n#0)
         == (
          INTERNAL_mod_boogie(n#0, n#0)
             == INTERNAL_mod_boogie(INTERNAL_sub_boogie(0, n#0), n#0)
           && INTERNAL_mod_boogie(INTERNAL_sub_boogie(0, n#0), n#0) == LitInt(0)
           && (forall x#0: int :: 
            { INTERNAL_mod_boogie(INTERNAL_mod_boogie(x#0, n#0), n#0) } 
            true
               ==> INTERNAL_mod_boogie(INTERNAL_mod_boogie(x#0, n#0), n#0)
                 == INTERNAL_mod_boogie(x#0, n#0))
           && (forall x#1: int :: 
            { INTERNAL_mod_boogie(x#1, n#0) } 
            true
               ==> (INTERNAL_le_boogie(0, x#1) && INTERNAL_lt_boogie(x#1, n#0)
                 <==> INTERNAL_mod_boogie(x#1, n#0) == x#1))
           && (forall x#2: int, y#0: int :: 
            { INTERNAL_mod_boogie(INTERNAL_add_boogie(x#2, y#0), n#0) } 
            true
               ==> (var z#0 := INTERNAL_add_boogie(INTERNAL_mod_boogie(x#2, n#0), INTERNAL_mod_boogie(y#0, n#0)); 
                (
                    INTERNAL_le_boogie(0, z#0)
                     && INTERNAL_lt_boogie(z#0, n#0)
                     && INTERNAL_mod_boogie(INTERNAL_add_boogie(x#2, y#0), n#0) == z#0)
                   || (
                    INTERNAL_le_boogie(n#0, z#0)
                     && INTERNAL_lt_boogie(z#0, INTERNAL_add_boogie(n#0, n#0))
                     && INTERNAL_mod_boogie(INTERNAL_add_boogie(x#2, y#0), n#0)
                       == INTERNAL_sub_boogie(z#0, n#0))))
           && (forall x#3: int, y#1: int :: 
            { INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#3, y#1), n#0) } 
            true
               ==> (var z#1 := INTERNAL_sub_boogie(INTERNAL_mod_boogie(x#3, n#0), INTERNAL_mod_boogie(y#1, n#0)); 
                (
                    INTERNAL_le_boogie(0, z#1)
                     && INTERNAL_lt_boogie(z#1, n#0)
                     && INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#3, y#1), n#0) == z#1)
                   || (
                    INTERNAL_le_boogie(INTERNAL_sub_boogie(0, n#0), z#1)
                     && INTERNAL_lt_boogie(z#1, 0)
                     && INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#3, y#1), n#0)
                       == INTERNAL_add_boogie(z#1, n#0))))));

// definition axiom for ModInternals.__default.ModAuto for all literals (revealed)
axiom true
   ==> (forall n#0: int :: 
    {:weight 3} { ModInternals.__default.ModAuto(LitInt(n#0)) } 
    ModInternals.__default.ModAuto#canCall(LitInt(n#0))
         || Lit(INTERNAL_gt_boogie(n#0, 0))
       ==> ModInternals.__default.ModAuto(LitInt(n#0))
         == (
          LitInt(INTERNAL_mod_boogie(n#0, n#0))
             == LitInt(INTERNAL_mod_boogie(INTERNAL_sub_boogie(0, n#0), n#0))
           && LitInt(INTERNAL_mod_boogie(INTERNAL_sub_boogie(0, n#0), n#0)) == LitInt(0)
           && (forall x#4: int :: 
            { INTERNAL_mod_boogie(INTERNAL_mod_boogie(x#4, n#0), n#0) } 
            true
               ==> INTERNAL_mod_boogie(INTERNAL_mod_boogie(x#4, n#0), n#0)
                 == INTERNAL_mod_boogie(x#4, n#0))
           && (forall x#5: int :: 
            { INTERNAL_mod_boogie(x#5, n#0) } 
            true
               ==> (INTERNAL_le_boogie(0, x#5) && INTERNAL_lt_boogie(x#5, n#0)
                 <==> INTERNAL_mod_boogie(x#5, n#0) == x#5))
           && (forall x#6: int, y#2: int :: 
            { INTERNAL_mod_boogie(INTERNAL_add_boogie(x#6, y#2), n#0) } 
            true
               ==> (var z#2 := INTERNAL_add_boogie(INTERNAL_mod_boogie(x#6, n#0), INTERNAL_mod_boogie(y#2, n#0)); 
                (
                    INTERNAL_le_boogie(0, z#2)
                     && INTERNAL_lt_boogie(z#2, n#0)
                     && INTERNAL_mod_boogie(INTERNAL_add_boogie(x#6, y#2), n#0) == z#2)
                   || (
                    INTERNAL_le_boogie(n#0, z#2)
                     && INTERNAL_lt_boogie(z#2, INTERNAL_add_boogie(n#0, n#0))
                     && INTERNAL_mod_boogie(INTERNAL_add_boogie(x#6, y#2), n#0)
                       == INTERNAL_sub_boogie(z#2, n#0))))
           && (forall x#7: int, y#3: int :: 
            { INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#7, y#3), n#0) } 
            true
               ==> (var z#3 := INTERNAL_sub_boogie(INTERNAL_mod_boogie(x#7, n#0), INTERNAL_mod_boogie(y#3, n#0)); 
                (
                    INTERNAL_le_boogie(0, z#3)
                     && INTERNAL_lt_boogie(z#3, n#0)
                     && INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#7, y#3), n#0) == z#3)
                   || (
                    INTERNAL_le_boogie(INTERNAL_sub_boogie(0, n#0), z#3)
                     && INTERNAL_lt_boogie(z#3, 0)
                     && INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#7, y#3), n#0)
                       == INTERNAL_add_boogie(z#3, n#0))))));

const unique class.DivInternals.__default: ClassName;

function Tclass.DivInternals.__default() : Ty;

const unique Tagclass.DivInternals.__default: TyTag;

// Tclass.DivInternals.__default Tag
axiom Tag(Tclass.DivInternals.__default()) == Tagclass.DivInternals.__default
   && TagFamily(Tclass.DivInternals.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.DivInternals.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.DivInternals.__default()) } 
  $IsBox(bx, Tclass.DivInternals.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass.DivInternals.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.DivInternals.__default()) } 
  $Is($o, Tclass.DivInternals.__default())
     <==> $o == null || dtype($o) == Tclass.DivInternals.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.DivInternals.__default(), $h) } 
  $IsAlloc($o, Tclass.DivInternals.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for DivInternals._default.DivPos
function DivInternals.__default.DivPos($ly: LayerType, x#0: int, d#0: int) : int;

function DivInternals.__default.DivPos#canCall(x#0: int, d#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { DivInternals.__default.DivPos($LS($ly), x#0, d#0) } 
  DivInternals.__default.DivPos($LS($ly), x#0, d#0)
     == DivInternals.__default.DivPos($ly, x#0, d#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { DivInternals.__default.DivPos(AsFuelBottom($ly), x#0, d#0) } 
  DivInternals.__default.DivPos($ly, x#0, d#0)
     == DivInternals.__default.DivPos($LZ, x#0, d#0));

// consequence axiom for DivInternals.__default.DivPos
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    { DivInternals.__default.DivPos($ly, x#0, d#0) } 
    DivInternals.__default.DivPos#canCall(x#0, d#0) || INTERNAL_gt_boogie(d#0, 0)
       ==> true);

function DivInternals.__default.DivPos#requires(LayerType, int, int) : bool;

// #requires axiom for DivInternals.__default.DivPos
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { DivInternals.__default.DivPos#requires($ly, x#0, d#0) } 
  DivInternals.__default.DivPos#requires($ly, x#0, d#0)
     == INTERNAL_gt_boogie(d#0, 0));

// definition axiom for DivInternals.__default.DivPos (revealed)
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    { DivInternals.__default.DivPos($LS($ly), x#0, d#0) } 
    DivInternals.__default.DivPos#canCall(x#0, d#0) || INTERNAL_gt_boogie(d#0, 0)
       ==> (INTERNAL_lt_boogie(x#0, 0)
           ==> DivInternals.__default.DivPos#canCall(INTERNAL_add_boogie(x#0, d#0), d#0))
         && (!INTERNAL_lt_boogie(x#0, 0)
           ==> 
          !INTERNAL_lt_boogie(x#0, d#0)
           ==> DivInternals.__default.DivPos#canCall(INTERNAL_sub_boogie(x#0, d#0), d#0))
         && DivInternals.__default.DivPos($LS($ly), x#0, d#0)
           == (if INTERNAL_lt_boogie(x#0, 0)
             then INTERNAL_add_boogie(-1, DivInternals.__default.DivPos($ly, INTERNAL_add_boogie(x#0, d#0), d#0))
             else (if INTERNAL_lt_boogie(x#0, d#0)
               then 0
               else INTERNAL_add_boogie(1, DivInternals.__default.DivPos($ly, INTERNAL_sub_boogie(x#0, d#0), d#0)))));

// definition axiom for DivInternals.__default.DivPos for all literals (revealed)
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    {:weight 3} { DivInternals.__default.DivPos($LS($ly), LitInt(x#0), LitInt(d#0)) } 
    DivInternals.__default.DivPos#canCall(LitInt(x#0), LitInt(d#0))
         || Lit(INTERNAL_gt_boogie(d#0, 0))
       ==> (Lit(INTERNAL_lt_boogie(x#0, 0))
           ==> DivInternals.__default.DivPos#canCall(LitInt(INTERNAL_add_boogie(x#0, d#0)), LitInt(d#0)))
         && (!Lit(INTERNAL_lt_boogie(x#0, 0))
           ==> 
          !Lit(INTERNAL_lt_boogie(x#0, d#0))
           ==> DivInternals.__default.DivPos#canCall(LitInt(INTERNAL_sub_boogie(x#0, d#0)), LitInt(d#0)))
         && DivInternals.__default.DivPos($LS($ly), LitInt(x#0), LitInt(d#0))
           == (if INTERNAL_lt_boogie(x#0, 0)
             then INTERNAL_add_boogie(-1, 
              DivInternals.__default.DivPos($LS($ly), LitInt(INTERNAL_add_boogie(x#0, d#0)), LitInt(d#0)))
             else (if INTERNAL_lt_boogie(x#0, d#0)
               then 0
               else INTERNAL_add_boogie(1, 
                DivInternals.__default.DivPos($LS($ly), LitInt(INTERNAL_sub_boogie(x#0, d#0)), LitInt(d#0))))));

// function declaration for DivInternals._default.DivRecursive
function DivInternals.__default.DivRecursive($ly: LayerType, x#0: int, d#0: int) : int;

function DivInternals.__default.DivRecursive#canCall(x#0: int, d#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { DivInternals.__default.DivRecursive($LS($ly), x#0, d#0) } 
  DivInternals.__default.DivRecursive($LS($ly), x#0, d#0)
     == DivInternals.__default.DivRecursive($ly, x#0, d#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { DivInternals.__default.DivRecursive(AsFuelBottom($ly), x#0, d#0) } 
  DivInternals.__default.DivRecursive($ly, x#0, d#0)
     == DivInternals.__default.DivRecursive($LZ, x#0, d#0));

// consequence axiom for DivInternals.__default.DivRecursive
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    { DivInternals.__default.DivRecursive($ly, x#0, d#0) } 
    DivInternals.__default.DivRecursive#canCall(x#0, d#0) || d#0 != 0 ==> true);

function DivInternals.__default.DivRecursive#requires(LayerType, int, int) : bool;

// #requires axiom for DivInternals.__default.DivRecursive
axiom (forall $ly: LayerType, x#0: int, d#0: int :: 
  { DivInternals.__default.DivRecursive#requires($ly, x#0, d#0) } 
  DivInternals.__default.DivRecursive#requires($ly, x#0, d#0) == (d#0 != 0));

const MoreFuel_DivInternals._default.DivPos0: LayerType;

const MoreFuel_DivInternals._default.DivPos1: LayerType;

// definition axiom for DivInternals.__default.DivRecursive (revealed)
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    { DivInternals.__default.DivRecursive($LS($ly), x#0, d#0) } 
    DivInternals.__default.DivRecursive#canCall(x#0, d#0) || d#0 != 0
       ==> (INTERNAL_gt_boogie(d#0, 0) ==> DivInternals.__default.DivPos#canCall(x#0, d#0))
         && (!INTERNAL_gt_boogie(d#0, 0)
           ==> DivInternals.__default.DivPos#canCall(x#0, INTERNAL_mul_boogie(-1, d#0)))
         && 
        StartFuel_DivInternals._default.DivPos
           == $LS(MoreFuel_DivInternals._default.DivPos0)
         && StartFuelAssert_DivInternals._default.DivPos
           == $LS($LS(MoreFuel_DivInternals._default.DivPos0))
         && AsFuelBottom(MoreFuel_DivInternals._default.DivPos0)
           == MoreFuel_DivInternals._default.DivPos0
         && StartFuel_DivInternals._default.DivPos
           == $LS(MoreFuel_DivInternals._default.DivPos1)
         && StartFuelAssert_DivInternals._default.DivPos
           == $LS($LS(MoreFuel_DivInternals._default.DivPos1))
         && AsFuelBottom(MoreFuel_DivInternals._default.DivPos1)
           == MoreFuel_DivInternals._default.DivPos1
         && DivInternals.__default.DivRecursive($LS($ly), x#0, d#0)
           == (if INTERNAL_gt_boogie(d#0, 0)
             then DivInternals.__default.DivPos(StartFuel_DivInternals._default.DivPos, x#0, d#0)
             else INTERNAL_mul_boogie(-1, 
              DivInternals.__default.DivPos(StartFuel_DivInternals._default.DivPos, x#0, INTERNAL_mul_boogie(-1, d#0)))));

const MoreFuel_DivInternals._default.DivPos2: LayerType;

const MoreFuel_DivInternals._default.DivPos3: LayerType;

// definition axiom for DivInternals.__default.DivRecursive for all literals (revealed)
axiom true
   ==> (forall $ly: LayerType, x#0: int, d#0: int :: 
    {:weight 3} { DivInternals.__default.DivRecursive($LS($ly), LitInt(x#0), LitInt(d#0)) } 
    DivInternals.__default.DivRecursive#canCall(LitInt(x#0), LitInt(d#0))
         || Lit(d#0 != 0)
       ==> (Lit(INTERNAL_gt_boogie(d#0, 0))
           ==> DivInternals.__default.DivPos#canCall(LitInt(x#0), LitInt(d#0)))
         && (!Lit(INTERNAL_gt_boogie(d#0, 0))
           ==> DivInternals.__default.DivPos#canCall(LitInt(x#0), LitInt(INTERNAL_mul_boogie(-1, d#0))))
         && 
        StartFuel_DivInternals._default.DivPos
           == $LS(MoreFuel_DivInternals._default.DivPos2)
         && StartFuelAssert_DivInternals._default.DivPos
           == $LS($LS(MoreFuel_DivInternals._default.DivPos2))
         && AsFuelBottom(MoreFuel_DivInternals._default.DivPos2)
           == MoreFuel_DivInternals._default.DivPos2
         && StartFuel_DivInternals._default.DivPos
           == $LS(MoreFuel_DivInternals._default.DivPos3)
         && StartFuelAssert_DivInternals._default.DivPos
           == $LS($LS(MoreFuel_DivInternals._default.DivPos3))
         && AsFuelBottom(MoreFuel_DivInternals._default.DivPos3)
           == MoreFuel_DivInternals._default.DivPos3
         && DivInternals.__default.DivRecursive($LS($ly), LitInt(x#0), LitInt(d#0))
           == (if INTERNAL_gt_boogie(d#0, 0)
             then DivInternals.__default.DivPos(StartFuel_DivInternals._default.DivPos, LitInt(x#0), LitInt(d#0))
             else INTERNAL_mul_boogie(-1, 
              DivInternals.__default.DivPos(StartFuel_DivInternals._default.DivPos, 
                LitInt(x#0), 
                LitInt(INTERNAL_mul_boogie(-1, d#0))))));

// function declaration for DivInternals._default.DivAuto
function DivInternals.__default.DivAuto(n#0: int) : bool;

function DivInternals.__default.DivAuto#canCall(n#0: int) : bool;

// consequence axiom for DivInternals.__default.DivAuto
axiom true
   ==> (forall n#0: int :: 
    { DivInternals.__default.DivAuto(n#0) } 
    DivInternals.__default.DivAuto#canCall(n#0) || INTERNAL_gt_boogie(n#0, 0)
       ==> true);

function DivInternals.__default.DivAuto#requires(int) : bool;

// #requires axiom for DivInternals.__default.DivAuto
axiom (forall n#0: int :: 
  { DivInternals.__default.DivAuto#requires(n#0) } 
  DivInternals.__default.DivAuto#requires(n#0) == INTERNAL_gt_boogie(n#0, 0));

// definition axiom for DivInternals.__default.DivAuto (revealed)
axiom true
   ==> (forall n#0: int :: 
    { DivInternals.__default.DivAuto(n#0) } 
    DivInternals.__default.DivAuto#canCall(n#0) || INTERNAL_gt_boogie(n#0, 0)
       ==> ModInternals.__default.ModAuto#canCall(n#0)
         && DivInternals.__default.DivAuto(n#0)
           == (
            ModInternals.__default.ModAuto(n#0)
             && 
            INTERNAL_div_boogie(n#0, n#0)
               == INTERNAL_sub_boogie(0, INTERNAL_div_boogie(INTERNAL_sub_boogie(0, n#0), n#0))
             && INTERNAL_sub_boogie(0, INTERNAL_div_boogie(INTERNAL_sub_boogie(0, n#0), n#0))
               == LitInt(1)
             && (forall x#0: int :: 
              { INTERNAL_div_boogie(x#0, n#0) } 
              true
                 ==> (INTERNAL_le_boogie(0, x#0) && INTERNAL_lt_boogie(x#0, n#0)
                   <==> INTERNAL_div_boogie(x#0, n#0) == LitInt(0)))
             && (forall x#1: int, y#0: int :: 
              { INTERNAL_div_boogie(INTERNAL_add_boogie(x#1, y#0), n#0) } 
              true
                 ==> (var z#0 := INTERNAL_add_boogie(INTERNAL_mod_boogie(x#1, n#0), INTERNAL_mod_boogie(y#0, n#0)); 
                  (
                      INTERNAL_le_boogie(0, z#0)
                       && INTERNAL_lt_boogie(z#0, n#0)
                       && INTERNAL_div_boogie(INTERNAL_add_boogie(x#1, y#0), n#0)
                         == INTERNAL_add_boogie(INTERNAL_div_boogie(x#1, n#0), INTERNAL_div_boogie(y#0, n#0)))
                     || (
                      INTERNAL_le_boogie(n#0, z#0)
                       && INTERNAL_lt_boogie(z#0, INTERNAL_add_boogie(n#0, n#0))
                       && INTERNAL_div_boogie(INTERNAL_add_boogie(x#1, y#0), n#0)
                         == INTERNAL_add_boogie(INTERNAL_add_boogie(INTERNAL_div_boogie(x#1, n#0), INTERNAL_div_boogie(y#0, n#0)), 
                          1))))
             && (forall x#2: int, y#1: int :: 
              { INTERNAL_div_boogie(INTERNAL_sub_boogie(x#2, y#1), n#0) } 
              true
                 ==> (var z#1 := INTERNAL_sub_boogie(INTERNAL_mod_boogie(x#2, n#0), INTERNAL_mod_boogie(y#1, n#0)); 
                  (
                      INTERNAL_le_boogie(0, z#1)
                       && INTERNAL_lt_boogie(z#1, n#0)
                       && INTERNAL_div_boogie(INTERNAL_sub_boogie(x#2, y#1), n#0)
                         == INTERNAL_sub_boogie(INTERNAL_div_boogie(x#2, n#0), INTERNAL_div_boogie(y#1, n#0)))
                     || (
                      INTERNAL_le_boogie(INTERNAL_sub_boogie(0, n#0), z#1)
                       && INTERNAL_lt_boogie(z#1, 0)
                       && INTERNAL_div_boogie(INTERNAL_sub_boogie(x#2, y#1), n#0)
                         == INTERNAL_sub_boogie(INTERNAL_sub_boogie(INTERNAL_div_boogie(x#2, n#0), INTERNAL_div_boogie(y#1, n#0)), 
                          1))))));

// definition axiom for DivInternals.__default.DivAuto for all literals (revealed)
axiom true
   ==> (forall n#0: int :: 
    {:weight 3} { DivInternals.__default.DivAuto(LitInt(n#0)) } 
    DivInternals.__default.DivAuto#canCall(LitInt(n#0))
         || Lit(INTERNAL_gt_boogie(n#0, 0))
       ==> ModInternals.__default.ModAuto#canCall(LitInt(n#0))
         && DivInternals.__default.DivAuto(LitInt(n#0))
           == (
            ModInternals.__default.ModAuto(LitInt(n#0))
             && 
            LitInt(INTERNAL_div_boogie(n#0, n#0))
               == LitInt(INTERNAL_sub_boogie(0, INTERNAL_div_boogie(INTERNAL_sub_boogie(0, n#0), n#0)))
             && LitInt(INTERNAL_sub_boogie(0, INTERNAL_div_boogie(INTERNAL_sub_boogie(0, n#0), n#0)))
               == LitInt(1)
             && (forall x#3: int :: 
              { INTERNAL_div_boogie(x#3, n#0) } 
              true
                 ==> (INTERNAL_le_boogie(0, x#3) && INTERNAL_lt_boogie(x#3, n#0)
                   <==> INTERNAL_div_boogie(x#3, n#0) == LitInt(0)))
             && (forall x#4: int, y#2: int :: 
              { INTERNAL_div_boogie(INTERNAL_add_boogie(x#4, y#2), n#0) } 
              true
                 ==> (var z#2 := INTERNAL_add_boogie(INTERNAL_mod_boogie(x#4, n#0), INTERNAL_mod_boogie(y#2, n#0)); 
                  (
                      INTERNAL_le_boogie(0, z#2)
                       && INTERNAL_lt_boogie(z#2, n#0)
                       && INTERNAL_div_boogie(INTERNAL_add_boogie(x#4, y#2), n#0)
                         == INTERNAL_add_boogie(INTERNAL_div_boogie(x#4, n#0), INTERNAL_div_boogie(y#2, n#0)))
                     || (
                      INTERNAL_le_boogie(n#0, z#2)
                       && INTERNAL_lt_boogie(z#2, INTERNAL_add_boogie(n#0, n#0))
                       && INTERNAL_div_boogie(INTERNAL_add_boogie(x#4, y#2), n#0)
                         == INTERNAL_add_boogie(INTERNAL_add_boogie(INTERNAL_div_boogie(x#4, n#0), INTERNAL_div_boogie(y#2, n#0)), 
                          1))))
             && (forall x#5: int, y#3: int :: 
              { INTERNAL_div_boogie(INTERNAL_sub_boogie(x#5, y#3), n#0) } 
              true
                 ==> (var z#3 := INTERNAL_sub_boogie(INTERNAL_mod_boogie(x#5, n#0), INTERNAL_mod_boogie(y#3, n#0)); 
                  (
                      INTERNAL_le_boogie(0, z#3)
                       && INTERNAL_lt_boogie(z#3, n#0)
                       && INTERNAL_div_boogie(INTERNAL_sub_boogie(x#5, y#3), n#0)
                         == INTERNAL_sub_boogie(INTERNAL_div_boogie(x#5, n#0), INTERNAL_div_boogie(y#3, n#0)))
                     || (
                      INTERNAL_le_boogie(INTERNAL_sub_boogie(0, n#0), z#3)
                       && INTERNAL_lt_boogie(z#3, 0)
                       && INTERNAL_div_boogie(INTERNAL_sub_boogie(x#5, y#3), n#0)
                         == INTERNAL_sub_boogie(INTERNAL_sub_boogie(INTERNAL_div_boogie(x#5, n#0), INTERNAL_div_boogie(y#3, n#0)), 
                          1))))));

const unique class.DivMod.__default: ClassName;

function Tclass.DivMod.__default() : Ty;

const unique Tagclass.DivMod.__default: TyTag;

// Tclass.DivMod.__default Tag
axiom Tag(Tclass.DivMod.__default()) == Tagclass.DivMod.__default
   && TagFamily(Tclass.DivMod.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.DivMod.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.DivMod.__default()) } 
  $IsBox(bx, Tclass.DivMod.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass.DivMod.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.DivMod.__default()) } 
  $Is($o, Tclass.DivMod.__default())
     <==> $o == null || dtype($o) == Tclass.DivMod.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.DivMod.__default(), $h) } 
  $IsAlloc($o, Tclass.DivMod.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

procedure CheckWellformed$$DivMod.__default.LemmaSmallMod(x#0: int where INTERNAL_le_boogie(0, x#0), 
    m#0: int where INTERNAL_le_boogie(0, m#0));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$DivMod.__default.LemmaSmallMod(x#0: int where INTERNAL_le_boogie(0, x#0), 
    m#0: int where INTERNAL_le_boogie(0, m#0));
  // user-defined preconditions
  requires INTERNAL_lt_boogie(x#0, m#0);
  requires INTERNAL_lt_boogie(0, m#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures INTERNAL_mod_boogie(x#0, m#0) == x#0;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure CheckWellformed$$DivMod.__default.LemmaMulModNoopRightAuto();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$DivMod.__default.LemmaMulModNoopRightAuto();
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures (forall x#0: int, y#0: int, m#0: int :: 
    { INTERNAL_mod_boogie(INTERNAL_mul_boogie(x#0, y#0), m#0) } 
    true
       ==> 
      INTERNAL_lt_boogie(0, m#0)
       ==> INTERNAL_mod_boogie(INTERNAL_mul_boogie(x#0, INTERNAL_mod_boogie(y#0, m#0)), m#0)
         == INTERNAL_mod_boogie(INTERNAL_mul_boogie(x#0, y#0), m#0));
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for DivMod._default.IsModEquivalent
function DivMod.__default.IsModEquivalent(x#0: int, y#0: int, m#0: int) : bool;

function DivMod.__default.IsModEquivalent#canCall(x#0: int, y#0: int, m#0: int) : bool;

// consequence axiom for DivMod.__default.IsModEquivalent
axiom true
   ==> (forall x#0: int, y#0: int, m#0: int :: 
    { DivMod.__default.IsModEquivalent(x#0, y#0, m#0) } 
    DivMod.__default.IsModEquivalent#canCall(x#0, y#0, m#0)
         || INTERNAL_gt_boogie(m#0, 0)
       ==> (INTERNAL_mod_boogie(x#0, m#0) == INTERNAL_mod_boogie(y#0, m#0)
         <==> INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#0, y#0), m#0) == LitInt(0)));

function DivMod.__default.IsModEquivalent#requires(int, int, int) : bool;

// #requires axiom for DivMod.__default.IsModEquivalent
axiom (forall x#0: int, y#0: int, m#0: int :: 
  { DivMod.__default.IsModEquivalent#requires(x#0, y#0, m#0) } 
  DivMod.__default.IsModEquivalent#requires(x#0, y#0, m#0)
     == INTERNAL_gt_boogie(m#0, 0));

// definition axiom for DivMod.__default.IsModEquivalent (revealed)
axiom true
   ==> (forall x#0: int, y#0: int, m#0: int :: 
    { DivMod.__default.IsModEquivalent(x#0, y#0, m#0) } 
    DivMod.__default.IsModEquivalent#canCall(x#0, y#0, m#0)
         || INTERNAL_gt_boogie(m#0, 0)
       ==> DivMod.__default.IsModEquivalent(x#0, y#0, m#0)
         == 
        (INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#0, y#0), m#0)
         == LitInt(0)));

// definition axiom for DivMod.__default.IsModEquivalent for all literals (revealed)
axiom true
   ==> (forall x#0: int, y#0: int, m#0: int :: 
    {:weight 3} { DivMod.__default.IsModEquivalent(LitInt(x#0), LitInt(y#0), LitInt(m#0)) } 
    DivMod.__default.IsModEquivalent#canCall(LitInt(x#0), LitInt(y#0), LitInt(m#0))
         || Lit(INTERNAL_gt_boogie(m#0, 0))
       ==> DivMod.__default.IsModEquivalent(LitInt(x#0), LitInt(y#0), LitInt(m#0))
         == 
        (LitInt(INTERNAL_mod_boogie(INTERNAL_sub_boogie(x#0, y#0), m#0))
         == LitInt(0)));

const unique class.Power.__default: ClassName;

function Tclass.Power.__default() : Ty;

const unique Tagclass.Power.__default: TyTag;

// Tclass.Power.__default Tag
axiom Tag(Tclass.Power.__default()) == Tagclass.Power.__default
   && TagFamily(Tclass.Power.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.Power.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.Power.__default()) } 
  $IsBox(bx, Tclass.Power.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass.Power.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.Power.__default()) } 
  $Is($o, Tclass.Power.__default())
     <==> $o == null || dtype($o) == Tclass.Power.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.Power.__default(), $h) } 
  $IsAlloc($o, Tclass.Power.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for Power._default.Pow
function Power.__default.Pow($ly: LayerType, b#0: int, e#0: int) : int;

function Power.__default.Pow#canCall(b#0: int, e#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, b#0: int, e#0: int :: 
  { Power.__default.Pow($LS($ly), b#0, e#0) } 
  Power.__default.Pow($LS($ly), b#0, e#0) == Power.__default.Pow($ly, b#0, e#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, b#0: int, e#0: int :: 
  { Power.__default.Pow(AsFuelBottom($ly), b#0, e#0) } 
  Power.__default.Pow($ly, b#0, e#0) == Power.__default.Pow($LZ, b#0, e#0));

// consequence axiom for Power.__default.Pow
axiom true
   ==> (forall $ly: LayerType, b#0: int, e#0: int :: 
    { Power.__default.Pow($ly, b#0, e#0) } 
    Power.__default.Pow#canCall(b#0, e#0) || INTERNAL_le_boogie(0, e#0) ==> true);

function Power.__default.Pow#requires(LayerType, int, int) : bool;

// #requires axiom for Power.__default.Pow
axiom (forall $ly: LayerType, b#0: int, e#0: int :: 
  { Power.__default.Pow#requires($ly, b#0, e#0) } 
  INTERNAL_le_boogie(0, e#0)
     ==> Power.__default.Pow#requires($ly, b#0, e#0) == true);

// definition axiom for Power.__default.Pow (revealed)
axiom true
   ==> (forall $ly: LayerType, b#0: int, e#0: int :: 
    { Power.__default.Pow($LS($ly), b#0, e#0) } 
    Power.__default.Pow#canCall(b#0, e#0) || INTERNAL_le_boogie(0, e#0)
       ==> (e#0 != LitInt(0)
           ==> Power.__default.Pow#canCall(b#0, INTERNAL_sub_boogie(e#0, 1)))
         && Power.__default.Pow($LS($ly), b#0, e#0)
           == (if e#0 == LitInt(0)
             then 1
             else INTERNAL_mul_boogie(b#0, Power.__default.Pow($ly, b#0, INTERNAL_sub_boogie(e#0, 1)))));

// definition axiom for Power.__default.Pow for decreasing-related literals (revealed)
axiom true
   ==> (forall $ly: LayerType, b#0: int, e#0: int :: 
    {:weight 3} { Power.__default.Pow($LS($ly), b#0, LitInt(e#0)) } 
    Power.__default.Pow#canCall(b#0, LitInt(e#0)) || INTERNAL_le_boogie(0, e#0)
       ==> (LitInt(e#0) != LitInt(0)
           ==> Power.__default.Pow#canCall(b#0, LitInt(INTERNAL_sub_boogie(e#0, 1))))
         && Power.__default.Pow($LS($ly), b#0, LitInt(e#0))
           == (if LitInt(e#0) == LitInt(0)
             then 1
             else INTERNAL_mul_boogie(b#0, Power.__default.Pow($LS($ly), b#0, LitInt(INTERNAL_sub_boogie(e#0, 1))))));

// definition axiom for Power.__default.Pow for all literals (revealed)
axiom true
   ==> (forall $ly: LayerType, b#0: int, e#0: int :: 
    {:weight 3} { Power.__default.Pow($LS($ly), LitInt(b#0), LitInt(e#0)) } 
    Power.__default.Pow#canCall(LitInt(b#0), LitInt(e#0))
         || INTERNAL_le_boogie(0, e#0)
       ==> (LitInt(e#0) != LitInt(0)
           ==> Power.__default.Pow#canCall(LitInt(b#0), LitInt(INTERNAL_sub_boogie(e#0, 1))))
         && Power.__default.Pow($LS($ly), LitInt(b#0), LitInt(e#0))
           == (if LitInt(e#0) == LitInt(0)
             then 1
             else INTERNAL_mul_boogie(b#0, 
              Power.__default.Pow($LS($ly), LitInt(b#0), LitInt(INTERNAL_sub_boogie(e#0, 1))))));

procedure {:_induction b#0, e1#0, e2#0} CheckWellformed$$Power.__default.LemmaPowAdds(b#0: int, 
    e1#0: int where INTERNAL_le_boogie(0, e1#0), 
    e2#0: int where INTERNAL_le_boogie(0, e2#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure {:_induction b#0, e1#0, e2#0} Call$$Power.__default.LemmaPowAdds(b#0: int, 
    e1#0: int where INTERNAL_le_boogie(0, e1#0), 
    e2#0: int where INTERNAL_le_boogie(0, e2#0));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Power.__default.Pow#canCall(b#0, INTERNAL_add_boogie(e1#0, e2#0))
     && 
    Power.__default.Pow#canCall(b#0, e1#0)
     && Power.__default.Pow#canCall(b#0, e2#0);
  ensures Power.__default.Pow(StartFuelAssert_Power._default.Pow, b#0, INTERNAL_add_boogie(e1#0, e2#0))
     == INTERNAL_mul_boogie(Power.__default.Pow(StartFuelAssert_Power._default.Pow, b#0, e1#0), 
      Power.__default.Pow(StartFuelAssert_Power._default.Pow, b#0, e2#0));
  // frame condition
  free ensures old($Heap) == $Heap;



const unique class.Power2.__default: ClassName;

function Tclass.Power2.__default() : Ty;

const unique Tagclass.Power2.__default: TyTag;

// Tclass.Power2.__default Tag
axiom Tag(Tclass.Power2.__default()) == Tagclass.Power2.__default
   && TagFamily(Tclass.Power2.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.Power2.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.Power2.__default()) } 
  $IsBox(bx, Tclass.Power2.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass.Power2.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.Power2.__default()) } 
  $Is($o, Tclass.Power2.__default())
     <==> $o == null || dtype($o) == Tclass.Power2.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.Power2.__default(), $h) } 
  $IsAlloc($o, Tclass.Power2.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for Power2._default.Pow2
function Power2.__default.Pow2($ly: LayerType, e#0: int) : int;

function Power2.__default.Pow2#canCall(e#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, e#0: int :: 
  { Power2.__default.Pow2($LS($ly), e#0) } 
  Power2.__default.Pow2($LS($ly), e#0) == Power2.__default.Pow2($ly, e#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, e#0: int :: 
  { Power2.__default.Pow2(AsFuelBottom($ly), e#0) } 
  Power2.__default.Pow2($ly, e#0) == Power2.__default.Pow2($LZ, e#0));

// consequence axiom for Power2.__default.Pow2
axiom true
   ==> (forall $ly: LayerType, e#0: int :: 
    { Power2.__default.Pow2($ly, e#0) } 
    Power2.__default.Pow2#canCall(e#0) || INTERNAL_le_boogie(0, e#0)
       ==> INTERNAL_gt_boogie(Power2.__default.Pow2($ly, e#0), 0)
         && INTERNAL_le_boogie(0, Power2.__default.Pow2($ly, e#0)));

function Power2.__default.Pow2#requires(LayerType, int) : bool;

// #requires axiom for Power2.__default.Pow2
axiom (forall $ly: LayerType, e#0: int :: 
  { Power2.__default.Pow2#requires($ly, e#0) } 
  INTERNAL_le_boogie(0, e#0) ==> Power2.__default.Pow2#requires($ly, e#0) == true);

const MoreFuel_Power._default.Pow0: LayerType;

const MoreFuel_Power._default.Pow1: LayerType;

// definition axiom for Power2.__default.Pow2 (revealed)
axiom true
   ==> (forall $ly: LayerType, e#0: int :: 
    { Power2.__default.Pow2($LS($ly), e#0) } 
    Power2.__default.Pow2#canCall(e#0) || INTERNAL_le_boogie(0, e#0)
       ==> Power.__default.Pow#canCall(LitInt(2), e#0)
         && 
        StartFuel_Power._default.Pow == $LS(MoreFuel_Power._default.Pow0)
         && StartFuelAssert_Power._default.Pow == $LS($LS(MoreFuel_Power._default.Pow0))
         && AsFuelBottom(MoreFuel_Power._default.Pow0) == MoreFuel_Power._default.Pow0
         && StartFuel_Power._default.Pow == $LS(MoreFuel_Power._default.Pow1)
         && StartFuelAssert_Power._default.Pow == $LS($LS(MoreFuel_Power._default.Pow1))
         && AsFuelBottom(MoreFuel_Power._default.Pow1) == MoreFuel_Power._default.Pow1
         && Power2.__default.Pow2($LS($ly), e#0)
           == Power.__default.Pow(StartFuel_Power._default.Pow, LitInt(2), e#0));

const MoreFuel_Power._default.Pow2: LayerType;

const MoreFuel_Power._default.Pow3: LayerType;

// definition axiom for Power2.__default.Pow2 for all literals (revealed)
axiom true
   ==> (forall $ly: LayerType, e#0: int :: 
    {:weight 3} { Power2.__default.Pow2($LS($ly), LitInt(e#0)) } 
    Power2.__default.Pow2#canCall(LitInt(e#0)) || INTERNAL_le_boogie(0, e#0)
       ==> Power.__default.Pow#canCall(LitInt(2), LitInt(e#0))
         && 
        StartFuel_Power._default.Pow == $LS(MoreFuel_Power._default.Pow2)
         && StartFuelAssert_Power._default.Pow == $LS($LS(MoreFuel_Power._default.Pow2))
         && AsFuelBottom(MoreFuel_Power._default.Pow2) == MoreFuel_Power._default.Pow2
         && StartFuel_Power._default.Pow == $LS(MoreFuel_Power._default.Pow3)
         && StartFuelAssert_Power._default.Pow == $LS($LS(MoreFuel_Power._default.Pow3))
         && AsFuelBottom(MoreFuel_Power._default.Pow3) == MoreFuel_Power._default.Pow3
         && Power2.__default.Pow2($LS($ly), LitInt(e#0))
           == Power.__default.Pow(StartFuel_Power._default.Pow, LitInt(2), LitInt(e#0)));

procedure {:auto_generated} {:opaque_reveal} {:verify false} CheckWellformed$$Power2.__default.reveal__Pow2();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



const MoreFuel_Power2._default.Pow20: LayerType;

procedure {:auto_generated} {:opaque_reveal} {:verify false} Call$$Power2.__default.reveal__Pow2();
  modifies $Heap, $Tick;
  // frame condition
  free ensures old($Heap) == $Heap;
  free ensures StartFuel_Power2._default.Pow2 == $LS(MoreFuel_Power2._default.Pow20);
  free ensures StartFuelAssert_Power2._default.Pow2 == $LS($LS(MoreFuel_Power2._default.Pow20));
  // Shortcut to LZ
  free ensures AsFuelBottom(MoreFuel_Power2._default.Pow20) == MoreFuel_Power2._default.Pow20;



const unique class.B2N.__default: ClassName;

function Tclass.B2N.__default() : Ty;

const unique Tagclass.B2N.__default: TyTag;

// Tclass.B2N.__default Tag
axiom Tag(Tclass.B2N.__default()) == Tagclass.B2N.__default
   && TagFamily(Tclass.B2N.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.B2N.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.B2N.__default()) } 
  $IsBox(bx, Tclass.B2N.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass.B2N.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.B2N.__default()) } 
  $Is($o, Tclass.B2N.__default())
     <==> $o == null || dtype($o) == Tclass.B2N.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.B2N.__default(), $h) } 
  $IsAlloc($o, Tclass.B2N.__default(), $h) <==> $o == null || read($h, $o, alloc));

// function declaration for B2N._default.b2nAux
function B2N.__default.b2nAux($ly: LayerType, $heap: Heap, a#0: ref, i#0: int, j#0: int) : int;

function B2N.__default.b2nAux#canCall($heap: Heap, a#0: ref, i#0: int, j#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int, j#0: int :: 
  { B2N.__default.b2nAux($LS($ly), $Heap, a#0, i#0, j#0) } 
  B2N.__default.b2nAux($LS($ly), $Heap, a#0, i#0, j#0)
     == B2N.__default.b2nAux($ly, $Heap, a#0, i#0, j#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int, j#0: int :: 
  { B2N.__default.b2nAux(AsFuelBottom($ly), $Heap, a#0, i#0, j#0) } 
  B2N.__default.b2nAux($ly, $Heap, a#0, i#0, j#0)
     == B2N.__default.b2nAux($LZ, $Heap, a#0, i#0, j#0));

// frame axiom for B2N.__default.b2nAux
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, a#0: ref, i#0: int, j#0: int :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), B2N.__default.b2nAux($ly, $h1, a#0, i#0, j#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && (B2N.__default.b2nAux#canCall($h0, a#0, i#0, j#0)
         || (
          $Is(a#0, Tclass._System.array(Tclass._System.nat()))
           && INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(0, j#0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && $o == a#0 ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> B2N.__default.b2nAux($ly, $h0, a#0, i#0, j#0)
       == B2N.__default.b2nAux($ly, $h1, a#0, i#0, j#0));

// consequence axiom for B2N.__default.b2nAux
axiom true
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int, j#0: int :: 
    { B2N.__default.b2nAux($ly, $Heap, a#0, i#0, j#0) } 
    B2N.__default.b2nAux#canCall($Heap, a#0, i#0, j#0)
         || (
          $IsGoodHeap($Heap)
           && $Is(a#0, Tclass._System.array(Tclass._System.nat()))
           && INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(0, j#0)
           && 
          INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(i#0, j#0)
           && INTERNAL_le_boogie(j#0, _System.array.Length(a#0))
           && (forall k#0: int :: 
            { $Unbox(read($Heap, a#0, IndexField(k#0))): int } 
            INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, _System.array.Length(a#0))
               ==> $Unbox(read($Heap, a#0, IndexField(k#0))): int == LitInt(0)
                 || $Unbox(read($Heap, a#0, IndexField(k#0))): int == LitInt(1)))
       ==> INTERNAL_le_boogie(0, B2N.__default.b2nAux($ly, $Heap, a#0, i#0, j#0)));

function B2N.__default.b2nAux#requires(LayerType, Heap, ref, int, int) : bool;

// #requires axiom for B2N.__default.b2nAux
axiom (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int, j#0: int :: 
  { B2N.__default.b2nAux#requires($ly, $Heap, a#0, i#0, j#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && $Is(a#0, Tclass._System.array(Tclass._System.nat()))
       && INTERNAL_le_boogie(0, i#0)
       && INTERNAL_le_boogie(0, j#0)
     ==> B2N.__default.b2nAux#requires($ly, $Heap, a#0, i#0, j#0)
       == (
        INTERNAL_le_boogie(0, i#0)
         && INTERNAL_le_boogie(i#0, j#0)
         && INTERNAL_le_boogie(j#0, _System.array.Length(a#0))
         && (forall k#1: int :: 
          { $Unbox(read($Heap, a#0, IndexField(k#1))): int } 
          INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, _System.array.Length(a#0))
             ==> $Unbox(read($Heap, a#0, IndexField(k#1))): int == LitInt(0)
               || $Unbox(read($Heap, a#0, IndexField(k#1))): int == LitInt(1))));

// definition axiom for B2N.__default.b2nAux (revealed)
axiom true
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: ref, i#0: int, j#0: int :: 
    { B2N.__default.b2nAux($LS($ly), $Heap, a#0, i#0, j#0), $IsGoodHeap($Heap) } 
    B2N.__default.b2nAux#canCall($Heap, a#0, i#0, j#0)
         || (
          $IsGoodHeap($Heap)
           && $Is(a#0, Tclass._System.array(Tclass._System.nat()))
           && INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(0, j#0)
           && 
          INTERNAL_le_boogie(0, i#0)
           && INTERNAL_le_boogie(i#0, j#0)
           && INTERNAL_le_boogie(j#0, _System.array.Length(a#0))
           && (forall k#1: int :: 
            { $Unbox(read($Heap, a#0, IndexField(k#1))): int } 
            INTERNAL_le_boogie(0, k#1) && INTERNAL_lt_boogie(k#1, _System.array.Length(a#0))
               ==> $Unbox(read($Heap, a#0, IndexField(k#1))): int == LitInt(0)
                 || $Unbox(read($Heap, a#0, IndexField(k#1))): int == LitInt(1)))
       ==> (i#0 != j#0
           ==> B2N.__default.b2nAux#canCall($Heap, a#0, INTERNAL_add_boogie(i#0, 1), j#0))
         && B2N.__default.b2nAux($LS($ly), $Heap, a#0, i#0, j#0)
           == (if i#0 == j#0
             then 0
             else INTERNAL_add_boogie($Unbox(read($Heap, a#0, IndexField(i#0))): int, 
              INTERNAL_mul_boogie(2, B2N.__default.b2nAux($ly, $Heap, a#0, INTERNAL_add_boogie(i#0, 1), j#0)))));

procedure {:_induction a#0, l#0, i#0} CheckWellformed$$B2N.__default.LemmaB2NArrayTailingZeros(a#0: ref
       where $Is(a#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(a#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    l#0: int where INTERNAL_le_boogie(0, l#0), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure {:_induction a#0, l#0, i#0} Call$$B2N.__default.LemmaB2NArrayTailingZeros(a#0: ref
       where $Is(a#0, Tclass._System.array(Tclass._System.nat()))
         && $IsAlloc(a#0, Tclass._System.array(Tclass._System.nat()), $Heap), 
    l#0: int where INTERNAL_le_boogie(0, l#0), 
    i#0: int where INTERNAL_le_boogie(0, i#0));
  // user-defined preconditions
  requires INTERNAL_le_boogie(0, l#0);
  requires INTERNAL_le_boogie(l#0, i#0);
  requires INTERNAL_le_boogie(i#0, _System.array.Length(a#0));
  requires (forall k#0: int :: 
    { $Unbox(read($Heap, a#0, IndexField(k#0))): int } 
    INTERNAL_le_boogie(0, k#0) && INTERNAL_lt_boogie(k#0, i#0)
       ==> $Unbox(read($Heap, a#0, IndexField(k#0))): int == LitInt(0)
         || $Unbox(read($Heap, a#0, IndexField(k#0))): int == LitInt(1));
  requires (forall k#1: int :: 
    { $Unbox(read($Heap, a#0, IndexField(k#1))): int } 
    INTERNAL_le_boogie(i#0, k#1)
         && INTERNAL_lt_boogie(k#1, _System.array.Length(a#0))
       ==> $Unbox(read($Heap, a#0, IndexField(k#1))): int == LitInt(0));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures B2N.__default.b2nAux#canCall($Heap, a#0, l#0, _System.array.Length(a#0))
     && B2N.__default.b2nAux#canCall($Heap, a#0, l#0, i#0);
  ensures B2N.__default.b2nAux(StartFuelAssert_B2N._default.b2nAux, $Heap, a#0, l#0, _System.array.Length(a#0))
     == B2N.__default.b2nAux(StartFuelAssert_B2N._default.b2nAux, $Heap, a#0, l#0, i#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:auto_generated} {:opaque_reveal} {:verify false} CheckWellformed$$B2N.__default.reveal__b2nAux();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



const MoreFuel_B2N._default.b2nAux0: LayerType;

procedure {:auto_generated} {:opaque_reveal} {:verify false} Call$$B2N.__default.reveal__b2nAux();
  modifies $Heap, $Tick;
  // frame condition
  free ensures old($Heap) == $Heap;
  free ensures StartFuel_B2N._default.b2nAux == $LS(MoreFuel_B2N._default.b2nAux0);
  free ensures StartFuelAssert_B2N._default.b2nAux == $LS($LS(MoreFuel_B2N._default.b2nAux0));
  // Shortcut to LZ
  free ensures AsFuelBottom(MoreFuel_B2N._default.b2nAux0) == MoreFuel_B2N._default.b2nAux0;



// Constructor function declaration
function #Exp.ExpMode.RoU(int, int) : DatatypeType;

// Constructor identifier
axiom (forall a#0#0#0: int, a#0#1#0: int :: 
  { #Exp.ExpMode.RoU(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#Exp.ExpMode.RoU(a#0#0#0, a#0#1#0)) == ##Exp.ExpMode.RoU);

const unique ##Exp.ExpMode.RoU: DtCtorId;

function Exp.ExpMode.RoU_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { Exp.ExpMode.RoU_q(d) } 
  Exp.ExpMode.RoU_q(d) <==> DatatypeCtorId(d) == ##Exp.ExpMode.RoU);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { Exp.ExpMode.RoU_q(d) } 
  Exp.ExpMode.RoU_q(d)
     ==> (exists a#1#0#0: int, a#1#1#0: int :: d == #Exp.ExpMode.RoU(a#1#0#0, a#1#1#0)));

function Tclass.Exp.ExpMode() : Ty;

const unique Tagclass.Exp.ExpMode: TyTag;

// Tclass.Exp.ExpMode Tag
axiom Tag(Tclass.Exp.ExpMode()) == Tagclass.Exp.ExpMode
   && TagFamily(Tclass.Exp.ExpMode()) == tytagFamily$ExpMode;

// Box/unbox axiom for Tclass.Exp.ExpMode
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.Exp.ExpMode()) } 
  $IsBox(bx, Tclass.Exp.ExpMode())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.Exp.ExpMode()));

// Constructor $Is
axiom (forall a#2#0#0: int, a#2#1#0: int :: 
  { $Is(#Exp.ExpMode.RoU(a#2#0#0, a#2#1#0), Tclass.Exp.ExpMode()) } 
  $Is(#Exp.ExpMode.RoU(a#2#0#0, a#2#1#0), Tclass.Exp.ExpMode())
     <==> $Is(a#2#0#0, Tclass._System.nat()) && $Is(a#2#1#0, Tclass._System.nat()));

// Constructor $IsAlloc
axiom (forall a#2#0#0: int, a#2#1#0: int, $h: Heap :: 
  { $IsAlloc(#Exp.ExpMode.RoU(a#2#0#0, a#2#1#0), Tclass.Exp.ExpMode(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#Exp.ExpMode.RoU(a#2#0#0, a#2#1#0), Tclass.Exp.ExpMode(), $h)
       <==> $IsAlloc(a#2#0#0, Tclass._System.nat(), $h)
         && $IsAlloc(a#2#1#0, Tclass._System.nat(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(Exp.ExpMode.N(d), Tclass._System.nat(), $h) } 
  $IsGoodHeap($h) && Exp.ExpMode.RoU_q(d) && $IsAlloc(d, Tclass.Exp.ExpMode(), $h)
     ==> $IsAlloc(Exp.ExpMode.N(d), Tclass._System.nat(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(Exp.ExpMode.idx(d), Tclass._System.nat(), $h) } 
  $IsGoodHeap($h) && Exp.ExpMode.RoU_q(d) && $IsAlloc(d, Tclass.Exp.ExpMode(), $h)
     ==> $IsAlloc(Exp.ExpMode.idx(d), Tclass._System.nat(), $h));

// Constructor literal
axiom (forall a#3#0#0: int, a#3#1#0: int :: 
  { #Exp.ExpMode.RoU(LitInt(a#3#0#0), LitInt(a#3#1#0)) } 
  #Exp.ExpMode.RoU(LitInt(a#3#0#0), LitInt(a#3#1#0))
     == Lit(#Exp.ExpMode.RoU(a#3#0#0, a#3#1#0)));

function Exp.ExpMode.N(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#4#0#0: int, a#4#1#0: int :: 
  { #Exp.ExpMode.RoU(a#4#0#0, a#4#1#0) } 
  Exp.ExpMode.N(#Exp.ExpMode.RoU(a#4#0#0, a#4#1#0)) == a#4#0#0);

function Exp.ExpMode.idx(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#5#0#0: int, a#5#1#0: int :: 
  { #Exp.ExpMode.RoU(a#5#0#0, a#5#1#0) } 
  Exp.ExpMode.idx(#Exp.ExpMode.RoU(a#5#0#0, a#5#1#0)) == a#5#1#0);

// Depth-one case-split function
function $IsA#Exp.ExpMode(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#Exp.ExpMode(d) } 
  $IsA#Exp.ExpMode(d) ==> Exp.ExpMode.RoU_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { Exp.ExpMode.RoU_q(d), $Is(d, Tclass.Exp.ExpMode()) } 
  $Is(d, Tclass.Exp.ExpMode()) ==> Exp.ExpMode.RoU_q(d));

// Datatype extensional equality declaration
function Exp.ExpMode#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #Exp.ExpMode.RoU
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { Exp.ExpMode#Equal(a, b) } 
  true
     ==> (Exp.ExpMode#Equal(a, b)
       <==> Exp.ExpMode.N(a) == Exp.ExpMode.N(b) && Exp.ExpMode.idx(a) == Exp.ExpMode.idx(b)));

// Datatype extensionality axiom: Exp.ExpMode
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { Exp.ExpMode#Equal(a, b) } 
  Exp.ExpMode#Equal(a, b) <==> a == b);

const unique class.Exp.ExpMode: ClassName;

const unique class.Exp.IExp?: ClassName;

function Tclass.Exp.IExp?() : Ty;

const unique Tagclass.Exp.IExp?: TyTag;

// Tclass.Exp.IExp? Tag
axiom Tag(Tclass.Exp.IExp?()) == Tagclass.Exp.IExp?
   && TagFamily(Tclass.Exp.IExp?()) == tytagFamily$IExp;

// Box/unbox axiom for Tclass.Exp.IExp?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.Exp.IExp?()) } 
  $IsBox(bx, Tclass.Exp.IExp?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass.Exp.IExp?()));

// IExp: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.Exp.IExp?()) } 
  $Is($o, Tclass.Exp.IExp?()) <==> $o == null || dtype($o) == Tclass.Exp.IExp?());

// IExp: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.Exp.IExp?(), $h) } 
  $IsAlloc($o, Tclass.Exp.IExp?(), $h) <==> $o == null || read($h, $o, alloc));

const Exp.IExp.value: Field DatatypeType;

// IExp.value: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, Exp.IExp.value) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass.Exp.IExp?()
     ==> $Is(read($h, $o, Exp.IExp.value), Tclass.Exp.ExpMode()));

// IExp.value: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, Exp.IExp.value) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass.Exp.IExp?()
       && read($h, $o, alloc)
     ==> $IsAlloc(read($h, $o, Exp.IExp.value), Tclass.Exp.ExpMode(), $h));

procedure CheckWellformed$$Exp.IExp.mkRoU(this: ref
       where this != null
         && 
        $Is(this, Tclass.Exp.IExp())
         && $IsAlloc(this, Tclass.Exp.IExp(), $Heap), 
    N#0: int where INTERNAL_le_boogie(0, N#0), 
    idx#0: int where INTERNAL_le_boogie(0, idx#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$Exp.IExp.mkRoU(N#0: int where INTERNAL_le_boogie(0, N#0), 
    idx#0: int where INTERNAL_le_boogie(0, idx#0))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass.Exp.IExp())
         && $IsAlloc(this, Tclass.Exp.IExp(), $Heap));
  // user-defined preconditions
  requires INTERNAL_ge_boogie(N#0, 1);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Exp.IExp.Valid#canCall($Heap, this);
  free ensures Exp.IExp.Valid#canCall($Heap, this)
     && 
    Exp.IExp.Valid($Heap, this)
     && 
    read($Heap, this, Exp.IExp.Repr)[$Box(this)]
     && !read($Heap, this, Exp.IExp.Repr)[$Box(null)]
     && (var N#2 := Exp.ExpMode.N(read($Heap, this, Exp.IExp.value)); 
      INTERNAL_ge_boogie(N#2, 1));
  free ensures true;
  ensures (forall $o: ref :: 
    { read($Heap, this, Exp.IExp.Repr)[$Box($o)] } 
    read($Heap, this, Exp.IExp.Repr)[$Box($o)]
       ==> $o != null && !read(old($Heap), $o, alloc));
  free ensures true;
  ensures Exp.ExpMode.RoU_q(read($Heap, this, Exp.IExp.value));
  free ensures Exp.ExpMode.RoU_q(read($Heap, this, Exp.IExp.value))
     && (Exp.ExpMode.N(read($Heap, this, Exp.IExp.value)) == N#0
       ==> Exp.ExpMode.RoU_q(read($Heap, this, Exp.IExp.value)));
  ensures Exp.ExpMode.N(read($Heap, this, Exp.IExp.value)) == N#0;
  ensures Exp.ExpMode.idx(read($Heap, this, Exp.IExp.value)) == idx#0;
  // constructor allocates the object
  ensures !read(old($Heap), this, alloc);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc) ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



// function declaration for Exp.IExp.Valid
function Exp.IExp.Valid($heap: Heap, this: ref) : bool;

function Exp.IExp.Valid#canCall($heap: Heap, this: ref) : bool;

// frame axiom for Exp.IExp.Valid
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), Exp.IExp.Valid($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass.Exp.IExp())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && ($o == this || read($h0, this, Exp.IExp.Repr)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> Exp.IExp.Valid($h0, this) == Exp.IExp.Valid($h1, this));

// consequence axiom for Exp.IExp.Valid
axiom true
   ==> (forall $Heap: Heap, this: ref :: 
    { Exp.IExp.Valid($Heap, this) } 
    Exp.IExp.Valid#canCall($Heap, this)
         || ($IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass.Exp.IExp())
           && $IsAlloc(this, Tclass.Exp.IExp(), $Heap))
       ==> 
      Exp.IExp.Valid($Heap, this)
       ==> read($Heap, this, Exp.IExp.Repr)[$Box(this)]);

function Exp.IExp.Valid#requires(Heap, ref) : bool;

// #requires axiom for Exp.IExp.Valid
axiom (forall $Heap: Heap, this: ref :: 
  { Exp.IExp.Valid#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass.Exp.IExp())
       && $IsAlloc(this, Tclass.Exp.IExp(), $Heap)
     ==> Exp.IExp.Valid#requires($Heap, this) == true);

// definition axiom for Exp.IExp.Valid (revealed)
axiom true
   ==> (forall $Heap: Heap, this: ref :: 
    { Exp.IExp.Valid($Heap, this), $IsGoodHeap($Heap) } 
    Exp.IExp.Valid#canCall($Heap, this)
         || ($IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass.Exp.IExp())
           && $IsAlloc(this, Tclass.Exp.IExp(), $Heap))
       ==> (read($Heap, this, Exp.IExp.Repr)[$Box(this)]
           ==> 
          !read($Heap, this, Exp.IExp.Repr)[$Box(null)]
           ==> Exp.ExpMode.RoU_q(read($Heap, this, Exp.IExp.value)))
         && Exp.IExp.Valid($Heap, this)
           == (
            read($Heap, this, Exp.IExp.Repr)[$Box(this)]
             && !read($Heap, this, Exp.IExp.Repr)[$Box(null)]
             && (var N#0 := Exp.ExpMode.N(read($Heap, this, Exp.IExp.value)); 
              INTERNAL_ge_boogie(N#0, 1))));

// function declaration for Exp.IExp.Norm
function Exp.IExp.Norm($heap: Heap, this: ref) : int;

function Exp.IExp.Norm#canCall($heap: Heap, this: ref) : bool;

// frame axiom for Exp.IExp.Norm
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), Exp.IExp.Norm($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass.Exp.IExp())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($h0, this, Exp.IExp.Repr)[$Box($o)]
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> Exp.IExp.Norm($h0, this) == Exp.IExp.Norm($h1, this));

// consequence axiom for Exp.IExp.Norm
axiom true
   ==> (forall $Heap: Heap, this: ref :: 
    { Exp.IExp.Norm($Heap, this) } 
    Exp.IExp.Norm#canCall($Heap, this)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass.Exp.IExp())
           && $IsAlloc(this, Tclass.Exp.IExp(), $Heap)
           && Exp.IExp.Valid($Heap, this))
       ==> INTERNAL_le_boogie(0, Exp.IExp.Norm($Heap, this)));

function Exp.IExp.Norm#requires(Heap, ref) : bool;

// #requires axiom for Exp.IExp.Norm
axiom (forall $Heap: Heap, this: ref :: 
  { Exp.IExp.Norm#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass.Exp.IExp())
       && $IsAlloc(this, Tclass.Exp.IExp(), $Heap)
     ==> Exp.IExp.Norm#requires($Heap, this) == Exp.IExp.Valid($Heap, this));

// definition axiom for Exp.IExp.Norm (revealed)
axiom true
   ==> (forall $Heap: Heap, this: ref :: 
    { Exp.IExp.Norm($Heap, this), $IsGoodHeap($Heap) } 
    Exp.IExp.Norm#canCall($Heap, this)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass.Exp.IExp())
           && $IsAlloc(this, Tclass.Exp.IExp(), $Heap)
           && Exp.IExp.Valid($Heap, this))
       ==> Exp.IExp.Norm($Heap, this) == LitInt(1));

procedure CheckWellformed$$Exp.IExp.Div(this: ref
       where this != null
         && 
        $Is(this, Tclass.Exp.IExp())
         && $IsAlloc(this, Tclass.Exp.IExp(), $Heap), 
    idx#0: int where INTERNAL_le_boogie(0, idx#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$Exp.IExp.Div(this: ref
       where this != null
         && 
        $Is(this, Tclass.Exp.IExp())
         && $IsAlloc(this, Tclass.Exp.IExp(), $Heap), 
    idx#0: int where INTERNAL_le_boogie(0, idx#0));
  // user-defined preconditions
  requires Exp.IExp.Valid#canCall($Heap, this)
     ==> Exp.IExp.Valid($Heap, this) || read($Heap, this, Exp.IExp.Repr)[$Box(this)];
  requires Exp.IExp.Valid#canCall($Heap, this)
     ==> Exp.IExp.Valid($Heap, this) || !read($Heap, this, Exp.IExp.Repr)[$Box(null)];
  requires Exp.IExp.Valid#canCall($Heap, this)
     ==> Exp.IExp.Valid($Heap, this)
       || (var N#0 := Exp.ExpMode.N(read($Heap, this, Exp.IExp.value)); 
        INTERNAL_ge_boogie(N#0, 1));
  requires Exp.ExpMode.RoU_q(read($Heap, this, Exp.IExp.value));
  requires INTERNAL_le_boogie(idx#0, Exp.ExpMode.idx(read($Heap, this, Exp.IExp.value)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures Exp.IExp.Valid#canCall($Heap, this);
  free ensures Exp.IExp.Valid#canCall($Heap, this)
     && 
    Exp.IExp.Valid($Heap, this)
     && 
    read($Heap, this, Exp.IExp.Repr)[$Box(this)]
     && !read($Heap, this, Exp.IExp.Repr)[$Box(null)]
     && (var N#3 := Exp.ExpMode.N(read($Heap, this, Exp.IExp.value)); 
      INTERNAL_ge_boogie(N#3, 1));
  free ensures true;
  ensures (forall $o: ref :: 
    { read(old($Heap), $o, alloc) } 
    read($Heap, this, Exp.IExp.Repr)[$Box($o)]
         && !read(old($Heap), this, Exp.IExp.Repr)[$Box($o)]
       ==> $o != null && !read(old($Heap), $o, alloc));
  free ensures Exp.ExpMode.RoU_q(read($Heap, this, Exp.IExp.value))
     && Exp.ExpMode.RoU_q(read(old($Heap), this, Exp.IExp.value))
     && (Exp.ExpMode.idx(read($Heap, this, Exp.IExp.value))
         == INTERNAL_sub_boogie(Exp.ExpMode.idx(read(old($Heap), this, Exp.IExp.value)), idx#0)
       ==> Exp.ExpMode.RoU_q(read($Heap, this, Exp.IExp.value))
         && Exp.ExpMode.RoU_q(read(old($Heap), this, Exp.IExp.value)));
  ensures Exp.ExpMode.idx(read($Heap, this, Exp.IExp.value))
     == INTERNAL_sub_boogie(Exp.ExpMode.idx(read(old($Heap), this, Exp.IExp.value)), idx#0);
  ensures Exp.ExpMode.N(read($Heap, this, Exp.IExp.value))
     == Exp.ExpMode.N(read(old($Heap), this, Exp.IExp.value));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && read(old($Heap), $o, alloc)
       ==> $Heap[$o] == old($Heap)[$o] || read(old($Heap), this, Exp.IExp.Repr)[$Box($o)]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



const Exp.IExp.Repr: Field (Set Box);

// IExp.Repr: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, Exp.IExp.Repr) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass.Exp.IExp?()
     ==> $Is(read($h, $o, Exp.IExp.Repr), TSet(Tclass._System.object?())));

// IExp.Repr: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, Exp.IExp.Repr) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass.Exp.IExp?()
       && read($h, $o, alloc)
     ==> $IsAlloc(read($h, $o, Exp.IExp.Repr), TSet(Tclass._System.object?()), $h));

// Exp.IExp: non-null type $Is
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass.Exp.IExp()) } 
  $Is(c#0, Tclass.Exp.IExp()) <==> $Is(c#0, Tclass.Exp.IExp?()) && c#0 != null);

// Exp.IExp: non-null type $IsAlloc
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass.Exp.IExp(), $h) } 
  $IsAlloc(c#0, Tclass.Exp.IExp(), $h) <==> $IsAlloc(c#0, Tclass.Exp.IExp?(), $h));

const unique class.Exp.__default: ClassName;

function Tclass.Exp.__default() : Ty;

const unique Tagclass.Exp.__default: TyTag;

// Tclass.Exp.__default Tag
axiom Tag(Tclass.Exp.__default()) == Tagclass.Exp.__default
   && TagFamily(Tclass.Exp.__default()) == tytagFamily$_default;

// Box/unbox axiom for Tclass.Exp.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.Exp.__default()) } 
  $IsBox(bx, Tclass.Exp.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass.Exp.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass.Exp.__default()) } 
  $Is($o, Tclass.Exp.__default())
     <==> $o == null || dtype($o) == Tclass.Exp.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass.Exp.__default(), $h) } 
  $IsAlloc($o, Tclass.Exp.__default(), $h) <==> $o == null || read($h, $o, alloc));

axiom Exp.__default.E(): real == LitReal(271828e-5);

function Exp.__default.E() : real;

// _default.E: Type axiom
axiom $Is(Exp.__default.E(), TReal);

// _default.E: Allocation axiom
axiom (forall $h: Heap :: 
  { $IsAlloc(Exp.__default.E(), TReal, $h) } 
  $IsGoodHeap($h) ==> $IsAlloc(Exp.__default.E(), TReal, $h));

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_#Func4: TyTagFamily;

const unique tytagFamily$_#PartialFunc4: TyTagFamily;

const unique tytagFamily$_#TotalFunc4: TyTagFamily;

const unique tytagFamily$_#Func3: TyTagFamily;

const unique tytagFamily$_#PartialFunc3: TyTagFamily;

const unique tytagFamily$_#TotalFunc3: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$Mode: TyTagFamily;

const unique tytagFamily$Qubits: TyTagFamily;

const unique tytagFamily$_default: TyTagFamily;

const unique tytagFamily$IExp: TyTagFamily;

const unique tytagFamily$ExpMode: TyTagFamily;

const unique field$m: NameFamily;

const unique field$card: NameFamily;

const unique field$value: NameFamily;

const unique field$Repr: NameFamily;
